var testData = [{
  "body": "## Cases when a 404 page is needed\n\n1. When the URL does not match any defined routes, the application should render a 404 page.\n1. When a route's `model` hook has a call to `this.store` or `Em.$.ajax` and the result is a promise that is rejected perhaps the application should show a 404 page. \n\nFor example, when your adapter cannot find the resource that a route is expected to fetch. Ember.js routes may use an `error` action to transition to a 404 page. This will support a route which fails to transition due to a rejected promise caused by one or more of the route's hooks, e.g. `model`. \n\n## Catch-all route\n\nTo address the first case (above), when a given url doesn't match any route, define the last route in your router using a [wildcard globbing route]. \n\n[wildcard globbing route]: http://emberjs.com/guides/routing/defining-your-routes/#toc_wildcard-globbing-routes\n\nI setup a route for **[not-found]** in my router. The last route uses the wildcard `/*path` to catch any text string not already matched by other routes or resources. See the `'not-found'` route in the router example below.\n\n[not-found]: https://github.com/pixelhandler/blog/blob/master/client/app/router.js\n\n    Router.map(function () {\n      this.route('about');\n      this.resource('posts', function () {\n        this.resource('post', { path: ':post_slug' });\n      });\n      this.route('not-found', { path: '/*path' });\n    });\n\nWhen the wildcard path matches a url that should result in the application rendering a 404 page, the (404) [not-found route] utilizes the `redirect` hook in order to transition to the url `/not-found`. My app has a Route prototype (app/routes/not-found.js) which is mapped to the 'non-found' route:\n\n[not-found route]: https://github.com/pixelhandler/blog/blob/master/client/app/routes/not-found.js\n\n    import Ember from 'ember';\n\n    export default Ember.Route.extend({\n      redirect: function () {\n        var url = this.router.location.formatURL('/not-found');\n        if (window.location.pathname !== url) {\n          this.transitionTo('/not-found');\n        }\n      }\n    });\n\nThe result is that the application renders a `not-found` template (templates/not-found.hbs) with a link to my archives page. \n\n[not-found template]: https://github.com/pixelhandler/blog/blob/master/client/app/templates/not-found.hbs\n\n    <h1>404 Not Found</h1>\n    <p>\n      Perhaps you have a link that has changed, see {{#link-to 'posts'}}Archives{{/link-to}}.\n    </p>\n\n## Error in a route hook\n\nAny route having a hook (e.g. `model`, `beforeModel`, `afterModel`) that results in a rejected promise, can use the `error` action to transition to the 404. See the [Ember.Route error event] doc page.\n\n[Ember.Route error event]: http://emberjs.com/api/classes/Ember.Route.html#event_error\n\nDefine the action, log the error and transition to the '/not-found' page\n\n    import Ember from 'ember';\n\n    export default Ember.Route.extend({\n      actions: {\n        error: function (error) {\n          Ember.Logger.error(error);\n          this.transitionTo('/not-found');\n        }\n      }\n    });\n\nHere is my 404 page: <http://pixelhandler.com/not-found>.",
  "date": "2014-08-29T07:00:00.000Z",
  "excerpt": "Every so often someone in the `#emberjs` irc channel asks, \"How do I handle a 404 page using Ember.js?\" For example, see this [stackoverflow question], \"How to handle 'no route matched' in Ember.js and show 404 page?\"\n\n[stackoverflow question]: http://stackoverflow.com/a/25558348/499642",
  "id": "2e941340-2a35-4cbb-9202-4fb45862891d",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "how-to-use-404-page-in-your-emberjs-application",
  "title": "How to Use 404 Page in Your Ember.js Application"
},
{
  "body": "Following the release of Orbit.js, [Ember Orbit] was announced at the [Wicked Good Ember] conference. Again, I became excited about using smaller JSON Patch payloads (media type \"application/json-patch+json\"), see [RFC 6902]. I started a new branch and decided to support a REST source first; then later tackle a WebSocket source. I am a fan of the [JSON API] specification which does include [patch support]. Once I had a JSONAPISource working with Ember Orbit on my branch I updated my SocketSource prototype (class) to follow the JSONAPISource prototype so they could share the same serializer. Also if the client's browser doesn't support a WebSocket or perhaps in the case my socket server gets wacky the application can initialize with the JSONAPISource instead of the SocketSource prototype as the connected source to the application's MemorySource.\n\n[Dan Gebhardt]: https://twitter.com/dgeb\n[Ember.js]: http://emberjs.com/\n[Ember Orbit]: https://github.com/orbitjs/ember-orbit\n[Orbit.js]: https://github.com/orbitjs/orbit.js\n[blog repository]: https://github.com/pixelhandler/blog\n[Ember SC talk]: https://gist.github.com/pixelhandler/5389c72c82d26fae8fb1\n[Wicked Good Ember]: http://wickedgoodember.com/dan-gebhardt\n[RFC 6455]: http://tools.ietf.org/html/rfc6455\n[JSON API]: http://jsonapi.org/\n[patch support]: http://jsonapi.org/format/#patch\n\n## A Few Reasons to use WebSockets\n\n**Push support** in a browser application can be used to provide real-time updates site visitors. Waiting for a client's next request or page refresh to provide updates works great when you expect frequent reloads. However, when an application is shipped as a single page (an Ember.js application) push support is attractive.\n\n* Web Sockets (TCP)\n  * Potentially closer to real-time interations compared to REST\n  * Ships with All modern (popular) browsers, see [caniuse.com/#search=Socket][caniuse-Socket]\n  * Gets around CORS\n\n* Smaller payloads (partial representation of a resource)\n  * [JSONPatch][RFC 6902], [jsonpatch.com]\n\n* Connecting multiple storage adapters\n  * Memory <-> localStorage <-> Web Socket (remote db)\n\n* High availability (in a distributed computing system)\n  * Weak consistency with higher availability\n  * Choose liveness (eventually there) over Safety (always right)\n\n[caniuse-Socket]: http://caniuse.com/#search=Socket\n[RFC 6902]: https://tools.ietf.org/html/rfc6902\n[jsonpatch.com]: http://jsonpatch.com\n[RFC 6455]: http://tools.ietf.org/html/rfc6455\n\n## JSON Patch\n\nSee: [jsonpatch.com] ...\n\n\n### Simple example\n\nThe original document:\n```javascript\n{\n  \"baz\": \"qux\",\n  \"foo\": \"bar\"\n}\n```\n\nThe patch:\n```javascript\n[\n  { \"op\": \"replace\", \"path\": \"/baz\", \"value\": \"boo\" },\n  { \"op\": \"add\", \"path\": \"/hello, \"value\": [\"world\"] },\n  { \"op\": \"remove, \"path\": \"/foo}\n]\n```\n\nThe result:\n```javascript\n{\n   \"baz\": \"boo\",\n   \"hello\": [\"world\"]\n}\n```\n\n### Operations\n\n*Add, Remove, Replace, Copy, Copy, Test*\n\n#### Add\n\n```javascript\n{\"op\": \"add\", \"path\": \"/biscuits/1\", \"value\": {\"name\": \"Ginger Nut\"}}\n```\n\nAdds a value to an object or inserts it into an array. In the case of an array the value is inserted before the given index. The - character can be used instead of an index to insert at the end of an array.\n\n#### Remove\n\n```javascript\n{\"op\": \"remove\", \"path\": \"/biscuits\"}\n```\n\nRemoves a value from an object or array.\n\n#### Replace\n\n```javascript\n{\"op\": \"replace\", \"path\": \"/biscuits/0/name\", \"value\": \"Chocolate Digestive\"}\n```\n\nReplaces a value, equivalent to a “remove” followed by an “add”.\n\n\n### JSON Patch payloads used by this blog app\n\n* An add operation...\n\n```javascript\n{\"op\":\"add\",\"path\":\"/posts/-\",\"value\":{\"id\":\"a4d213d6-5595-4686-9817-169a7eddbda1\",\"slug\":\"test\",\"title\":\"test title\",\"date\":\"2014-10-29\",\"excerpt\":\"test excerpt text\",\"body\":\"test body text\",\"links\":{\"author\":null}}}\n```\n\n```javascript\n{\"path\":\"/posts/a4d213d6-5595-4686-9817-169a7eddbda1/links/author\",\"op\":\"add\",\"value\":\"5c9b62ec-1569-448b-912a-97e6d62f493e\"}\n```\n\n```javascript\n{\"path\":\"/authors/5c9b62ec-1569-448b-912a-97e6d62f493e/links/posts/-\",\"op\":\"add\",\"value\":\"a4d213d6-5595-4686-9817-169a7eddbda1\"}\n```\n\n* A delete operation...\n\n```javascript\n{\"op\":\"remove\",\"path\":\"/posts/341207e0-cfd9-4d3a-a5ab-d2268ab2e472/links/author\"}\n```\n\n```javascript\n{\"op\":\"remove\",\"path\":\"/authors/5c9b62ec-1569-448b-912a-97e6d62f493e/links/posts/341207e0-cfd9-4d3a-a5ab-d2268ab2e472\"}\n```\n\n```javascript\n{\"op\":\"remove\",\"path\":\"/posts/341207e0-cfd9-4d3a-a5ab-d2268ab2e472\"}\n```\n\n_Compare with the JSON API payloads_\n\n* http://pixelhandler.com/api/posts?limit=1\n* http://pixelhandler.com/api/authors?limit=1\n\n\n## [Orbit.js]\n\nLet's take a look at the [ember-orbit-example] [demo app](http://localhost:9000).\n\n[orbitjs/orbit.js]: https://github.com/orbitjs/orbit.js\n[ember-orbit-example]: https://github.com/dgeb/ember-orbit-example\n\nWatch Dan give an intoduction to Orbit.js. (YouTube video from the Jan '14 Boston Ember Meetup)\n\n* [Introduction to Orbit.js by Dan Gebhardt](https://www.youtube.com/watch?v=IAwk_mF-dWo)\n* [introducing Orbit.js slides](https://speakerdeck.com/dgeb/introducing-orbit-dot-js)\n\n### How Orbit works\n\n* Orbit requires that every data source support one or more common interfaces. These interfaces define how data can be both accessed and transformed.\n* The methods for accessing and transforming data return promises.\n* Multiple data sources can be involved in a single action\n\n**Orbit.js uses JSON / JSONPatch by default.**\n\n* Sends partial data\n* Uses multiple stores\n\n### Orbit interfaces:\n\n1. Requestable\n   * for managing requests for data via methods such as `find`, `create`, `update` and `destroy`\n1. Transformable\n   * Keep data sources in sync through low level transformations (using JSON PATCH spec)\n   * `transform` is the method your data source (prototype) object needs to implement\n\n#### Requestable\n\nEvents associated with an action:\n\n* `assistFind`, `rescueFind`, `didFind`, `didNotFind`\n\n#### Transformable\n\nA single method, `transform`, which can be used to change the contents of a source.\n\n```\n{op: 'add', path: 'planet/1', value: {__id: 1, name: 'Jupiter', classification: 'gas giant'}\n{op: 'replace', path: 'planet/1/name', value: 'Earth'}\n{op: 'remove', path: 'planet/1'}\n```\n\n### TransformConnector\n\nA TransformConnector watches a transformable source and propagates any transforms to a transformable target.\n\nEach connector is \"one way\", so bi-directional synchronization between sources requires the creation of two connectors.\n\n\n### RequestConnector\n\nA RequestConnector observes requests made to a primary source and allows a secondary source to either \"assist\" or \"rescue\" those requests.\n\nThe mode of a RequestConnector can be either \"rescue\" or \"assist\" (\"rescue\" is the default).\n\n### Document\n\nDocument is a complete implementation of the JSON PATCH spec detailed in RFC 6902.\n\nIt can be manipulated via a transform method that accepts an operation, or with methods `add`, `remove`, `replace`, `move`, `copy` and `test`.\n\nData at a particular path can be retrieved from a `Document` with `retrieve()`.\n\n## [Ember Orbit]\n\n\"A library that integrates Orbit.js with Ember.js to provide flexibility and control in your application's data layer\" \n\n* Video: [Building Autonomous Web Applications with Ember and Orbit]\n\n[Building Autonomous Web Applications with Ember and Orbit]: https://www.youtube.com/watch?v=omc4pnXv1Ds\n\nThis project uses [ember-cli], to the modules below use ES6 syntax, see the [ES6 draft].\n\n[ember-cli]: http://www.ember-cli.com/\n[ES6 draft]: https://people.mozilla.org/~jorendorff/es6-draft.html\n\n### Initializer\n\nConfigure Ember-Orbit with an application initializer that sets up Orbit and registers a \"main\" store and schema to be available in routes and controllers.\n\n* [initializers/ember-orbit.js]\n\n```js\nimport Orbit from 'orbit';\nimport EO from 'ember-orbit';\nimport JSONAPISource from 'orbit-common/jsonapi-source';\nimport ApplicationSerializer from '../serializers/application';\nimport SocketSource from '../adapters/socket-source';\nimport Ember from 'ember';\nimport config from '../config/environment';\n\nOrbit.Promise = Orbit.Promise || Ember.RSVP.Promise;\n\nfunction jsonApiStore() {\n  Orbit.ajax = Ember.$.ajax;\n  return EO.Store.extend({\n    orbitSourceClass: JSONAPISource,\n    orbitSourceOptions: {\n      host: config.APP.API_HOST,\n      namespace: config.APP.API_PATH,\n      SerializerClass: ApplicationSerializer,\n      usePatch: true,\n    }\n  });\n}\n\nfunction socketStore() {\n  return EO.Store.extend({\n    orbitSourceClass: SocketSource,\n    orbitSourceOptions: {\n      host: config.APP.SOCKET_URL,\n      SerializerClass: ApplicationSerializer,\n      usePatch: true,\n    }\n  });\n}\n\nvar Schema = EO.Schema.extend({\n  idField: 'id',\n\n  init: function (options) {\n    this._super(options);\n    this._schema.meta = Ember.Map.create();\n  }\n});\n\nexport default {\n  name: 'ember-orbit',\n  after: 'socket',\n\n  initialize: function(container, application) {\n    application.register('schema:main', Schema);\n    application.register('store:main', EO.Store);\n    if (notPrerenderService() && canUseSocket(container)) {\n      application.register('store:secondary', socketStore());\n    } else {\n      application.register('store:secondary', jsonApiStore());\n    }\n    connectSources(container);\n\n    application.inject('controller', 'store', 'store:main');\n    application.inject('route', 'store', 'store:main');\n  }\n};\n\nfunction notPrerenderService() {\n  return window.navigator.userAgent.match(/Prerender/) === null;\n}\n\nfunction canUseSocket(container) {\n  return window.WebSocket && container.lookup('socket:main');\n}\n\nfunction connectSources(container) {\n  var primarySource = container.lookup('store:main').orbitSource;\n  var secondarySource = container.lookup('store:secondary').orbitSource;\n  // Connect (using default blocking strategy)\n  setupConnectors(primarySource, secondarySource);\n}\n\nfunction setupConnectors(primary, secondary/*, local*/) {\n  new Orbit.TransformConnector(primary, secondary);\n  new Orbit.TransformConnector(secondary, primary);\n  primary.on('assistFind', secondary.find);\n}\n```\n\n[initializers/ember-orbit.js]: https://github.com/pixelhandler/blog/blob/master/client/app/initializers/ember-orbit.js\n\n### Sources\n\n\"Source are very thin wrappers over Orbit sources\"\n\n* [adapters/socket-source.js]\n\n```js\nimport Ember from 'ember';\nimport Orbit from 'orbit';\nimport OC from 'orbit-common';\nimport SocketService from '../services/socket';\nimport JSONAPISource from 'orbit-common/jsonapi-source';\n\nOrbit.Promise = Orbit.Promise || Ember.RSVP.Promise;\n\nvar SocketSource = JSONAPISource.extend({\n\n  init: function (schema, options) {\n    Orbit.assert('SocketSource requires SocketService be defined', SocketService);\n    Orbit.assert('SocketSource requires Orbit.Promise be defined', Orbit.Promise);\n    Orbit.assert('SocketSource only supports usePatch option', this.usePatch);\n    this._socket = SocketService.create();\n    this.initSerializer(schema, options);\n    // not calling super, instead calling template/abstract prototype init method\n    return OC.Source.prototype.init.apply(this, arguments);\n  },\n\n  initSerializer: function (schema, options) {\n    // See JSONAPISource\n    this.SerializerClass = options.SerializerClass || this.SerializerClass;\n    if (this.SerializerClass && this.SerializerClass.wrappedFunction) {\n      this.SerializerClass = this.SerializerClass.wrappedFunction;\n    }\n    this.serializer = new this.SerializerClass(schema);\n  },\n\n  // using JSONPatch via WebSocket\n  usePatch: true,\n\n  // Requestable interface implementation\n\n  _find: function(type, id) {\n    if (id && (typeof id === 'number' || typeof id === 'string')) {\n      return this._findOne(type, id);\n    } else {\n      return this._findQuery(type, id);\n    }\n  },\n\n  _findLink: function() {\n    throw new Error('SocketSource#_findLink not supported');\n  },\n\n  // Requestable Internals\n\n  _findOne: function (type, id) {\n    var query = this._queryFactory(type, { id: id });\n\n    return this._remoteFind('find', type, query);\n  },\n\n  _findMany: function () {\n    throw new Error('SocketSource#_findMany not supported');\n  },\n\n  _findQuery: function (type, query) {\n    query = this._queryFactory(type, query);\n\n    return this._remoteFind('findQuery', type, query);\n  },\n\n  _remoteFind: function (channel, type, query) {\n    var root = pluralize(type);\n    var id = query.id;\n    query = JSON.stringify(query);\n\n    // handle promise resolution serially, pass off return to next then handler\n    var records;\n    return new Orbit.Promise(function doFind(resolve, reject) {\n      this._socket.emit(channel, query, function didFind(raw) {\n        if (raw.errors || !raw[root]) {\n          reject(raw.errors);\n        } else {\n          resolve(raw);\n        }\n      });\n    }.bind(this))\n    .then(function doProcess(raw) {\n      return this.deserialize(type, id, raw);\n    }.bind(this))\n    .then(function (data) {\n      records = data;\n      return this.settleTransforms();\n    }.bind(this))\n    .then(function () {\n      // finally send back the records\n      return records;\n    })\n    .catch(function onError(error) {\n      console.error('SocketSource#_remoteFind Error w/ query: ' + query);\n      console.error(error);\n    });\n  },\n\n  _queryFactory: function (type, query) {\n    query = query || {};\n    query.resource = query.resource || pluralize(type);\n\n    var attrs = Ember.String.w('limit offset sortBy order resource withFields');\n    attrs.forEach(function (attr) {\n      query[attr] = query[attr] || Ember.get(this, attr);\n    }.bind(this));\n\n    return query;\n  },\n\n  // Transformable Internals\n\n  _transformAdd: function (operation) {\n    var type = operation.path[0];\n    var id = operation.path[1];\n    var remoteOp = {\n      op: 'add',\n      path: '/' + pluralize(type) + '/-',\n      value: this.serializer.serializeRecord(type, operation.value)\n    };\n    return this._remotePatch(type, id, remoteOp);\n  },\n\n  _transformReplace: function (operation) {\n    var type = operation.path[0];\n    operation.path[0] = pluralize(type);\n    var id = operation.path[1];\n    var remoteOp = {\n      op: 'replace',\n      path: '/' + operation.path.join('/'),\n      value: this.serializer.serializeRecord(type, operation.value)\n    };\n    return this._remotePatch(type, id, remoteOp);\n  },\n\n  _transformRemove: function (operation) {\n    var type = operation.path[0];\n    operation.path[0] = pluralize(type);\n    var id = operation.path[1];\n    var path = '/' + operation.path.join('/');\n    var remoteOp = { op: 'remove', path: path };\n    return this._remotePatch(type, id, remoteOp);\n  },\n\n  _transformUpdateAttribute: function (operation) {\n    var type = operation.path[0];\n    operation.path[0] = pluralize(type);\n    var id = operation.path[1];\n    var remoteOp = {\n      op: 'replace',\n      path: '/' + operation.path.join('/'), // includes attr in path\n      value: operation.value\n    };\n    return this._remotePatch(type, id, remoteOp);\n  },\n\n  _transformAddLink: function (operation) {\n    var type = operation.path[0];\n    operation.path[0] = pluralize(type);\n    var id = operation.path[1];\n    var link = operation.path[3];\n    var linkId = operation.path[4] || operation.value;\n    var linkDef = this.schema.models[type].links[link];\n    var path;\n    if (linkDef.type === 'hasMany') {\n      operation.path.pop();\n      path = '/' + operation.path.join('/').replace(/__rel/, 'links') + '/-';\n    } else if (linkDef.type === 'hasOne') {\n      path = '/' + operation.path.join('/').replace(/__rel/, 'links');\n    }\n    var remoteOp = { path: path, op: 'add', value: linkId };\n    return this._remotePatch(type, id, remoteOp);\n  },\n\n  _transformRemoveLink: function (operation) {\n    var type = operation.path[0];\n    operation.path[0] = pluralize(type);\n    var id = operation.path[1];\n    var path = '/' + operation.path.join('/').replace(/__rel/, 'links');\n    var remoteOp = { op: 'remove', path: path };\n    return this._remotePatch(type, id, remoteOp);\n  },\n\n  _transformReplaceLink: function (operation) {\n    var type = operation.path[0];\n    var id = operation.path[1];\n    //var link = operation.path[3];\n    var relId = operation.path[4] || operation.value;\n    //debugger;\n    // Convert a map of ids to an array\n    if (isObject(relId)) {\n      relId = Object.keys(relId);\n    }\n    //var linkDef = this.schema.models[type].links[link];\n    //var relType = linkDef.model;\n    //var relResourceId = this.resourceId(relType, relId);\n    //debugger;\n    var remoteOp = {\n      op: 'replace',\n      path: '/' + operation.path.join('/').replace(/__rel/, 'links'),\n      value: relId\n    };\n    return this._remotePatch(type, id, remoteOp);\n  },\n\n  _remotePatch: function (type, id, remoteOp) {\n    console.log(JSON.stringify(remoteOp));\n    var records;\n    // handle promise resolution serially, pass off return to next then handler\n    return new Orbit.Promise(function doPatch(resolve, reject) {\n      this._socket.emit('patch', JSON.stringify(remoteOp), function didPatch(raw) {\n        if (raw && raw.errors) {\n          reject(raw.errors);\n        } else {\n          resolve(raw); // doesn't matter what raw is, socket called back w/o errors\n        }\n      });\n    }.bind(this))\n    .then(function doProcess(raw) {\n      if (raw && Array.isArray(raw)) {\n        return this.deserialize(type, id, raw[0]);\n      }\n      return null;\n    }.bind(this))\n    .then(function (data) {\n      records = data;\n      return this.settleTransforms();\n    }.bind(this))\n    .then(function () {\n      // finally send back the records\n      return records;\n    })\n    .catch(function onError(error) {\n      console.error(error);\n      var e = \"SocketSource#_remotePatch Error w/ op: %@, path: %@\";\n      throw new Error(e.fmt(remoteOp.op, remoteOp.path));\n    });\n  }\n\n});\n\n// TODO use Ember.Inflector https://github.com/stefanpenner/ember-inflector.git\nvar pluralize = function (name) {\n  return name + 's';\n};\n// borrowed from 'orbit/lib/objects'\nvar isObject = function(obj) {\n  return obj !== null && typeof obj === 'object';\n};\n\nexport default SocketSource;\n```\n\n[adapters/socket-source.js]: https://github.com/pixelhandler/blog/blob/master/client/app/adapters/socket-source.js\n\n\n### Stores\n\n\"Stores extend sources and are also repositories for models. All of the data in a store is maintained in its internal source.\"\n\nBelow are a few examples of how I use the application store in a Route:\n\n* Custom query for posts\n\n```js\nmodel: function () {\n  var query = { offset: this.get('offset'), limit: this.get('limit') };\n  return this.store.find(this.get('post'), query);\n},\n```\n\n* List of posts\n\n```js\nmodel: function () {\n  return this.store.find('post');\n},\n```\n\n* A specific post by id\n\n```js\nmodel: function (params) {\n  return this.store.find(this.get('post'), params.edit_id);\n},\n```\n\n* A post route that can find a post from the store's memory or ask the secondary source (adapter) for the resource\n\n```js\nmodel: function (params) {\n  return new Ember.RSVP.Promise(function (resolve, reject) {\n    var found = this.store.filter('post', function (post) {\n      return post.get('slug') === params.post_slug;\n    });\n    if (found.get('length') > 0) {\n      resolve(found[0]);\n    } else {\n      this.store.find('post', params.post_slug).then(\n        function (post) {\n          resolve(post);\n        },\n        function (error) {\n          reject(error);\n        }\n      );\n    }\n  }.bind(this));\n},\n```\n\n#### Push Support\n\nRoutes can use a mixin for push support for real-time update to connected clients.\n\n* [mixins/push-support.js]\n\n```js\nimport Ember from 'ember';\n\nexport default Ember.Mixin.create({\n\n  beforeModel: function () {\n    this.socketSanityCheck();\n    return this._super();\n  },\n\n  socketSanityCheck: function () {\n    // Sanity check, is socket working? check output browser console.\n    var socket = this.socket;\n    socket.on('hello', function (data) {\n      console.log(data);\n      socket.emit('talk-to-me', 'I like talking.', function (msg) {\n        console.log('back talk', msg);\n      });\n    });\n  },\n\n  // Template methods...\n\n  onDidPatch: Ember.required,\n\n  patchRecord: function (operation) {\n    this._patchRecord(operation);\n  },\n\n  addLink: Ember.K,\n  replaceLink: Ember.K,\n  removeLink: Ember.K,\n  addRecord: Ember.K,\n  updateAttribute: Ember.K,\n  deleteRecord: Ember.K,\n\n  // Use in template methods...\n\n  _patchRecord: function (operation) {\n    console.log('patchRecord', operation);\n    operation = (typeof operation === 'string') ? JSON.parse(operation) : operation;\n    if (!operation.op || !operation.path) {\n      console.error('Push error! Invalid patch operation.');\n      return;\n    }\n    if (operation.path.match('/links/') !== null) {\n      if (operation.op === 'add') {\n        Ember.run.later(this, 'addLink', operation, this._delay);\n      } else if (operation.op === 'replace') {\n        Ember.run.next(this, 'replaceLink', operation);\n      } else if (operation.op === 'remove') {\n        Ember.run.next(this, 'removeLink', operation);\n      }\n    } else {\n      if (operation.op === 'add') {\n        Ember.run.next(this, 'addRecord', operation);\n      } else if (operation.op === 'replace') {\n        Ember.run.next(this, 'updateAttribute', operation);\n      } else if (operation.op === 'remove') {\n        Ember.run.next(this, 'deleteRecord', operation);\n      }\n    }\n  },\n\n  _addLink: function(operation) {\n    var model = this._retrieveModel(operation);\n    if (model) {\n      var type = operation.path.split('/links/')[1];\n      var relation = this.store.retrieve(type, { primaryId: operation.value });\n      if (relation) {\n        model.addLink(type, relation);\n      }\n    }\n  },\n\n  _replaceLink: function(operation) {\n    console.error('replaceLink not supported', operation);\n  },\n\n  _removeLink: function(operation) {\n    console.log('removeLink');\n    var model = this._retrieveModel(operation);\n    if (model) {\n      var path = operation.path.split('/links/')[1].split('/');\n      var type = path[0];\n      var id = path[1];\n      var relation = null;\n      if (id) {\n        relation = this.store.retrieve(type, { primaryId: id });\n      }\n      model.removeLink(type, relation);\n    }\n  },\n\n  _addRecord: function (operation) {\n    var type = this._extractType(operation);\n    var id = operation.value.id;\n    var model = this.store.retrieve(type, { primaryId: id });\n    if (!model) {\n      this.store.add(type, operation.value);\n      this.store.then(function() {\n        model = this.store.retrieve(type, { primaryId: id });\n        var name = this.get('routeName');\n        var collection = this.modelFor(name);\n        if (collection && !collection.contains(model)) {\n          collection.insertAt(0, model);\n          this.controllerFor(name).set('model', collection);\n        }\n      }.bind(this));\n    }\n  },\n\n  _updateAttribute: function(operation) {\n    var type = this._extractType(operation);\n    if (!type) {\n      return;\n    }\n    var typeKey = this.store.schema._schema.pluralize(type);\n    var path = operation.path.split('/' + typeKey + '/')[1];\n    var id, attribute;\n    if (path.indexOf('/') !== -1) {\n      path = path.split('/');\n      id = path[0];\n      attribute = path[1];\n    }\n    var model = this.store.retrieve(type, {primaryId: id});\n    if (model && attribute) {\n      model.set(attribute, operation.value);\n    }\n  },\n\n  _deleteRecord: function (operation) {\n    var model = this._retrieveModel(operation);\n    if (model) {\n      var name = this.get('routeName');\n      var collection = this.modelFor(name);\n      if (collection) {\n        collection.removeObject(model);\n      }\n      var controller = this.controllerFor(name);\n      if (controller) {\n        controller.removeObject(model);\n      }\n      if (model.constructor.typeKey) {\n        var type = model.constructor.typeKey;\n        var id = model.get('primaryId');\n        Ember.run.later(this.store, 'remove', type, id, this._delay);\n      }\n    }\n  },\n\n  _extractType: function (operation) {\n    var path = operation.path.split('/');\n    var type = this.store.schema._schema.singularize(path[1]);\n    if (!this.store.schema._schema.models[type]) {\n      console.error('Cannot extract type', path);\n    }\n    return type;\n  },\n\n  _retrieveModel: function (operation) {\n    var path = operation.path.split('/');\n    var type = this.store.schema._schema.singularize(path[1]);\n    var id = path[2];\n    return this.store.retrieve(type, { primaryId: id });\n  },\n\n  _delay: 1000\n\n});\n```\n\n[mixins/push-support.js]: https://github.com/pixelhandler/blog/blob/master/client/app/mixins/push-support.js\n\n\n### Routes using the push support mixin\n\n* [routes/application.js]\n\n```js\nimport Ember from 'ember';\nimport PushSupport from '../mixins/push-support';\nimport config from '../config/environment';\n\nvar ApplicationRoute = Ember.Route.extend(PushSupport, {\n\n  model: function () {\n    return this.store.find('post');\n  },\n\n  /* some code not included here */\n\n  // Push support...\n\n  onDidPatch: function () {\n    this.socket.on('didPatch', this.patchRecord.bind(this));\n  }.on('init'),\n\n  addLink: function (operation) {\n    this._addLink(operation);\n  },\n\n  removeLink: function (operation) {\n    this._removeLink(operation);\n  },\n\n  addRecord: function (operation) {\n    this._addRecord(operation);\n  },\n\n  updateAttribute: function (operation) {\n    this._updateAttribute(operation);\n  },\n\n  deleteRecord: function (operation) {\n    this._deleteRecord(operation);\n  },\n\n  /* some code not included here */\n\n});\n\nfunction lookupSocket(container) {\n  if (!window.WebSocket) {\n    return false;\n  }\n  return container.lookup('socket:main');\n}\n\n/* some code not included here */\n\nexport default ApplicationRoute;\n```\n\n[routes/application.js]: https://github.com/pixelhandler/blog/blob/master/client/app/routes/application.js\n\n\n* [routes/index.js]\n\n```js\nimport Ember from 'ember';\nimport RecordChunksMixin from '../mixins/record-chunks';\nimport ResetScroll from '../mixins/reset-scroll';\nimport PushSupport from '../mixins/push-support';\n\nexport default Ember.Route.extend(ResetScroll, RecordChunksMixin, PushSupport, {\n\n  /* some code not included here */\n\n  model: function () {\n    var posts = this.modelFor('application');\n    if (this.get('offset') < posts.get('length')) {\n      return posts;\n    } else {\n      var query = this.buildQuery();\n      return this.store.find('post', query);\n    }\n  },\n\n  // Push support...\n\n  onDidPatch: function () {\n    this.socket.on('didPatch', this.patchRecord.bind(this));\n  }.on('init'),\n\n  addRecord: function (operation) {\n    if (operation.path.split('/')[1] === 'posts') {\n      var posts = this.model();\n      var controller = this.controllerFor(this.get('routeName'));\n      if (typeof posts.then === 'function') {\n        posts.then(function (_posts) {\n          controller.set('model', _posts);\n        });\n      } else {\n        controller.set('model', posts);\n      }\n    }\n  },\n\n  deleteRecord: function (operation) {\n    if (operation.path.split('/')[1] === 'posts') {\n      this._deleteRecord(operation);\n    }\n  }\n\n  /* some code not included here */\n\n});\n```\n\n[routes/index.js]: https://github.com/pixelhandler/blog/blob/master/client/app/routes/index.js\n\n\n\n## [Socket.IO]\n\nThe push support is provided by an adapter on the server which uses [Socket.IO] and interacts directly with a document storage database.\n\n* [server/lib/socket_adapter.js]\n\n```js\n/**\n  @module app\n  @submodule socket_adapter\n\n  db adapter using Socket.io\n**/\n\nvar db = require('./rethinkdb_adapter');\nvar debug = require('debug')('socket_adapter');\nvar config = require('../config')();\n\n/**\n  Exports setup function\n\n  @param {Object} express server\n  @return {Object} `io` socket.io instance\n**/\nmodule.exports = function(server, sessionMiddleware) {\n\n  // options: https://github.com/Automattic/engine.io#methods-1\n  var options = {\n    'transports': ['websocket', 'polling'],\n    'cookie': 'connect.sid'\n  };\n\n  var io = require('socket.io')(server, options);\n\n  io.use(function(socket, next) {\n    sessionMiddleware(socket.request, socket.request.res, next);\n  });\n\n  io.on('connection', function (socket) {\n    // Simple sanity check for client to confirm socket is working\n    socket.emit('hello', { hello: 'world' });\n    socket.on('talk-to-me', function (data, cb) {\n      cb(data);\n    });\n\n    socket.on('isLoggedIn', function (callback) {\n      var user = socket.request.session.user;\n      if (!!user) { debug('isLogggedIn', user); }\n      callback(!!user);\n    });\n\n    socket.on('login', function (credentials, callback) {\n      credentials = JSON.parse(credentials);\n      if (!credentials) {\n        return callback(false);\n      }\n      var uname = credentials.username;\n      var pword = credentials.password;\n      var session = socket.request.session;\n      if (uname === config.admin.username && pword === config.admin.password) {\n        session.user = uname;\n        debug('login: %s', session.user);\n        session.save();\n        callback(true);\n      }\n    });\n\n    socket.on('logout', function (callback) {\n      socket.request.session = null;\n      callback(true);\n    });\n\n    socket.on('findQuery', findQuery);\n\n    socket.on('find', find);\n\n    socket.on('patch', function (operation, callback) {\n      if (!socket.request.session.user) {\n        debug('patch tried without user session');\n        return callback(JSON.stringify({errors: [\"Login Required\"]}));\n      }\n      var _callback = function (error, payload) {\n        if (error) {\n          debug('Patch Error!', error);\n          callback({errors: error});\n        } else {\n          payload = payload || JSON.stringify({code: 204});\n          callback(payload);\n          debug('didPatch...', operation, payload);\n          socket.broadcast.emit('didPatch', operation);\n        }\n      };\n      patch(operation, _callback);\n    });\n\n    socket.on('disconnect', function () {\n      io.emit('error', 'User disconnected');\n    });\n  });\n\n  return io;\n};\n\n/**\n  findQuery - uses query to find resources\n\n  @param {String} JSON strigified query object `resource` property is required\n  @param {Function} callback\n  @private\n**/\nfunction findQuery(query, callback) {\n  debug('findQuery...', query);\n  if (typeof query === 'string') {\n    query = JSON.parse(query);\n  }\n  var resource = query.resource;\n  delete query.resource;\n  var _cb = callback;\n  db.findQuery(resource, query, function (err, payload) {\n    if (err) {\n      debug(err);\n      payload = { errors: { code: 500, error: 'Server failure' } };\n    }\n    _cb(payload);\n  });\n}\n\n/**\n  find - uses query to find resources by id or slug\n\n  @param {String} JSON strigified query object requires `resource`, `id` properties\n  @param {Function} callback\n  @private\n**/\nfunction find(query, callback) {\n  debug('find...', query);\n  if (typeof query === 'string') {\n    query = JSON.parse(query);\n  }\n  var resource = query.resource;\n  delete query.resource;\n  var id = query.id;\n  delete query.id;\n  var _cb = callback;\n  var errorPayload = { errors: { code: 500, error: 'Server failure' } };\n  db.find(resource, id, function (err, payload) {\n    if (err) {\n      _cb(errorPayload);\n    } else {\n      if (payload[resource] !== null) {\n        _cb(payload);\n      } else {\n        db.findBySlug(resource, id, function (err, payload) {\n          if (err) {\n            _cb(errorPayload);\n          } else {\n            if (payload[resource] !== null) {\n              _cb(payload);\n            } else {\n              _cb({ errors: { code: 404, error: 'Not Found' } });\n            }\n          }\n        });\n      }\n    }\n  });\n}\n\nfunction patch(operation, callback) {\n  debug('patch...', operation);\n  if (typeof operation === 'string') {\n    operation = JSON.parse(operation);\n  }\n  var path = operation.path.split('/');\n  var type = path[1];\n  var id = path[2];\n  var prop = path[3]; // REVIEW support sub-path?\n  if (prop === 'links') {\n    var link = path[4];\n    patchLinks(type, id, link, operation, callback);\n  } else if (operation.op === 'replace') {\n    var payload = {};\n    payload[prop] = operation.value;\n    db.updateRecord(type, id, payload, callback);\n  } else if (operation.op === 'remove') {\n    db.deleteRecord(type, id, callback);\n  } if (operation.op === 'add') {\n    db.createRecord(type, operation.value, callback);\n  }\n}\n\nfunction patchLinks(type, id, linkName, operation, callback) {\n  debug('patchLinks...', type, id, linkName, operation);\n  find({resource: type, id: id}, function (record) {\n    if (!record || record && record.errors) {\n      var errors = (record) ? record.errors : [];\n      debug('Error finding resource for patchLinks action', errors);\n      callback(errors);\n    } else {\n      var path = operation.path.split(linkName);\n      path = (path) ? path[1] : null;\n      var value = operation.value;\n      var op = operation.op;\n      var payload = record[type];\n      payload.links = payload.links || {};\n      payload.links[linkName] = payload.links[linkName] || [];\n      if (op === 'add' && path.match(/\\-$/) !== null && value) {\n        payload.links[linkName].push(value);\n      } else if (value && op === 'add' || op === 'replace') {\n        payload.links[linkName] = value;\n      } else if (op === 'remove') {\n        var linkId = path.split('/');\n        if (linkId.length > 1) {\n          linkId = linkId[1];\n          var idx = payload.links[linkName].indexOf(linkId);\n          payload.links[linkName].splice(idx, 1);\n        } else {\n          payload.links[linkName] = null;\n        }\n      }\n      db.updateRecord(type, id, {links: payload.links}, callback);\n    }\n  });\n}\n\n// TODO Use Ember.Inflector or other Inflector?\nfunction singularize(name) {\n  return name.slice(0, name.length - 1);\n}\n\nfunction pluralize(name) {\n  return name + 's';\n}\n```\n\n[Socket.IO]: http://socket.io/\n[server/lib/socket_adapter.js]: https://github.com/pixelhandler/blog/blob/master/server/lib/socket_adapter.js",
  "date": "2014-08-20T07:00:00.000Z",
  "excerpt": "**UPDATE 11/16/14:** Code samples updated for Orbit.js 0.5.4, Ember-Orbit 0.4.1 and support for relations included.\n\nIn early 2014 [Dan Gebhardt] announced [Orbit.js] and I was thrilled abou the potential of connecting multiple data sources using the JSON Patch format to an [Ember.js] application. So, I made an attempt to use Orbit.js to create a Socket Source to use with this site, see the [blog repository]. After building a proof of concept with my blog app, I gave a presentation with a demo, see my [Ember SC talk]. There was quite a bit of interest in using smaller and more precise payloads when speaking JSON between server and browser applications.\n\nMost often developers build an application utilizing REST and on occasion we may build with WebSockets, so the concept is appealing. Adding push support to a single page application (SPA) can provide real-time data synchronization for mulitiple clients, why use both REST and WebSockets? Most modern browser's now support WebSockets, [RFC 6455], and this site's target audience uses modern browsers it seemed right to experiment with the code base for this application.\n\n[Dan Gebhardt]: https://twitter.com/dgeb\n[Ember.js]: http://emberjs.com/\n[Ember Orbit]: https://github.com/orbitjs/ember-orbit\n[Orbit.js]: https://github.com/orbitjs/orbit.js\n[blog repository]: https://github.com/pixelhandler/blog\n[Ember SC talk]: https://gist.github.com/pixelhandler/5389c72c82d26fae8fb1\n[Wicked Good Ember]: http://wickedgoodember.com/dan-gebhardt\n[RFC 6455]: http://tools.ietf.org/html/rfc6455\n[JSON API]: http://jsonapi.org/\n[patch support]: http://jsonapi.org/format/#patch",
  "id": "c5d13fd7-5614-4531-a1da-4fa0855fdcc8",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "real-time-data-for-an-emberjs-application-using-websockets",
  "title": "Real-time Data for an Ember.js Application using WebSockets"
},
{
  "body": "I may have missed a few segments of the presentations or been distracted during a few talks so I apologize in advance to the speakers if I have not included notes from your talks in this article. I can honestly say that I did find value in every presentation. (That has not always been the case when I've attended a conference.) The headings I use in this article may not match the speakers presentation titles. This article captures what I learned from the conference so I've taken liberty to create new headings and combine common topics; besides \"Keynote\" as a heading lacks context ;)\n\n## Speed, Efficiency, Productivity...\n\nThe take away is that by adopting the conventions of the Ember.js framework a developer gets \"Speed, Efficiency, Productivity...\" by default.\n\n_Flows are just as important as screens_. With Ember you control (users') flow through your Web application using the `Router`. The routing features that Ember provides are more than just URLs. This was proven by more that one presentation on the topic of routing. There was a very impressive presentation later on [fnd.io](https://fnd.io) which used every model known by the application to route any type of object that a search application could identify. And another presentation that injected additional logic to manage transitions between complex states in a banking like Web application.\n\n\"Get rid of sinkholes, use commonality\" Routing provides strong defaults in how to organize flow and state in a true Web application.\n\nMy experience with the router has been that once I grok how to use it the next time I start an application the productivity is noticeable and satisfying. The same can be said of other conventions that Ember.js provides. The concepts in the router are simple and complex at the same time; but the net take away is that using this common way of managing flow and state yields productivity. There is a reward for investing time in learning and using the conventions of routing for a browser application. \n\n## Frameworks are Designed to Nudge You in the Right Direction\n\nThe Vine app for sharing videos is built with Ember and it turns out that using many many videos on a page can be a bit of a challenge in a Web application; especially for creating a snappy user experience. Data visualization can be a complex chore for a team with varying strengths. Ember `Component` can be used to encapsulate complexity of using a 3rd party library like D3 for pretty data on screen. Application code can be built with more than one recipe to deliver a different experience by only changing the dependency for a router file.\n\nI find that once I get the concepts of using components to isolate behavior and reuse it in various contexts that is a very powerful and valuable convention. And Web components are in the not so far off future already. \n\n_Welcome to the future :)_ (Not really.) But I do think that using Ember components is a peek into what will likely be a shared way build reusable components on the Web in general.\n\n## Contributing\n\nThe contributing presentation provided great details on how to get involved and help the community. The TL;DR summary is do try to make it easy for the core team to help you help the community.\n\nIt would be a good idea to subscribe to the security email list. Also you can enable feature flags in the beta/release channels of Ember but DON'T DO IT. The fixes to bugs found in new features will not be patched onto those release channels. It's best to use Canary to try and contribute to new features or bugs.\n\nI think this talk exposed a common and priceless value of the Ember community in general... there is a huge value that is given by the core team members as well as those who decide to contribute and any level. This value is sacrificial and comes at a very high price, the time belonging to loved ones. I would conclude that there is a genuine passion for the project itself as well as the people who use the project's codebases.\n\nThe fast track to helping with the community is an attitude of others first. Adopting the conventions on how to commit code for a feature or a bug makes peoples lives better.\n\n## Love Trolls\n\nTrolling is common on the interwebs, love trolling not as much. Well, unless you're at EmberConf.\n\nThe phase \"Just Stop\" is all it takes to find common ground between such a wide variety of world views within the development community.\n\nI think this expression represents a care for humans in general, like... \"Hey my friend, please don't make a fool of yourself\" or, \"Hey I just need you to know I'm not ok with that, can we move on to common ground\". \n\nJust as we are capable of introducing bugs to a codebase, we are all capable of hurting others. More important than an awesome framework are awesome people who aren't left out. \n\nThis idea rises above political correctness and just puts others before self; a valuable ethic for any community. And, it's found in the Ember community.\n\n## Data Persistence\n\n### ...A Hard Problem\n\n* Data Transformation\n* Asynchrony\n* Caching\n* Locality\n* Relationships\n\nThe above are the objectives that Ember Data achieves to solve for Web applications. However it's not as easy as one would expect. When all the above happen together, there be dragons. \n\nThe premise of the Ember Data project are...\n\n1. Easy problems should be locked down less often (give developers more flexibility)\n2. Lock down API for hard problem\n\n### ...You're Building A Distributed Computing System\n\nWe received a lecture on math theory related to distributed computing systems. There is a trade-off between availability and consistency. Safety (always right) or liveness (eventually there), how would you like your data? A good goal is to build weak consistency with higher availability. Something to consider is that once you send data to a client it immediately becomes a cache of that data (and most likely to become stale quickly).\n\nI forgot how much I enjoy mathematics and theory, it was refreshing to think about the client-server data caching problem from this perspective. A server-based data driven application should know how to manage the data cache sent to it's clients, or perhaps a client application should know it's contract for the data it receives. One thing I'd like to work on is using sockets to manage multiple data stores (caches): perhaps a memory store, a local store (disc) and a remote store communicating with clients via Web sockets.\n\n## Tooling: Build Your App with Broccoli\n\nRemember those little veggie trees? Your application's modules (files) live in trees (folders), the broccoli build library only knows about trees, `read`, `read`, and `cleanup`. The API is small leaving room for adding specific sets of functionality by writing plugins. You can have many plugins and build targets as well as a `mergeTrees` method to package up your application.\n\nBroccoli is for working with files in your repository it's not a task runner. Integration within your tool set can be achieved as you choose, perhaps a grunt task kick off the build.\n\nThe benefit of using `broccoli` to build your application is... only files with a change in last modified date are re-processed so the result a super speedy build with each change; even when you have a large set of files (modules) composing your application.\n\nBroccoli is the newest choice of tooling for generating a build for a JavaScript application. And its likely the fastest too. What a considerable contribution to the Ember community. I am looking forward to a speed boost in my development cycles.\n\n## Animation and Transitions, Janky Not Allowed\n\nWhy animate? Just because developers understand crazy abstractions, not everyone is \"freakish like that\". Providing some direction to flow by animating a change gives users a sense of where they are navigating to and how to go back to where they've been. If every link just immediately appeared users would have a limited sense of what the application's flow is. As users transition between screens or even parts of a screen, animation provides some directional context that makes the application feel more natural.\n\nUsing Ember there are two types of animations. One is a simple animation within a single route, done with CSS (based on class attributes that belong to a component on the screen). The second is a complex animation between route transitions.\n\nTo avoid jankiness in an Ember application it is a good idea to silence browser events so that your application is not listening or responding to irrelevant event handlers. One solution is to add back in needed event handlers by wrapping the code needing the events with a component which does listen for the event. A couple concepts to hook into so wrangle complex animations are using `willTransition` and also named outlets. For thinks like a modal using `query-params-new` allows you to bypass router and reuse the same modal anywhere.\n\n## Angular's Transclusion is not a Misnomer\n\nTransclusion is the inclusion of one thing into something else. It's like using an Ember.Component instance with `yield`. I think the goal of using a directive with transclusion is to encapsulate HTML, CSS and JavaScript, to roll your own reusable widgets. Perhaps a dependent select box is a good example of a Web Component that would utilize Angular directives and transclusion; alternatively, an Ember.Component would be used for the same.\n\nI'm not sure that I really know why there was a Talk on Angular other than to call out that in some cases we are working on common solutions in both development communities; however the techniques and naming may be quite different to achieve the same goal. I did like how the speaker tackled a couple topics which those in the Ember community have poked fun at perhaps at the expense of those in the Angular community. At the end of the day we're all JavaScript developers.\n\nI think that the speaker on the Angular topic was quite brave to take on this topic for a decidedly \"Ember\" audience. For me the take away is that there are different strokes for different folks; and that's just fine; perhaps we'll learn something from each other of find some common ground in an area like Web components.\n\n## Doing Better with Available API's Using Ember.js\n\nSearching the iTunes Music Store and App store can be at times not so great of an experience, especially on the Web. Apple's  API's to query media types make a good source to build an application built without a backend, and perhaps do a better job on the Web than Apple has done. [Fnd.io](http://fnd.io) is the example that takes on Apple's search experience on the Web platform head on. \n\nA talk was presented on how to model iTunes Media using Mixins and Ember Data. Using composition to model various data types found in the stores' API gave some flexibility to identify types from an API where it's not always clear what things actually are typed as. The fnd.io site focuses on product search rather than document search.\n\nThe value Ember provided was beautiful URLs with a fast product search tool that rivals any experience searching for iTunes and App store products on the web.\n\n\"Tapas with Ember\" (Brunch recipe) may have been a result of this project which uses Brunch for a build tool.\n\n## 2X-3X Performance Boost Coming Soon: HTMLBars\n\nThe project is still in an alpha stage; though it was not possible to release an alpha version for EmberConf2014 serious effort was made to do so. The promise is 2X-3X times speed gains once HTMLBars ships. I'm looking forward to kissing metamorphs good-bye and saying hello to \"fast\" with HTMLBars.\n\nSome of the differences in HTMLBars are:\n\n* Unlike Handlebars HTMLBars understands your markup\n* Builds DOM fragments instead of Strings\n* No more `script` tags (MetaMorphs)\n* Large lists are much more performance, as the source uses `clone`\n* Binding update order\n* Stop recursion / Limits re-render (anti-pattern)\n* Simplicity in the markup, removes the need for helpers like `bind-attr`\n\nUltimately the goal of HTMLBars is to step into a simpler primitive.\n\nI could tell that the team working on the project was a bit spent and also sensed that a significant sacrifice of personal time has been invested in toward increased performance for the Ember community. Thanks for the hard work guys; and thanks to your loved ones for leasing you to the Ember community for this project.\n\n## Reusable Views: Components\n\nA couple questions to ask when considering to create a component are:\n\n* Does it have behavior?\n* Does it need to use a specific class or action?\n\nGood examples are `form` with `input type=submit`; and `select` with `option`. The behavior of a form change when there is a submit input element.\n\nSome advice given regarding building with Ember:\n\n* Don't build large components with big templates\n* Do use composite components; lean on using no templates\n* Test and develop with dynamic data\n* Build native Ember components rather then using Bootstrap\n* Child components should inform parent they exist to change behavior, `willInsertElement` is a good hook to use\n\n`ic-tabs` and `ic-menu` component micro-libraries were demonstrated. I good goal for an architect of an application is to measure success by the frequency that your team asks how to use the apis provided to the application developers. Using components to abstract complexity and provide consistency may reduce the amount of support needed. Also using method names that define the action and combining the `.on('eventName')` extension to the method helps communicate the how and why of the methods contained in your components. Thank you [Instructure](https://github.com/instructure) team, for contributing these components to the Ember community.\n\n## Ember AppKit Gives Birth to Ember CLI\n\n`ember-cli` is the child project conceived by the bleeding edge work done on Ember App Kit (EAK). While creating new tooling for Ember projects, the EAK project tackled various problems and paved the way to abstract many solutions. Using Ember App Kit allows developers to ship real stuff and also experiment with solutions at the same time. It's my opinion that good things come from real apps. So, thank you to those to felt comfortable living on the bleeding edge, your pains have born `ember-cli`.\n\nSome of the byproducts of the EAK project are:\n\n1. *Problem*: Coupling / *Solution*: Inversion of control, `resolver` knows/finds in `container`\n1. *Problem*: Assemble Source / *Solution*: Build Tooling\n1. *Problem*: Upgrade nightmares / *Solution*: Better abstractions, hide nearly all the complexity\n1. *Problem*: Copious bugs / *Solution*: Thorough test suite\n1. *Problem*: Build Stability / Solution: Tool choice, build pipeline with Broccoli\n\n_\"When a problem comes along you must whip it\"_ - My perception of EAK's theme\n\n`ember-cli` is the single place to focus using the solutions above. You can help too! A call to action was echoed from the podium, \"we need a good story for fingerprinting\". (Perhaps using md5 hash in asset filenames and updating links to assets using the same hash.) This is not a new problem but needs a good story for JavaScript applications.\n\nPerhaps the most noticeable result of EAK was the adoption of using es6 modules in Ember applications today. (Welcome to the future.)\n\n## Give Back, You Can Make a Difference\n\nYou can teach a web development class as long as your students can type. DeVaris Brown did just that, and proved that it's possible to teach 16 to 19 year old kids Web development. His story was amazing, heartfelt and received with many cheers and tears alike. As developers we have a highly valuable skill and DeVaris has carved out curriculum for teaching the basic building blocks of Web development to kids. Sounds like madness no? Well for Devaris there were more than a few magical moments. He said that the kids \"liked the magic of the Ember.js framework\". This was caught after kids asked if there was another way beside copy and paste to create Web pages. Aha, you can build dynamic web pages with Ember.js; magic right! It appears so.\n\nWhat Devaris strived to do was make a difference for underprivileged kids using what he knows. He learning that the basic requirement for accepting students is the ability to type; he discovered that people can do good in their communities. The kids worked on a project to support connecting people, foodbanks, and food providers; how awesome that is!\n\nImagine explaining the DOM to kids and teaching HTML, CSS, and JavaScript basics. Devaris committed to sharing his curriculum (a collection of Markdown files) on github. He also mentioned that he found [typing.io](http://typing.io) to be a good tool to help with the typing challenges, \"kids only use a few characters while texting\".\n\nI was very impressed with how Devaris hung in there until that **aha** moment when the kids caught it; Devaris was like \"Thank you Jesus!\" and we all were clapping and crying. Nice work Devaris, you made a difference and inspired others to do the same.\n\n## Who Owns Query Params, Router or Controller?\n\nMr. Router thought that the `Router` should own query params, yet there was a convincing case for the `Controller` to manage these variables. `query-params-new` has a controller-centric API.\n\nThere is a problem to solve, controller property stickiness, perhaps a new primitive \"model dependent state\" may be the resolution. This concept (vaporware at this point in time) would scope controller state to a model instance. The issue of controller stickiness is not unique to query-params.\n\nMy take away is that things that seem simple can become hard; and until a feature becomes stable it remains behind a feature flag like `query-params-new`.\n\n## Ember.js Testing is Not Hard, It's Unknown\n\nThe `ember-qunit` project has a great concept that makes testing an Ember application much easier that is has been in the past. The `resolver` is used to pluck out the subject of the test into an new container which sets up a sandbox for unit testing.\n\nEmber's testing backstory (the happy path using QUnit) was presented with funny slides. It's been a year since we've had the `ember-testing` package, and there has been additional helpers added to the project as well.\n\nIntegration testing is fairy straight forward and now with `ember-qunit` unit testing has an improved story. To setup and insert the test helpers call `setupForTesting()` and `injectTestHelpers()` on your application namespace. The (global) helpers are `visit`, `click`, `fillIn`, `find`, `findWithAssert`, `keyEvent`, `andThen`; the newest are: `triggerEvent`, `currentRouteName`. See the API docs for more info on using the helpers.\n\nPerhaps the best way to get started with reading example tests:\n\n* [jsbin.com/suteg](http://jsbin.com/suteg/7/edit?html,js,output)\n* [jsbin.com/cahuc](http://jsbin.com/cahuc/1/edit?html,js,output)\n* [jsbin.com/qifon](http://jsbin.com/qifon/5/edit?html,js,output)\n* [jsbin.com/numof](http://jsbin.com/numof/9/edit?html,js,output)\n* [jsbin.com/witut](http://jsbin.com/witut/7/edit?html,js,output)\n* [jsbin.com/kilej](http://jsbin.com/kilej/3/edit?html,js,output)\n\nAnd also, don't forget to checkout the new guide in progress:\n\n* [Initial PR for ember testing guide redux](https://github.com/emberjs/website/pull/1401)\n\nI had taken a stab a writing a testing guide awhile back, [website/pull/610](https://github.com/emberjs/website/pull/610/files), which I closed out as the testing story was still a bit painful and we really needed something like `ember-qunit` to evolve and simplify isolating tests.\n\nThanks to everyone involved in helping the Ember testing story evolve from painful to simple; I'm looking forward to an awesome testing guide.\n\n## Controlling Flow in the Router\n\nTraversing routes to enforce a specific flow event with optional flows can be achieved. The example presented was a login flow to a backing application with various options that depend on the user's choices made while stepping through this flow.\n\nWhen designing flows, start by a) listing every single permutation, b) inventory all routes, c) list linear paths, d) contain state modification on nodes, by describing state on each node;  finally e) traverse backwards (back button). The route's `replaceWith` method is well suited for using custom flow.\n\nThe project presented is [ember-flows](https://github.com/nathanhammond/ember-flows); which is a great example of extending functionality by injecting an object into your application container.\n\nThe object used in to define flow strategy has properties for `from` (route path), `to` (route path), `weight` (number), and `conditions` (Array). And the hook used to enforce the flow is `beforeModel` like so `this.get('flow').check();`. The flow object injected into the application can make a choice about when to change paths in the router using `replaceWith`. Well hopefully I grokked it correctly see the `ember-flows` project if you'd like the details.\n\nAgain I's great to know that there are solutions that are essentially plugin-able to being shared that are based on solutions to complex problems.\n\n## Snappy Performance Makes Users Happy\n\nHow fast is fast?\n\n* 16ms : 60 fps is **Fast**\n* 300ms: is **Snappy**\n* 1s+ is like I'm **waiting**\n* 10s+ is bad, you just **lost a visitor**\n\nWhen working with Ember applications remember that the Ember part is a subset of the code that affects Web performance (page speed). A good goal is to provide a snappy response which is under 1 second; about 300 milliseconds. When measuring page speed, the visual performance, how a visitor perceives responsiveness should be considered as well. Recording a video of the page load and marking when the page looks ready is an indicator that should be weighted along other speed measurements like first load time, document ready, etc.\n\nMethodology\n\n1. Gather Facts\n1. Analyze and Theorize\n1. Change a Single Thing\n1. Confirm your Theory\n\nAlso when testing it's a good idea to disable browser extensions. \"Browser Networking\" is a book we should all own and reference. Getting familiar with the browser's development tools for performance is what is needed to analyze and test performance optimizations. The flame chart in a render snapshot can expose problematic cycles of re-rendering and performance sinkholes. Also property change notifications can affect performance. Instead of looping over a collection and inserting or setting properties during each iteration, look for ways to complete enumerations then make an assignment of a collection to an object property.\n\nI think it was mentioned that there should be a book on this topic coming soon. See the speakers post on the talk here: [Performance in Ember Apps](http://madhatted.com/2014/3/28/via-emberconf-performance-in-ember-apps)\n\n## Evolution: The Extensible Web\n\nOpen source is awesome! Remember when Netscape pushed it's source code to the Web. That was a Revolution. The JavaScript development lifecycle is still evolving. \n\n* Focus: don't re-invent the universe\n* Consistency: keep unified development model\n* Adoption: gradual adoption with polyfills, compilers\n\nOne example of evolution is the use of `\"use strict\";` developers can opt-in. But we know opt-out is better, so ES6 modules are strict by default.\n\nThe cycle of evolution is: a) study the text then b) interpret the text, next a) study the text, and b) interpret the text. Repeat A then B until the delta between the two (study/interpret) becomes small enough to ship. As developers we like to move fast and break things. The loop we work in is: build, ship, evaluate, repeat while it's all good. When talking about standards we need to add a step, \"don't break the web\". So the cycle becomes: build, ship, evaluate, oh, don't break the web then repeat while everything is still good.\n\nThe aim of [the Extensible Web](http://extensiblewebmanifesto.org) is to tighten the feedback loop between the editors of web standards and web developers. It's critical for developers to be involved with browser vendors during this cycle. That's why we try new thinks and sometimes there's some breakage until those deltas become closer.\n\nThe key story of The Extensible Web is:\n\n* Add missing primitives\n* Enable userland polyfills & compilers\n* Work together to design the future\n\nOne think I noticed about the Ember community was the adoption of ES6 modules. I've seen some breakage in Ember Canary while this shift has been happening. It actually bothered me a bit I was thinking aren't there bigger fish to fry, like data persistence? After this talk I see how these minor growing pains do contribute to the development community as a whole. We've been hungry for modules and they've just about landed in browserland for new we're using a transpiler to AMD but this exercise not only shows browser vendors the value of modules it gives us a chance to put the concepts into flight as the standard is adopted.\n\n## Just Stop\n\nThis topic was introduced at the onset of the conference; and I did already touch on it once; I'd like to emphasize the importance of the community. The core team of the Ember community came to an agreement about what rules we should adopt as a development community. \n\nIn practice... if someone says something that offends you, do speak up for yourself by saying \"Just stop.\" Likewise, if a friend says something that you think might offend another friend, we're all friends by the way, in case you didn't know, speak up for your friend by saying \"Just stop.\"\n\n*Simple isn't it.*\n\nRules were made to be broken right, well we're all human and I think that is the point. We are all capable of saying something we might regret so when we adopt to play by this rule we can help our community flourish and also benefit from the results of a thriving development community that is basically re-inventing the Web platform.\n\nWhether you are a religious Jew, someone who doesn't drink, are born of a minority race, or you belong to any facet that composes a diverse community of people having a varying (even conflicting) set of world views; you can show respect toward others, so can I. *I really like this concept of thinking about others first.* I think that this idea is already engrained within the Ember community. Just think about how much sacrifice has already been poured into the framework that we use; and together iterate and improve upon.\n\n## Post Hoc (After the Buzz Settles)\n\nThe Ember community is more than a group of people working on a framework; the community is composed of professionals, hackers, entire families (contributors are leased by their loved ones to the community). We're not born of the same country, same blood or race, not in the same timezone; nor do we have the same native language. But we all write code for the Web platform. We have a common goal to make the Web a better platform and we use Ember.js to do it.\n\n**Ciao, my extended Ember family, talk to you on IRC.** Please do comment on this post if you'd like to share your thoughts.\n\n### Links\n\nThanks to [Ember Weekly Issue 51](http://us4.campaign-archive1.com/?u=ac25c8565ec37f9299ac75ca0&id=3901835468&e=bc026993ad) for collecting the buzz on EmberConf 2014...\n\n**Other EmberConf 2014 Notes/Summaries**\n\n* [EmberConf picks up where the Rails community left off](http://reefpoints.dockyard.com/2014/03/17/emberconf-picks-ups-where-the-rails-community-left-off.html)\n* [EmberConf Notes (markdown), Kurt MacDonald](https://github.com/zurt/notes/blob/master/EmberConf-2014.markdown)\n* [EmberConf Notes (sketched), Michael Chan](http://chantastic.io/emberconf2014/)\n* [EmberConf Notes (blog), Allison Sheren](http://allisonsherenmcmillan.blogspot.ca/search/label/emberconf%202014)\n* [EmberConf 2014, Herman Radtke](http://hermanradtke.com/2014/03/27/emberconf-2014.html)\n* [EmberConf Wrap Up by Justin Ball](http://www.justinball.com/2014/03/27/ember-conf-2014-wrap-up/)\n\n**[EmberConf 2014](http://emberconf.com/schedule.html) Presentations**\n\n**Day 1**\n\n* [EmberConf 2014 Keynote - Tom Dale & Yehuda Katz](https://speakerdeck.com/tomdale/emberconf-2014-keynote)\n* [Using Ember to Make the Seemingly Impossible Easy - Heyjin Kim & Andre Malan](https://speakerdeck.com/simplereach/using-ember-to-make-the-seemingly-impossible-easy)\n* [Contributing to Ember: The Inside Scoop - Robert Jackson](https://speakerdeck.com/rwjblue/contributing-to-ember)\n* [Ember Data and the Way Forward - Igor Terzic](http://terzicigor.com/talks/index.html#/)\n* [No more grunt watch: Modern build workflows with Broccoli - Jo Liss](http://www.slideshare.net/jo_liss/broccoli-32911567)\n* [Animations and Transitions in an Ember App - Edward Faulkner](http://ef4.github.io/ember-animation-demo/#/title-slide)\n* [Ember Components Transclude My Directives - John K. Paul](http://johnkpaul.github.io/presentations/emberconf/components-transclude-directives/)\n* [Modeling the App Store and iTunes with Ember Data - Jeremy Mack](http://emberconf.com/images/slides/2014_jmack.pdf)\n* [HTMLBars: The Next-Generation of Templating in Ember.js - Erik Bryn & Kris Selden](http://talks.erikbryn.com/htmlbars-emberconf/)\n\n**Day 2**\n\n* [The {{x-foo}} in You - Ryan Florence](https://github.com/rpflorence/talk-emberconf-2014)\n* [Ember CLI - Stef Penner](http://static.iamstef.net/ember_conf_2014.pdf)\n* [Ember is for the Children - DeVaris Brown](https://speakerdeck.com/devarispbrown/ember-is-for-the-children)\n* [Mr. Router embraces the Controller - Alex Matchneer](https://speakerdeck.com/machty/emberconf-2014-mr-router-embraces-the-controller-alex-matchneer)\n* [Convergent/Divergent - Christopher Meiklejohn](https://speakerdeck.com/cmeiklejohn/divergent)\n* [The Unofficial, Official Ember Testing Guide - Eric Berry](https://speakerdeck.com/coderberry/the-unofficial-official-ember-testing-guide)\n* [Controlling Route Traversal with Flows - Nathan Hammond](https://www.dropbox.com/s/02peoxevqwjz1bu/Controlling%20Route%20Traversal.pdf)\n* [Snappy Means Happy: Performance in Ember Apps - Matthew Beale](http://madhatted.com/2014/3/28/via-emberconf-performance-in-ember-apps)\n\n\n",
  "date": "2014-03-30T07:00:00.000Z",
  "excerpt": "I missed EmberCamp last year, but am very fortunate to have attended EmberConf 2014 this year. Not only did I gain profitable knowledge about a framework for the Web platform; but also, I gained a connection with the community that is more than a group of developers writing code for the Web. My experience at the conference showed me how the Ember.js community genuinely shares an equal passion for the people who develop applications with Ember.js and for the framework itself. Below you will find my conference notes combined with the underlying story behind the Ember development community itself...",
  "id": "341207e0-cfd9-4d3a-a5ab-d2268ab2e472",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "we-are-emberconf-2014",
  "title": "We are EmberConf 2014"
},
{
  "body": "* Entire application stack is tested with the integration tests\n* The database seed files can be used on the client to confirm rendered templates\n  have the expected data\n* Since no data is mocked only one set of JSON is maintained with tests, could be\n  actual production data\n* [Ember Test] helpers are promise driven and work well with [QUnit]\n* The testing suites and application code are written in the same language, in my case\n  the API is also written in JavaScript\n* The tests are executed with the built files, which boosts confidence in shipping\n  code to production\n* Async issues that come up in testing are most likely real bugs, missed in manual\n  browser testing\n* Automated test suite runs wickedly fast compared to other testing solutions like\n  Selenium (Capybara)\n\n## Screencast: Walkthrough of blog code repository and testing suites\n\nThis video runs about 20 minutes and covers the Ember.js blog application this\nwebsite is built with, [pixelhandler/blog]. Basically it's a walkthrough of my\nintegration tests for this blog. The content may be a bit rough, I was a bit tired :)\n\n<video poster=\"http://s3.amazonaws.com/cdn.pixelhandler.com/uploads/blog-app-integration-tests.png\" width=\"640\" height=\"400\" controls>\n  <source src=\"http://s3.amazonaws.com/cdn.pixelhandler.com/uploads/blog-app-integration-tests.mp4\" type='video/mp4' />\n</video>\n\n* [Video File](http://s3.amazonaws.com/cdn.pixelhandler.com/uploads/blog-app-integration-tests.mp4)\n\n## My Testing Strategy\n\nFor this application I had to take a leap of faith in the testing suites of the\nlibraries I chose to use. My main concern was that the components and features\nof the libraries can work together. So, I didn't write any unit tests as I'm\nmostly using the libary code as it was designed to be used.\n\nWhen tests break there may not be a direct relation between the broken tests and\na specific javascript module, but instead the failing test is an indicator of a\nbroken feature. So I wrote broken acceptance (feature) tests first as often as I\nwas able to. Then wrote the code to pass the acceptance test.\n\nHackers don't mock (if thay can avoid it), since the application is speaking JSON\nover HTTP... I chose a database that also speaks JSON, RethinkDB. Rethink can\nimport/export in JSON docs, which comes in handy to create a database seed script\nthat can be used on the client and the server testing suites.\n\n## Links\n\n* [Source code for the blog application][pixelhandler/blog]\n* [Express], build with [node.js]\n* [RethinkDB]\n* [Ember.js], client testing with [QUnit] and [Ember Test] integration test helpers\n* [Brunch]\n* [ember-cli]\n* API testing: [mocha], [supertest], [superagent]\n\n[pixelhandler/blog]: https://github.com/pixelhandler/blog\n[node.js]: http://nodejs.org\n[Express]: http://expressjs.com\n[RethinkDB]: http://www.rethinkdb.com\n[Ember.js]: http://emberjs.com\n[Brunch]: http://brunch.io\n[mocha]: http://visionmedia.github.io/mocha/\n[supertest]: https://github.com/visionmedia/supertest\n[superagent]: https://github.com/visionmedia/superagent\n[QUnit]: https://qunitjs.com\n[Ember Test]: http://emberjs.com/guides/testing/integration/\n[ember-cli]: http://ember-cli.com\n\n## UPDATE 6/21/14\n\nI've switched from using [Brunch] to using [ember-cli] so the demo in the video is not up to date with how I use the blog repository with [ember-cli]. The Makefile uses the `ember` command for builds, and launching dev server.",
  "date": "2014-03-13T07:00:00.000Z",
  "excerpt": "In preparation for an application I voluteered to build, I rebuilt my blog with\n[Ember.js] and [Express].  I used test-driven development (TDD) most of the time.\nMy goal was to focus on end-to-end (integration) testing for the entire\napplication stack. I did write request / response tests using [mocha] to work\nout the API layer for the application (built w/ [Express] and [RethinkDB])\n\nA few of the strengths resulting from this testing strategy...\n\n[Express]: http://expressjs.com\n[RethinkDB]: http://www.rethinkdb.com\n[Ember.js]: http://emberjs.com\n[mocha]: http://visionmedia.github.io/mocha/",
  "id": "7e163fe2-21fb-4cf9-9764-d3df2001fff5",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "end-to-end-javascript-testing-integration-tests-using-emberjs-test-helpers",
  "title": "End-to-end Javascript Testing: Integration Tests Using Ember.js Test Helpers"
},
{
  "body": "I always like to have a personal project to experiment with new technologies and also to\nsharpen my skills as a software developer. I felt it was time to build a site using \n[Node.js][node.js], so I used [Express] to communicate JSON to the client application.\nI chose [RethinkDB] as it stores data in JSON docs, and I can backup the data in JSON too. Finally for the client application I chose [Ember.js]; I've been using Ember for about a\nyear and dig building JavaScript applications with the libraries Ember provides.\n\nI still host the client application with Amazon S3, but needed to add an API server. I have\na friend that is very happly with [DigitalOcean] so I figured it was time to try them out.\nBut first I had to build something.\n\nI started off with tooling I found useful for writing a library of extensions for Ember Data.\nFor build tools I used [Brunch] and wrote a few shell scripts in Bash and Node. I begin by\nSetting up api endpoints for the blog posts and writing an adapter for RethinkDB. I wrote (request) tests with [mocha], using [supertest] / [superagent]. Feeling very confident that\nthe API was doing it's CRUD work I moved on to the client application.\n\nFor testing the client app I used [QUnit] with integration test helpers from the [Ember Test]\npackage that is included with Ember.js. Rather than mock the data, I figured hackers don't\nmock; so I went ahead with actual full stack integration testing. I wrote some JSON and a\nshell script to seed the database. Eventually I used that same module of JSON docs on both the client and server test suites to assert/expect that the desired functionality with the\ndata was achieved. With the tests passing for the API writing (request) driven integration\ntests for the client worked out smoothly using the Ember test helpers. \n\nAfter a few iterations on the client and server It was great to execute the automated tests\nand know what broke and what needed rework. I choose not to focus on writing unit tests as\nthis is a blog app and I'm mostly using the objects that Ember provides. Both Express and\nEmber.js have good test coverage for the APIs the libraries support. (At least I think so.)\n\nI have to say that I was very pleased with the choices of libaries, frameworks for this\nproject; as well as being very happy with the hosting choices as well. DigitalOcean had\ngreat how-to articles for using Ubuntu, the IRC chat rooms for RethinkDB, Ember.js are\nvery helpful. It was a nice surprise that with RethinkDB I could dump JSON right out of the\ndatabase.\n\nHere are links to the repositories I used to build this blog site:\n\n* [ember-app-builder] - my tooling setup\n* [pixelhandler/blog] - the client / server application code, and testing suites\n\nA few things may be **broken** until I finish the migration to the new system:\n\n* Previous links need to be redirected to the new routes\n* The site may never work in IE (just kidding, but I haven't tested it yet)\n\n[ember-app-builder]: https://github.com/pixelhandler/ember-app-builder\n[pixelhandler/blog]: https://github.com/pixelhandler/blog\n[node.js]: http://nodejs.org\n[Express]: http://expressjs.com\n[RethinkDB]: http://www.rethinkdb.com\n[Ember.js]: http://emberjs.com\n[DigitalOcean]: https://digitalocean.com\n[Brunch]: http://brunch.io\n[mocha]: http://visionmedia.github.io/mocha/\n[supertest]: https://github.com/visionmedia/supertest\n[superagent]: https://github.com/visionmedia/superagent\n[QUnit]: https://qunitjs.com\n[Ember Test]: http://emberjs.com/guides/testing/integration/",
  "date": "2014-03-02T08:00:00.000Z",
  "excerpt": "For the past few weeks I worked on tooling for developing Web applications, written with\nJavaScript, on both the client and the server apps. In addition to using one language \nfor developing the blog application I also wanted to try out CSS3 features like flexbox\nfor layout.\n\nSome of the topics that are important to me include: \n\n* Simplistic 'blog' layout, based on the [Holy Grail Layout]\n* Edit post content using Markdown syntax\n* Admin login to create / edit posts with preview, and delete\n* Layout to fit device well, targeting iPhone, iPad and desktop\n* Load data in chunks, using show more link\n* Use slugs as post id's on client but persist w/ unique ids on server\n* Separate applications for client and server\n* A simple API for managing blog posts persisted in JSON docs\n* End-to-end integtation testing also in JavaScript\n* Using libraries and frameworks that make me happy\n* Simple hosting and deployment\n* Flexibilty to plugin / build whatever I choose in the future\n\nHere is a short summary of my transition from using a blog built with a site generator, \nto building a blog application from the ground up...\n\n[Holy Grail Layout]: http://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/",
  "id": "327fc99b-f471-497c-9bfd-50c43110d309",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "refreshed-my-blog-with-express-and-emberjs",
  "title": "Refreshed my Blog with Express and Ember.js"
},
{
  "body": "## Setup Back-end\n\n1)  Create the api application with rails\n\n\n    rails new journal -d postgresql\n    cd journal\n\n\n2)  Create a migration for `Entry`\n\n\n    rails g migration create_entries name:string\n\n...\n\n    class CreateEntries < ActiveRecord::Migration\n      def change\n        create_table :entries do |t|\n          t.string :name\n        end\n      end\n    end\n    \n\n3)  Configure db\n\n\n    rake db:create\n    rake db:migrate\n\n\n4)  Create a model\n\nIn app/models/entry.rb\n\n\n    class Entry < ActiveRecord::Base\n    end\n\n\n5)  Add a record\n\n\n    rails console\n    Entry.create name: \"First entry in my journal app\"\n    Entry.all\n    exit\n\n\nCould have used seeds as well, see db/seeds.rb\n\n\n    Entry.create([{ name: 'Using rails as an api' }, { name: 'Using Ember-data for persistence' }])\n\n...\n\n    rake db:seed\n\n\n6)  Create a Serializer\n\nIn app/serializers/entry_serializer.rb\n\n\n    class EntrySerializer < ActiveModel::Serializer\n      attributes :id, :name\n    end\n\n\n7)  Update Gemfile\n\nRemove `gem 'turbolinks'`, add:\n\n    gem 'ember-rails'\n\n\n8)  Remove turbolinks from application layout\n\nIn app/views/layouts/application.html.erb\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Journal</title>\n      <%= stylesheet_link_tag \"application\", media: \"all\" %>\n      <%= javascript_include_tag \"application\" %>\n      <%= csrf_meta_tags %>\n    </head>\n    <body>\n\n\n9)  Update configs\n\nIn environments/production.rb\n\n    config.ember.variant = :production\n\n\nIn environments/development.rb\n\n    config.ember.variant = :development\n\n\nIn environments/test.rb\n\n    config.ember.variant = :development\n\n\n10) Create controllers\n\nIn app/controllers/home_controller.rb\n\n    class HomeController < ApplicationController\n    end\n\n\nIn app/controllers/api/v1/entries_controller.rb\n\n    class Api::V1::EntriesController < ApplicationController\n      respond_to :json\n    \n      def index\n        respond_with Entry.all\n      end\n    \n      def show\n        respond_with Entry.find(params[:id])\n      end\n    \n      private\n    \n      def entry_params\n        params.require(:entry).permit(:name)\n      end\n    end\n\n\n11) Setup a namespace in routes.rb\n\nIn config/routes.rb\n\n    Journal::Application.routes.draw do\n      root to: 'home#index'\n    \n      namespace :api do\n        namespace :v1 do\n          resources :entries, only: [:index, :show]\n        end\n      end\n    end\n\n\n12) Add main `outlet` for ember content in `home#index` template\n\nIn app/views/home/index.erb\n\n    <script type=\"text/x-handlebars\">{{ outlet }}</script>\n\n## Setup Front-end\n\n1)  Generate the Ember app code using CoffeeScript\n\n    rails g ember:bootstrap -g --javascript-engine coffee -n App\n\n\n2)  Download Canary version of ember into `vendor` directory\n\nSee [ember canary builds].\n\n    vendor/assets/javascripts/ember-data-canary.js\n    vendor/assets/javascripts/ember-canary.js\n\n\n[ember canary builds]: http://emberjs.com/builds/#/canary/latest\n\n3)  Also add in jQuery-1.9.1 and Handlebars-1.0.0\n\nJust grab from [emberjs/starter-kit]\n\n[emberjs/starter-kit]: https://github.com/emberjs/starter-kit/tree/master/js/libs\n\n4)  Update application.js for using Sprockets\n\n\n    //= require jquery-1.9.1\n    //= require jquery_ujs\n    //= require handlebars-1.0.0\n    //= require ember-canary\n    //= require ember-data-canary\n    //= require_self\n    //= require app\n    \n    // for more details see: http://emberjs.com/guides/application/\n    App = Ember.Application.create();\n    \n    //= require_tree .\n\n\n5)  Create the Entry model\n\nIn app/assets/javascripts/models/entry.js.coffee\n\n    App.Entry = DS.Model.extend\n      name: DS.attr('string')\n\n\n6)  Create a router\n\nIn app/assets/javascripts/router.js.coffee\n\n    App.Router.map ()->\n      @resource('entries')\n\n\nSee: [routing] guide\n\n[routing]: http://emberjs.com/guides/routing/\n\n7)  Create the Entry route\n\nIn app/assets/javascripts/routes/entries.js.coffee\n\n    App.EntriesRoute = Ember.Route.extend\n      model: ->\n        @get('store').findAll 'entry'\n\n\n8)  Setup the Store (persistence w/ ember-data)\n\nIn app/assets/javascripts/store.js.coffee\n\n    App.ApplicationAdapter = DS.RESTAdapter.extend\n      namespace: 'api/v1'\n      #configure: 'plurals', entry: 'entries'\n\n\nSee [defining-a-store] guide.\n\n[defining-a-store]: http://emberjs.com/guides/models/defining-a-store/\n\n9)  Create a couple handlebars templates\n\nIn app/assets/javascripts/templates/entries.handlebars\n\n    <h1>Entries...</h1>\n    {{#each entry in controller}}\n      {{render \"entry\" entry}}\n    {{/each}}    \n\nIn app/assets/javascripts/templates/entry.handlebars\n\n    <h2>{{name}}</h2>\n\n## Fire up the app\n\nCommand to start server\n\n    rails server\n\n\nTry it out in your browser, visit:  \n\n* <http://localhost:3000/#/entries>\n* <http://localhost:3000/api/v1/entries.json>\n\n### Credits:\n\nThanks to [Vic Ramon] for posting: [Setting up an Ember App with a Rails Backend]\n\n[Vic Ramon]: http://hashrocket.com/team/vic-ramon\n[Setting up an Ember App with a Rails Backend]: http://hashrocket.com/blog/posts/setting-up-an-ember-app-with-a-rails-backend",
  "date": "2013-09-24T00:00:00.000Z",
  "excerpt": "**Journal App**\n\nThis is a scaffold for setting up: an API with Rails and the ember-rails gem, persistence with Ember.Data, and a browser app using Ember.js\n\nSee source code on GitHub: [pixelhandler/journal].\n\n[pixelhandler/journal]: https://github.com/pixelhandler/journal",
  "id": "65d42214-3a7b-4f26-95de-528bb593ea5b",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "scaffold-for-a-browser-app-built-with-emberjs-rails-emberdata",
  "title": "Scaffold for a browser app built with Ember.js, Rails, Ember.Data"
},
{
  "body": "### Overview\n\nThe seven steps below cover the creation of a custom element using\n[Ember.Component] so I'll use a simple Ember application using a single\nindex route, which I'll trust Ember to map the default index route.\n\nScroll to the end for links on the topic of custom elements and\nEmber.Component.\n\nIf you've used Ember for any time now you're likely asking, \"Why would\nI not just use [Ember.Select]?\" I'm glad you asked, I want to add my own\ncustom markup instead of the markup that is generated by Ember.Select.\nAlso, I want to define a custom binding to the selected choice in a\nre-usable way. I'd rather not write a Handlebars helper to generate a\ncustom view, that's what Ember.Component is for. I'd like the custom\nselect box to work like a custom html element, e.g. `{{faux-select}}`\ncan be used where I would use a select element in my Handlebars templates.\n\nThe custom \"faux\" select box will look like this:\n\n<style type=\"text/css\">\nselect.faux-select {\n    display: block;\n    filter: alpha(opacity=0);\n    opacity: 0;\n    position: absolute;\n    height: 20px;\n    width: 125px;\n    margin: 5px\n}\n\n.faux-select {\n    color: black;\n    position: relative;\n    font: 14px/18px \"Andale Mono\", AndaleMono, monospace;\n    letter-spacing: 1px;\n    text-transform: uppercase\n}\n\n.faux-select-box {\n    position: absolute;\n    min-width: 137px\n}\n\n.faux-select-selected, .faux-select-graphic {\n    border: 1px solid black;\n    height: 30px;\n    background: #fdfaed;\n    background: -moz-linear-gradient(top, #fdfaed 0%, #b5cbeb 100%);\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #fdfaed), color-stop(100%, #b5cbeb));\n    background: -webkit-linear-gradient(top, #fdfaed 0%, #b5cbeb 100%);\n    background: -o-linear-gradient(top, #fdfaed 0%, #b5cbeb 100%);\n    background: -ms-linear-gradient(top, #fdfaed 0%, #b5cbeb 100%);\n    background: linear-gradient(to bottom, #fdfaed 0%, #b5cbeb 100%);\n    filter: progid: DXImageTransform.Microsoft.gradient(startColorstr='#fdfaed', endColorstr='#b5cbeb', GradientType=0 )\n}\n\n.faux-select-selected {\n    border-top-left-radius: 10px;\n    border-bottom-left-radius: 10px;\n    border-right: none;\n    float: left;\n    min-width: 117px;\n    padding: 5px 10px\n}\n\n.faux-select-graphic {\n    float: right;\n    border-top-right-radius: 10px;\n    border-bottom-right-radius: 10px;\n    padding: 5px 7px\n}\n</style>\n\n<div class=\"faux-select\">\n  <div class=\"faux-select-box\">\n    <span class=\"faux-select-selected\">Choose One</span>\n    <span class=\"faux-select-graphic\">&#x25BE;</span>\n  </div>\n  <select name=\"faux-select\" class=\"faux-select\">\n    <option value=\"\">Choose One</option>\n    <option value=\"1\">Ember.js</option>\n    <option value=\"2\">Backbone.js</option>\n    <option value=\"3\">AngularJS</option>\n  </select>\n</div>\n<br><br>\n\n### Step 1 - Start by using the Ember Starter-Kit repo\n\nIn this step the only work done is to remove some of the example code\nthat ships with the [emberjs/starter-kit] application.\n\nAn outlet in the Ember application template:\n\n**templates/application**\n\n    <script type=\"text/x-handlebars\">\n      {{outlet}}\n    </script>    \n\nAn index template used to try out the custom element (component).\n\n**templates/index**\n\n    <script type=\"text/x-handlebars\" id=\"index\">\n      <h1>Components</h1>\n    </script>    \n\nAn empty model will be used for now, later I'll put a list of choices in\nthis object.\n\n**javascript/app.js**\n\n    App = Ember.Application.create();\n    \n    App.IndexRoute = Ember.Route.extend({\n      model: function() {\n        return {};\n      }\n    });    \n\n### Step 2 - Add a component template with a select box\n\nAdd a component template, this looks like a normal Handlebars template,\nhowever notice the naming convention `components/faux-select`. The\ntemplate name begins with `components/` and the name of the component\nuses a prefix `faux-`. This follows the recommendation for the W3C\nCustom Element, see [Web Components]. \n\n**templates/components/faux-select**\n\n    <script type=\"text/x-handlebars\" id=\"components/faux-select\">\n      <h2>Faux Select</h2>\n      <select>\n        <option value=\"\">Choose One</option>\n      </select>\n    </script>    \n\nTo use the component just place the name of the component in a\nHandlebars template, I've added it in the index template so it renders.\nNotice the `{{faux-select}}` addition below:\n\n**templates/index**\n\n    <script type=\"text/x-handlebars\" id=\"index\">\n      <h1>Components</h1>\n      {{faux-select}}\n    </script>    \n\nNow the select element can be rendered, it's not much and not even a\nmuch as Ember.Select provides yet, but it's a start toward a custom\nelement.\n\n### Step 3 - Add a component template with a select box\n\nNow the model will need some conent to pass to the component as the list\nof choices, I've started with only one choice the default \"Choose One\".\n\n**javascript/app.js**\n\n    App = Ember.Application.create();\n    \n    App.IndexRoute = Ember.Route.extend({\n      model: function() {\n        return [\n          { choice: 'Choose One' }\n        ];\n      }\n    });    \n\nThe component template needs to enumerate over the list of choices:\n\n**templates/components/faux-select**\n\n    <script type=\"text/x-handlebars\" id=\"components/faux-select\">\n      <h2>Faux Select</h2>\n      <select class=\"faux-select\">\n        {{#each choices}}\n          <option {{bindAttr value=choice}}>{{choice}}</option>\n        {{/each}}\n      </select>\n    </script>    \n\nNow the model defined in the route can be passed to the `choices`\nproperty of the component. Below the model data is mapped to the\ncomponent's choices property.\n\n**templates/index**\n\n    <script type=\"text/x-handlebars\" id=\"index\">\n      <h1>Components</h1>\n      {{faux-select choices=model}}\n    </script>    \n\n### Step 4 - Add some attributes and choices\n\nThe model now has an object with properties for className and name which can be\nused to set custom properties on the select box. Each instance of the component\ncan use the dynamic data for the name and css class. The choices list now has a\nfew items to choose from.\n\n**javascript/app.js**\n\n    App = Ember.Application.create();\n    \n    App.IndexRoute = Ember.Route.extend({\n      model: function() {\n        return {\n          name: 'one',\n          className: 'dropdown',\n          choices: [\n            { choice: 'Choose One' }, { choice: 'First' }, { choice: 'Last' }\n          ]\n        };\n      }\n    });\n\nThe select element's attributes are now dynamically set with `bindAttr`.\nOne static class name is kept for standard css styling, `faux-select`\n\n**templates/components/faux-select**\n\n    <script type=\"text/x-handlebars\" id=\"components/faux-select\">\n      <select {{bindAttr name=name class=\":faux-select className\"}}>\n        {{#each choices}}\n          <option {{bindAttr value=choice}}>{{choice}}</option>\n        {{/each}}\n      </select>\n    </script>\n\nThe instance of the `faux-select` component used in the index tempate now has\nthe dynamic properties mapped for name and className.\n\n**templates/index**\n\n    <script type=\"text/x-handlebars\" id=\"index\">\n      <h1>Components</h1>\n      <h2>Faux Select</h2>\n      {{faux-select choices=model.choices name=model.name className=model.className}}\n    </script>    \n\n### Step 5 - Scaffold markup and styles for faux select w/ zero opacity\n\nThe basic idea for this custom element is to hide the native select element\nand style some custom markup instead. So `position` and `opacity` give this\nresult, more style is needed but this css will be the foundation.\n\n**css/style.css**\n\n    /* FauxSelectComponent */\n    select.faux-select {\n        opacity: 0;\n        position: absolute;\n    }\n    .faux-select {\n        position: relative;\n    }\n    .faux-select-box {\n        position: absolute;\n    }\n    .faux-select-selected {}\n    .faux-select-graphic {}\n\nTo bind the `selected` value to the component's template a class (object)\nis needed which defines the property for the `selected` choice. Later an\nevent will be added to respond to the user's choice.\n\n**javascript/app.js**\n\n    App = Ember.Application.create();\n    \n    App.IndexRoute = Ember.Route.extend({\n      model: function() {\n        return {\n          name: 'one',\n          className: 'dropdown',\n          choices: [\n            { choice: 'Choose One' }, { choice: 'First' }, { choice: 'Last' }\n          ]\n        };\n      }\n    });\n    \n    App.FauxSelectComponent = Ember.Component.extend({\n      selected: 'Choose One'\n    });\n\nThe component's template now has the custom HTML to use instead of the\nnative select element.\n\n**templates/components/faux-select**\n\n    <script type=\"text/x-handlebars\" id=\"components/faux-select\">\n      <div class=\"faux-select\">\n        <div class=\"faux-select-box\">\n          <span class=\"faux-select-selected\">{{selected}}</span>\n          <span class=\"faux-select-graphic\">&#x25BE;</span>\n        </div>\n        <select {{bindAttr name=name class=\":faux-select className\"}}>\n        {{#each choices}}\n          <option {{bindAttr value=choice}}>{{choice}}</option>\n        {{/each}}\n        </select>\n      </div>\n    </script>\n\n### Step 6 - Add some custom style for the faux select box\n\nHere is an example implementation of a custom select box with linear gradients.\n\nBelow is a list of required styles for this example of a faux select box.\n\n* The `select` element has zero (0) opacity and is positioned `absolute`\n* The `.faux-select-box` element is also positioned `absolute`\n* The above two elements are siblings as the select box follows the faux element\n  resulting in a higher z-index value, so when user clicks the event is fired on\n  the invisble select box\n* the dimensions of the select box and faux select box need to match so the invisble\n  element can be used on top of the faux element\n\n**css/style.css**\n\n    /* FauxSelectComponent */\n    select.faux-select {\n        display: block;\n        filter: alpha(opacity=0);\n        opacity: 0;\n        position: absolute;\n        height: 20px;\n        width: 125px;\n        margin: 5px;\n    }\n    .faux-select {\n        color: black;\n        position: relative;\n        font: 14px/18px \"Andale Mono\", AndaleMono, monospace;\n        letter-spacing: 1px;\n        text-transform: uppercase;\n    }\n    .faux-select-box {\n        position: absolute;\n        min-width: 137px;\n    }\n    .faux-select-selected,\n    .faux-select-graphic {\n        background-image: linear-gradient(rgb(253, 250, 237), rgb(181, 203, 235));\n        /* visit http://www.colorzilla.com/gradient-editor/ and create your own */\n        border: 1px solid black;\n        height: 17px;\n    }\n    .faux-select-selected {\n        border-top-left-radius: 10px;\n        border-bottom-left-radius: 10px;\n        border-right: none;\n        fl    oat: left;\n        min-width: 117px;\n        padding: 5px 10px;\n    }\n    .faux-select-graphic {\n        float: right;\n        border-top-right-radius: 10px;\n        border-bottom-right-radius: 10px;\n        padding: 5px 7px;\n    }\n\n### Step 7 - Bind the selected value\n\nThe `App.FauxSelectComponent` now has a `change` event binding the visible\nchoice to the choice selected by the user.\n\n**javascript/app.js**\n\n    App = Ember.Application.create();\n    \n    App.IndexRoute = Ember.Route.extend({\n      model: function() {\n        return {\n          name: 'one',\n          className: 'dropdown',\n          choices: [\n            { choice: 'Choose One' }, { choice: 'First' }, { choice: 'Last' }\n          ]\n        };\n      }\n    });\n    \n    App.FauxSelectComponent = Ember.Component.extend({\n      selected: 'Choose One',\n      change: function(e){\n        this.set('selected', e.target.value);\n      }\n    });\n\n## Summary\n\n### Advantages of using invisibe select element\n\n* Native browser support for select/dropdown behavior including arrow keys,\n  typing to select an option\n* Mobile devices still use finger friendly behaviour for select behaviors\n* Screen readers behave as expected with a standard select box\n* You don't have to fix all the bugs for taking over all the native brower\n  support listed above and the custom select box can now match the designer's\n  branding needs\n\n## Disclaimer\n\nThe code in this example select box component has not been tested in various\nbrowsers and cross-browser css has not been included in the demo code. The\nconcept of using 0 opacity for the select box does work in modern browsers.\n\n## Links\n\n* [emberjs/starter-kit]\n* [Components Guide]\n* [Ember.Select]\n* [Polymer Custom Element]\n* [Web Components]\n* [Mozilla Brick]\n* [source code example gist]\n* [diffs for the 7 steps]\n\n[Components Guide]: http://emberjs.com/guides/components/ \"Components Guide\"\n[Ember.Select]: http://emberjs.com/api/classes/Ember.Select.html \"Ember.Select\"\n[Ember.Component]: http://emberjs.com/api/classes/Ember.Component.html \"Ember.Component\"\n[Polymer Custom Element]: http://www.polymer-project.org/platform/custom-elements.html \"Polymer\"\n[Web Components]: https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/custom/index.html \"Web Components\"\n[Mozilla Brick]: http://mozilla.github.io/brick/ \"Mozilla brick\"\n[source code example gist]: https://gist.github.com/pixelhandler/6320922 \"Ember Components Example\"\n[diffs for the 7 steps]: https://github.com/Ember-SC/starter-kit/commits/components \"Starter-kit components branch\"",
  "date": "2013-08-25T00:00:00.000Z",
  "excerpt": "This tutorial steps over an useful example of creating a custom select box\nthat can look as custom as your designer would like. I've often been\nasked to customize the browsers components by designers, especially the\ndropdown/select element. A friend, [ultmast], gave me a simple solution\nwhich meets both my interest of not entirely re-inventing the wheel\n(select box behaviors) and also showing a completely customized select\nelement. Simply set the select box's opacity to zero and position the\ninvisble select box directly over the element that has custom design using\ncss, images or whatever. Then when user click to select the invisible\nselect box behavior takes over, only one binding from the invisible element to\nthe custom element is the selected option (choice).\n\n[ultmast]: https://twitter.com/ultmast\n\n## Use (mostly) the browser default behavior\n\n* With the select element using an opacity of zero (0), the element can have a\ncustom background, and when clicking on the element the hidden select box\nstill behaves normally (browser's default behavior)\n* The custom element will need javascript functionality to update a binding to\nthe value that is selected using the invisble select box (on change).\n\n## Steps to build a custom \"faux\" select box with Ember.js\n\n(Clone the [emberjs/starter-kit] to get started)\n\n1. Start by removing some of the application code from the\n   [emberjs/starter-kit] code\n2. Add a component template with a select box\n3. Use model for collection of choices\n4. Add some attributes and choices\n5. Scaffold markup and styles for faux select w/ zero opacity\n6. Add some custom style for the faux select box\n7. Bind the selected value\n\n[emberjs/starter-kit]: https://github.com/emberjs/starter-kit \"Ember.js Starter Kit\"",
  "id": "21ce89ac-4887-474b-ace7-4aaf6ddf6931",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "create-a-custom-select-box-using-ember-component",
  "title": "Create a Custom Select Box using Ember.Component"
},
{
  "body": "1. Try Jasmine because we love BDD\n2. Try Mocha because it's newer and it's used with Konacha\n3. Try QUnit because it may be better with async tests then the above\n   and the Ember.js project uses it anyway\n4. Wow Ember.js has testing helpers in the ember-testing package, lets\n   rewrite the integration tests\n5. Try Pavlov since is provides BDD style spec runner on top of QUnit\n6. Just use TDD QUnit test runner\n\nIn getting started with the exercise we talked and asked... \n\n* What is important in testing an app built with Ember.js?  \n* Because the Ember.js framework has solid test coverage\nfor the API it provides, is the main gap making sure an \napplication's compontents or modules work together?\n* The underlying behavior of the framework features and API should just work,\nwhat should we not test?\n* Unit tests are needed, but it would be great to have integration tests that\nrun super fast in a JavaScript runner.\n* Perhaps integration or end-to-end testing is the main objective for\n  our exercise.\n\nThe results of this exercise are on GitHub:\n\n* Repo: [peepcode-ordr-test] | [wiki][peepcode-ordr-test-wiki]\n\n[peepcode-ordr-test]: https://github.com/Ember-SC/peepcode-ordr-test \"Ember-SC Meetup PeepCode Ordr Test Repository\"\n[peepcode-ordr-test-wiki]: https://github.com/Ember-SC/peepcode-ordr-test/wiki \"Guide pages proposed to expand Ember testing guide\"\n\n## The Application and Fixture Data\n\nSee the [application code] which is a result of completing the tutorial\nvideo which comes with accompanying [fixture data]. To understand what the\napplication does, see the [Fire up Ember.js video] page which has\ndiagrams and an nice explanation of the workings of the **Ordr** app.\n\n[application code]: https://github.com/Ember-SC/peepcode-ordr-test/wiki/Guide:-Example-Browser-Application\n[fixture data]: https://github.com/Ember-SC/peepcode-ordr-test/wiki/Guide:-Fixture-Data\n\nScott commented, \"it's a reasonable 'smallest realistic' Ember.js\napplication to 'learn with'\".\n\nFor testing, we used compiled Handlebars templates instead of the script\nelements you see in the tutorial.\n\n**Warning:** this example of testing does cover testing [Ember.Data]\nmodels; Ember.data is not ready for prime time yet. That said,\nEmber.Data Fixtures are a nice way to pre-populate application data for\nlisting and reading data. So, why not test the models? Perhaps we can\nlearn something about the fixture adapter by testing.\n\n[Ember.Data]: https://github.com/emberjs/data\n\nI would not recommended using the fixture adapter for a production application, \nthe tutorial uses fixture data as an example that a browser application can be \nworked on in parallel to the development of a server application which will \nprovide the data via an API. \n\nUsing fixture data is an ideal way to facilitate testing of data that, in \nproduction, comes down the wire via AJAX requests.\n\n### Mocking Models\n\nWhen using Ember Data with asynchronous testing, things can get crazy.\nIf your testing suite becomes loaded with intermitent test failures due\nto the [model lifecycle], it may be a good idea to mock your models in\nyour unit tests (when the model is _not_ the subject of the test). See below:\n\n```javascript\nApp.Model = {\n  find: Em.K,\n  transaction: { commit: Em.K, rollback: Em.K },\n  createRecord: Em.K\n};\nApp.SomeModel = App.Model;\n```\n\nWhen mocking the `DS.Model` interface you can also use spies to assert \nyour application works with the model.\n\n[FixtureAdapter]: /guides/models/the-fixture-adapter/ \"Fixture Adapter section of the Model guide\"\n[model]: /guides/models/ \"Model guide\"\n[model lifecycle]: /guides/models/model-lifecycle/ \"Models must be loaded and saved asynchronously\"\n\n## Testing Setup and Helpers\n\nThe [testing/integration guide page] on the [emberjs.com] site is an\nexcellent source for learning about setting up an application for\ntesting, a reference for the test helpers that are part of the\nember-testing package and information on adding your own test helpers.\n\n[testing/integration guide page]: http://emberjs.com/guides/testing/integration/\n[emberjs.com]: http://emberjs.com\n\n### QUnit Test Runner\n\nSee this page on [Testing Setup/Helpers] for the Qunit test runner we\nused, as well as an example of custom test helpers.\n\nIn this case the testing support code combines the definition of the \nhelpers and the execution of code to setup the application for testing.\n\n[Testing Setup/Helpers]: https://github.com/Ember-SC/peepcode-ordr-test/wiki/Guide:-Testing-Setup-Helpers\n\nThe example HTML document includes CSS styles to display the working application \nbelow the QUnit test runner.\n\nWhile under test the application can use a different root element, we used\n`#app-root` to identify the Ember.js applications's root element.\n\nThe libraries listed in the HTML test runner are same versions distributed \nwith the Ember.js [starter kit] repository, see the starter kit repository\nfor the lastest recommended versions for building Ember.js applications.\n\n### Setup the Application For Testing\n\nThe example is this guide uses two (2) methods to prepare the application for \ntesting:\n\n```javascript\nApp.setupForTesting();\nApp.injectTestHelpers();\n```\n\nAdded to the Ordr application is a call to [deferReadiness]\n`App.deferReadiness()`, used to perform asynchronous setup logic and defer \nbooting the application. The `deferReadiness` call was not included in the \ntutorial video, and requires `App.advanceReadiness()` to run the application \nwhen not under test.\n\n### Custom Test Helpers\n\nSee the [end-to-end tests] page for an example integration test that verifies the \ndefault route of the Ordr application. A custom test helper is used to confirm \nthe route. Below is the helper:\n\n```javascript\nEmber.Test.registerHelper('path', function() {\n  return testing().path();\n});\n```\n\nA custom helper object is used to introspect application state. The helpers are \ndefined in a support file loaded only during testing.\n\nIn the example below, helper methods are defined to assist both integration and \nunit testing. See the Unit Tests and End-to-End tests pages in this guide for \nexamples which use custom test helpers: `path()` and `getFoodController()`, \nwhich are defined in the (support) file below.\n\n```javascript\n(function (host) {\n  var document = host.document;\n  var App = host.App;\n\n  var testing = function(){\n    var helper = {\n      container: function(){\n        return App.__container__;\n      },\n      controller: function( name ){\n        return helper.container().lookup('controller:' + name);\n      },\n      path: function(){\n        return helper.controller('application').get('currentPath');\n      }\n    };\n    return helper;\n  };\n\n  Ember.Test.registerHelper('path', function() {\n    return testing().path();\n  });\n\n  Ember.Test.registerHelper('getFoodController', function() {\n    return testing().controller('food');\n  });\n\n  // Move app to an element on the page so it can be seen while testing.\n  document.write('<div id=\"test-app-container\"><div id=\"ember-testing\"></div></div>');\n  App.rootElement = '#ember-testing';\n  App.setupForTesting();\n  App.injectTestHelpers();\n\n}(window));\n```\n\nThe `App.rootElement` bas been changed while the applicaiton is under test so \nthat both the test report and application are visible in the [QUnit] test runner.\n\nSee the [integration] testing page or read the [ember-testing package] code for \nmore details on the helpers which facilitate testing asynchronous behavior \nwithin the application. Also, note that [QUnit] provides `start()` and `stop()` \nmethods utilized by the `wait()` method (included with the Ember testing \nhelpers). \n\nAsync testing can be challenging, our exercise used the default test \nadapter that ships with the Ember Test package. QUnit provides solid support for \nasync testing using it's `start` and `stop` methods which are utilized \ninternally in the Ember Test package by the `wait` helper which internally calls \n`Test.adapter.asyncStart()` and `Test.adapter.asyncEnd()`.\n\n**Warning:** This example of custom helpers includes a call to a private method \nof the Ember#Application object `__container__`; since it's used only in the \nhelper, only while testing, and in only one function... when the private API \nchanges this helper can be updated. This method should **not** be used by the \napplication source code at all.\n\n\n[QUnit]: http://qunitjs.com/ \"Default testing library supported by the ember-testing package\"\n[starter kit]: https://github.com/emberjs/starter-kit \"A starter kit for Ember\"\n[deferReadiness]: http://emberjs.com/api/classes/Ember.Application.html#method_deferReadiness \"perform asynchronous setup logic and defer booting your application\"\n[integration]: /guides/testing/integration \"integration testing page\"\n[ember-testing package]: https://github.com/emberjs/ember.js/tree/master/packages/ember-testing/lib \"ember.js / packages / ember-testing / lib\"\n\n### End-to-End Tests\n\nSee this [end-to-end tests] page for examples of integration tests of a Ember.js\napplication.\n\nWith integration tests executed via JavaScript, not only are test reports \ngenerated fast, but also various components of the application are tested to \nconfirm they work as designed.\n\nUnit tests can be used to confirm each component of the application\n_can_ work as designed; however, integration tests confirm that the components \n_do_ behave as expected (i.e. they are working together as designed).\n\nA healthy combination of both unit and integration tests, executed via a \nJavaScript test runner in a browser or in a headless runner (e.g. phantomjs), \nfacilitates the practice of test-driven development; and helps to ensure that \ndevelopment of Ember.js applications can scale and behave as **ambitious** as \npromised by the Ember.js application framework.\n\n[end-to-end tests]: https://github.com/Ember-SC/peepcode-ordr-test/wiki/Guide:-End-to-End-Tests\n\n#### Testing the PeepCode Ordr Application\n\nIn the test modules below `App.reset()` is called during the `setup` routine of\neach test, so every test executes in isolation from the other tests, resetting\nthe application each time.\n\n#### Ember.run\n\nThe tests have code that should be executed with the confines of an \n[Ember.run] loop (or queue). When the application is in testing mode the \nautomatic invocation of an [Ember.run] queue is disabled. So when creating a \nmodel or changing properties that are bound or observed, this activity requires \nexecution in the scope of an `Ember.run` (callback) function.\n\n[Ember.run]: http://emberjs.com/api/classes/Ember.run.html \"wrap your code inside this call\"\n\n#### Tables Integration Test Module\n\nTables have a tab (think of this as an order) listing food items. The \napplication uses the UI pattern for a \"Master–detail interface\". There are six \n(6) tables, each of them have a tab (order with list items). Note that\nthe model relationship may be defined differently than may appear to the\nuser of the application. In the application source code, a Food may have \nTabItems and a Tab may have a Table; but this doesn't matter from the\nperspective of an integration test.\n\nThe module below has three (3) integration tests and use the `visit` helper \nprovided by the Ember Test package.\n\nThe custom `path()` helper is not part of the Ember testing package and\nserves as an example of using your own custom test helpers.\n\n```javascript\nmodule('Ordr App integration tests: Tables', {\n  setup: function () {\n    App.reset();\n  }\n});\n\ntest('Initial Redirect', function(){\n  expect(1);\n  visit('/').then(function () {\n    equal(path(), 'tables.index', 'Redirects to /tables');\n  });\n});\n\ntest('Displays six tables', function(){\n  expect(1);\n  visit('/tables').then(function () {\n    equal(find('#tables a').length, 6, 'Six tables display');\n  });\n});\n\ntest('Table 2, food menu', function () {\n  expect(3);\n  visit('/tables/2').then(function () {\n    equal(find('div.nine h2').text(), 'Table 2', 'Table 2 heading displayed');\n    equal(find('#customer-tab li h3:first').text(), 'Click a food to add it', 'Has call to action text');\n    equal(find('#menu li > a').length, 5, 'Has food menu with 5 choices');\n  });\n});\n```\n\n#### Tabs Integration Test Module\n\nThe module below uses the following test helpers provided by the Ember\ntest package:\n\n* `visit` (`then`), `click`\n\nThe integration tests visit various routes for a few of the tables and exercises \nthe application behaviors of adding food items to a tab (order). Also, a test \nconfirms that the state of the tab(s) remains between visits of a couple tables. \nOne table has data pre-populated (data defined in the fixures for table #4).\n\n```javascript\nmodule('Ordr App integration tests: Tabs', {\n  setup: function () {\n    App.reset();\n  }\n});\n\ntest('Tables 1 and 3, adding foods to the tabs', function(){\n  expect(5);\n  visit('/tables/1').then(function (){\n    equal(find('div.nine h2').text(), 'Table 1', 'Table 1 heading displayed');\n    return click('#menu li:eq(0) > a');\n  }).then(function(){\n    equal(find('#customer-tab li:eq(0) > h3').text(), 'Pizza $15.00', 'Added pizza to tab');\n    equal(find('#total span').text(), '$15.00', 'Total price updated with pizza price');\n    visit('/tables/3').then(function (){\n      equal(find('div.nine h2').text(), 'Table 3', 'Table 3 heading displayed');\n      visit('/tables/1').then(function (){\n        equal(find('#customer-tab li:eq(0) > h3').text(), 'Pizza $15.00', 'Pizza still in tab');\n      });\n    });\n  });\n});\n\ntest('Table 4, already had foods added to the tab', function(){\n  expect(3);\n  visit('/tables/4').then(function (){\n    var actual = [],\n        expectedFoods = 'Pizza$15.00Pancakes$3.00Fries$7.00HotDog$9.50BirthdayCake$20.00Total$54.50';\n\n    find('#customer-tab > li').each(function (){\n      actual.push( find(this).text() );\n    });\n    equal(find('div.nine h2').text(), 'Table 4', 'Table 4 heading displayed');\n    equal(actual.join('').replace(/\\s/g, ''), expectedFoods, 'Pizza, Pancakes, Fries, Hot Dogs, Cake already added');\n    equal(find('#total span').text(), '$54.50', 'Already has $54.50 in foods in the tab');\n  });\n});\n```\n\n### Testing Strategy\n\nThe approach of testing an Ember.js application by writing integration\ntests does support the concept of writing tests for the design of an\napplication from a behavioral perspective. Basically testing the user's\ninterations with your application. I really like that approach as it\ndoes favor writing tests first then writing code to pass your tests. \n\nThis exercise of writing tests for the Ordr app was done after writing\nthe app via a tutorial video. I do think that with the \"async aware\"\ntesting DSL provided by the \"ember-testing\" package a software\nengineer is encouraged to write tests from the perspective of user\ninteractions. This can be thought of as functional or integration\ntesting.\n\nUsing the Ember-testing package with QUnit affords taming the beast of\nasync testing.\n\nI look forward to writing tests for application development which support\nthe design of the application and the user experience. I do prefer to \navoid writing tests that are basically written to catch bugs when code changes.\n\nUsing the ember-testing package I can write tests that describe the\napplication's behavior. For example `visit` this or that route `then`\nassert or expect some thing to be displayed. And, perhaps `find` an input\nelement and `fillIn` my name or some data; and `click` submit `then` the\ntest can automatically `wait` for the result of that click event `then`\nconfirm that the application is routed to the desired page.\n\nThis type of testing allows you to start with a simple action like\n`visit` a route. With that failing test, you can then write the code in\nthe router to support the new route. Next, add more to your test using\n`then`, to check that a template has the right content for users to get\nbusy using the app. So, you write a failing test for the items in the\ntemplate that are crucial for your users to interact with. Next, write the\ncode to render your template and the necessary elements should be\ndisplayed passing your test. To continue testing the experience, write a\ntest to `fillIn` or `click` some part of that template and assert that your\ncontroller or route has an event/action handler that deals with the user\ninteraction. Once you have a failing test, then work on putting together\nthe function handlers to complete the desired behaviors.\n\nThat's pretty powerful in a speedy JavaScript test runner, and can grow/change\nas the scope of your application changes.\n\nAside from integration tests, there's unit testing. I recommend writing unit\ntests to help engineer the features that your application supports. Having\nintegration tests are great and important; but don't forget to write unit tests\nas you develop key behaviours and features... to display, or interact with\nsingle components of the application.\n\n## Unit Tests\n\nSee this page on writing [unit tests] for a controller, a handlebars\nhelper and the models used in the Ordr app.\n\n[unit tests]: https://github.com/Ember-SC/peepcode-ordr-test/wiki/Guide:-Unit-Tests\n\nI found that in some of the unit tests the `visit()` helper was needed to force\nEmber Data Fixtures to become ready for testing. In addition to `App.reset()`\nsome setup may be needed to ask the route to setup the expected application\nstate, so `visit()` is called during the setup routine.\n\nThere is one caveat with this case study and using `App.reset()`. The Ordr App \nis reset with each unit test so the unit test is executed in isolation from \nother tests but the Ordr application code is also running. Instead of reseting \nthe application, it may be desireable for the tests of a production application \nto use a new Ember.Application with only the required objects that will be unit \ntested. Then the unit tests would be executed in isolation from the \napplication's start routine. This topic fell outside the scope of our exercise,\nso I used only the Ordr applicaiton for the unit tests.\n\n### Food Controller Unit Test Module\n\nThis tests insures a food can be added to the tab (order). The example tests \nbelow use a custom helper to lookup the food controller instance \n`getFoodController()`.  \n\nA food record is created within an [Ember.run] queue which helps organize the \n\"act\" segment of a test. It's common practice in test-driven development \norganize tests in 3 steps: 1-Arrange, 2-Act, 3-Assert.\n\n```javascript\nmodule('Ordr App unit tests: Food Controller', {\n  setup: function () {\n    App.reset();\n    visit('/tables/1');\n  }\n});\n\ntest('Add food to tabItems', function() {\n  expect(7);\n\n  var controller = getFoodController();\n  ok(controller, 'Food controller is ok');\n  ok(controller.addFood, 'Food controller has addFood action');\n\n  var tabItems = controller.get('controllers.table.tab.tabItems');\n  ok(tabItems, 'Food controller can access food items');\n  equal(tabItems.get('content').length, 0, 'tabItems are empty');\n\n  var cheese, foods = [];\n  Ember.run(function () {\n    cheese = App.Food.createRecord({\n      id: 500,\n      name: 'cheese',\n      imgUrl: '',\n      cents: 100\n    });\n    controller.addFood(cheese);\n    tabItems.get('content').forEach(function(food){\n      foods.push( food.record.toJSON() );\n    });\n  });\n  equal(tabItems.get('content').length, 1, 'Added food to tabItems');\n  equal(foods.length, 1, 'tabItems has one food');\n  equal(foods[0].cents, 100, 'added food cost is 100 cents');\n});\n```\n\n### Handlebars Helper Unit Test Module\n\nThe example tests below exercise the display format of money using a Handlebars \nhelper to convert cents to dollars, e.g. 350 cents display as \"3.50\". Conditions \nare tested to confirm output when the cents value is not a number and when the \ncents value is a number. The helper outputs \"0.00\" by default, otherwise formats \nthe cents as dollars (two decimal places).\n\n```javascript\nmodule('Ordr App unit tests: Handlebars Helper', {\n  setup: function () {\n    App.reset();\n  }\n});\n\ntest('money helper renders default text', function() {\n  expect(2);\n\n  var view, cents;\n  Ember.run(function () {\n    view = Ember.View.create({\n      template: Ember.Handlebars.compile('{{money cents}}')\n    });\n    view.appendTo('#qunit-fixture');\n    cents = view.get('cents');\n  });\n  equal(cents, null, 'Value is not a null');\n  strictEqual(view.$().text(), '0.00', 'Renders 0.00 when NaN');\n});\n\ntest('money helper renders number converted to money format', function() {\n  expect(2);\n\n  var view, cents;\n  Ember.run(function () {\n    view = Ember.View.create({\n      template: Ember.Handlebars.compile('{{money view.cents}}'),\n      cents: 777\n    });\n    view.appendTo('#qunit-fixture');\n    cents = view.get('cents');\n  });\n  equal(cents, 777, 'Value is 777');\n  strictEqual(view.$().text(), '7.77', 'Renders 7.77 given 777');\n});\n\n```\n\n### Models Unit Test Module\n\n**Warning: This application uses Ember Data, \"Use with caution\"**\n\nIn the schema for the Ordr application...\n\n* A Table belongs to a Tab (order)\n* A Tab has many TabItems and a computed property for `cents` subtotal\n* A TabItem belongs to a Food\n* A Food has a `cents` property that is copied to a TabItem\n  (a food price can change but the price in the order is final)\n\nAgain, in this test, the setup of the models using fixtures is forced by using \n`visit()` to trigger a route that results in the setup of application state \nunder test, specifically the models that rely on fixture data. (This may be an \nanti-pattern, but seemed necessary at this time for testing the models using the\n`DS.Model#createRecord` method provided by Ember Data.)\n\nSee the [unit tests] page for the functions and variables used to assist creating\nmodel instances during unit testing of the various model classes.\n\n```javascript\nmodule('Ordr App unit tests: Models', {\n  setup: function () {\n    App.reset();\n    visit('/tables/4');\n  }\n});\n\ntest('Tab model has total of all items for table 4', function() {\n  expect(3);\n\n  ok(App.Tab, 'Food model ok');\n  var tab = getFoodController().get('controllers.table.tab');\n  ok(tab, 'tab instance ok');\n\n  var total = 0;\n  tab.get('tabItems.content').forEach(function(food){\n    total += food.record.get('cents');\n  });\n  strictEqual(tab.get('cents'), total, '5450 cents is the total of the tab');\n});\n\ntest('Food model created with name, imageUrl and cents', function() {\n  expect(5);\n\n  ok(App.Food, 'Food model ok');\n  var food;\n  Ember.run(function () {\n    food = createCheese();\n  });\n  ok(food, 'created food item');\n  equal(food.get('name'), 'Cheese', 'Food Name is Cheese');\n  equal(food.get('imageUrl'), 'img/cheese.png', 'Url is img/cheese.png');\n  equal(food.get('cents'), 400, 'cents is 400');\n\n  Ember.run(function () {\n    food.destroy();\n  });\n});\n\ntest('TabItem model created with food model and cents', function() {\n  expect(2);\n\n  ok(App.TabItem, 'TabItem model ok');\n  var tabItem;\n  Ember.run(function () {\n    tabItem = createTabItem(createCheese(), 400);\n  });\n  equal(tabItem.get('cents'), 400, 'created tabItem with 400 cents');\n\n  Ember.run(function () {\n    tabItem.destroy();\n  });\n});\n\ntest('Tab model created with food models', function() {\n  expect(3);\n\n  ok(App.Tab, 'Tab model ok');\n  var tab, foods = [], foodsSum;\n  Ember.run(function () {\n    tab = createTabWithCheeseAndCrackers();\n  });\n  tab.get('tabItems.content').forEach(function(food){\n    foods.push(food.record.get('cents'));\n  });\n  foodsSum = foods.reduce(function (prev, cur) {\n    return prev + cur;\n  });\n  equal(foods.length, 2, 'created tab with two items');\n  equal(foodsSum, tab.get('cents'), 'total of tab is 750');\n\n  Ember.run(function () {\n    tab.destroy();\n  });\n});\n\ntest('Table', function() {\n  expect(2);\n\n  ok(App.Table, 'Table model ok');\n  var table;\n  Ember.run(function () {\n    table = createTable(createTabWithCheeseAndCrackers());\n  });\n  equal(table.get('tab.tabItems.content').length, 2, 'created table with tab which already has 2 items');\n\n  Ember.run(function () {\n    table.destroy();\n  });\n});\n```\n\n## What Not to Test\n\nGet familiar with the Ember.js framework you are using and spend some\ntime reading the tests it has, which guarantee that it's own features work.\nYou can learn how to write tests by learning from those examples. But be\ncareful not to write tests for your application the same way the\nframework tests itself, avoid using or testing Ember.js private methods\nand properties.\n\nIf the framework has a feature that is tested and works, there is no need\nto test that your application can do that. Don't test an observer or\nbinding unless it's really important for your team to know that the\nbound property should work as your test describes it. \n\nDon't test every element and CSS class your handlebars template\ncontains, likely that will change fast anyway. Instead, test that your\ntemplate fires off the expected actions for your app to respond to.\nLikely, you don't need to write a test for every element that can be\nclicked by an user.",
  "date": "2013-08-14T00:00:00.000Z",
  "excerpt": "**Learning by Example**\n\nThe [PeepCode] Ordr app is an excellent video tutorial for learning\nEmber.js and also a great example of a browser application for writing\ntests in JavaScript. Learning Ember.js is a task in itself, learning to\ntest an Ember.js comes with an equal level of challenge. This article is\na collection of observations for an exercise in testing a non-trivial\nEmber.js application, specifically the Ordr app code from the PeepCode\ntutorial [Fire up Ember.js video].\n\n[PeepCode]: https://peepcode.com \"Screencast tutorials for professional web developers and designers\"\n[Fire up Ember.js video]: https://peepcode.com/products/emberjs \"Ember.js Tutorial video by Peepcode\"\n\nThese comments on testing are based on a exercise with a group of\nhackers from the Ember-SC meetup group in Southern California. Drew,\nScott, Ty and myself spent some time trying out various ways to test an\nEmber Application.\n\nThe journey went something like this...",
  "id": "24349581-b576-4ba0-bf5f-2742e47456e1",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "testing-an-ember-application-integration-and-unit-tests",
  "title": "Testing an Ember Application: Integration and Unit tests"
},
{
  "body": "## What is a Finite-State Machine?\n\nIllustration from [Wikipedia][3] -\n\n\n> It is conceived as an abstract machine that can be in one of a finite number of states. The machine is in only one state at a time; the state it is in at any given time is called the current state. It can change from one state to another when initiated by a triggering event or condition; this is called a transition. A particular FSM is defined by a list of its states, and the triggering condition for each transition. \n\n> An example of a very simple mechanism that can be modeled by a state machine is a turnstile. \n\n> A turnstile, used to control access to subways and amusement park rides, is a gate with three rotating arms at waist height, one across the entryway. Initially the arms are locked, barring the entry, preventing customers from passing through. Depositing a coin or token in a slot on the turnstile unlocks the arms, allowing them to rotate by one-third of a complete turn, allowing a single customer to push through. After the customer passes through, the arms are locked again until another coin is inserted.\n\n> The turnstile has two states: **Locked** and **Unlocked**. There are two inputs that affect its state: putting a coin in the slot (*coin*) and pushing the arm (*push*). In the locked state, pushing on the arm has no effect; no matter how many times the input push is given it stays in the locked state. Putting a coin in, that is giving the machine a coin input, shifts the state from **Locked** to **Unlocked**. In the unlocked state, putting additional coins in has no effect; that is, giving additional coin inputs does not change the state. However, a customer pushing through the arms, giving a push input, shifts the state back to **Locked**.\n\n\n## A Turnstile as an Ember application\n\n### Demo\n\nExample Turnstile application built with Ember see in working at [jsbin][4], source code at: [github][1]\n\n\n### Templates\n\n**templates/application**\n\n    <script type=\"text/x-handlebars\">\n      {{outlet}}\n    </script>\n\n**templates/index**\n\n    <script type=\"text/x-handlebars\" data-template-name=\"index\">\n      <button {{ action 'coin' controller }}>Coin</button>\n      <button {{ action 'push' controller }}>Push</button>\n      <h3>{{ display }}</h3>\n      <p>\n        Turnstile is: {{ currentState }}<br/>\n        Total Coins: {{ totalCoins }}\n      </p>\n    </script>    \n\n### Application\n\n**javascript/app.js**\n\n    var App = Ember.Application.create({\n      ready: function(){\n        App.turnstileManager = App.TurnstileManager.create({\n          enableLogging: true\n        });\n      }\n    });\n    \n    App.IndexRoute = Ember.Route.extend({\n      setupController: function( controller ){\n        var manager = App.turnstileManager;\n        manager.set( 'controller', controller );\n        controller.send( 'state', manager.get( 'currentState.name' ) );\n      },\n    \n      events: {\n        coin: function( controller ){\n          App.turnstileManager.send( 'coin', controller );\n        },\n    \n        push: function( controller ){\n          App.turnstileManager.send( 'push', controller );\n        }\n      }\n    });\n    \n    App.IndexController = Ember.Controller.extend({\n      totalCoins: 0,\n    \n      display: 'Please insert coin.',\n    \n      onCoin: function( display, isAccepted ){\n        this.set( 'display', display );\n        if( isAccepted ){\n          this.incrementProperty( 'totalCoins' );\n        }\n      },\n    \n      onPush: function( display ){\n        this.set( 'display', display );\n      },\n    \n      onSetup: function( display ){\n        this.set( 'display', display );\n      },\n    \n      state: function( name ){\n        this.set( 'currentState', name );\n      }\n    });\n    \n    App.BaseState = Ember.State.extend({\n      unhandledEvent: function( manager, eventName ) {\n        console.log( manager.toString() + ': unhandledEvent with name ' + eventName );\n      },\n    \n      enter: function( /*manager*/ ){},\n    \n      setup: function( manager, context ){\n        var controller = ( context ) ? context : manager.get('controller');\n        if( controller ){\n          controller.send( 'state', manager.get('currentState.name') );\n          controller.send( 'onSetup', 'Please insert coin.' );\n        }\n      },\n    \n      exit: function( /*manager*/ ){}\n    });\n    \n    App.TurnstileManager =  Ember.StateManager.extend({\n      initialState: 'locked',\n    \n      locked: App.BaseState.extend({\n        coin: function( manager, context ){\n          context.send( 'onCoin', 'Payment accepted.', true );\n          manager.transitionTo( 'unlocked', context );\n        },\n    \n        push: function( manager, context ){\n          context.send( 'onPush', 'Coin required, please insert coin.');\n        }\n      }),\n    \n      unlocked: App.BaseState.extend({\n        setup: function( manager, context ){\n          context.send( 'state', manager.get( 'currentState.name' ) );\n          context.send( 'onSetup', 'Please proceed.');\n        },\n    \n        coin: function( manager, context ){\n          context.send( 'onCoin', 'No coin needed. Try pushing.', false );\n        },\n    \n        push: function( manager, context ){\n          manager.transitionTo( 'inUse', context );\n        },\n    \n        inUse: App.BaseState.extend({\n          setup: function( manager, context ){\n            context.send( 'state', manager.get( 'currentState.name' ) );\n            context.send( 'onSetup', 'Please wait.');\n            Ember.run.later(function(){\n              manager.transitionTo( 'locked', context );\n            }, 1500);\n          }\n        })\n      })\n    });\n\n## Slide Deck as an Ember application\n\nThis browser app was created for a tech talk at the <http://www.meetup.com/Ember-SC/> meetup group. We discussed [Ember.StateManager in July 2013](http://www.meetup.com/Ember-SC/events/125461412/)\n\nThe ember slide deck app can run in two modes, `idling` and `playing`. Slides that have a time value (`milliseconds` property) automatically enter the `playing state`. When the `next` action is triggered by the `keyPress` event for a slide with no `milliseconds` the app transitions back to `idling`. Every slide has a URL so app state is managed with Ember.Router but states for playing and idling depend on user's behavior and the states exist along side the state represented in the URLs.\n\nIn the sample `fixtures.js` file the slides in the two sections automatically play then stop before the next section.\n\n### Templates\n\n**templates/application**\n\n    <script type=\"text/x-handlebars\">\n      {{outlet}}\n    </script>\n\n**templates/slide-deck/slide.html**\n\n    <script type=\"text/x-handlebars\" id=\"slide\">\n      <img {{bindAttr src=\"model.filename\"}}>\n      <input type=\"text\" value=\"\">\n    </script>    \n\n**templates/slide-deck/slides.html**\n\n    <script type=\"text/x-handlebars\" id=\"slides\">\n      {{#each model}}\n        {{#linkTo 'slide' this}}\n          <img {{bindAttr src=\"filename\"}}>\n        {{/linkTo}}\n      {{/each}}\n    </script>\n\n\n### Application\n\n**javascript/slide-deck/app.js**\n\n    // Application\n    App = Ember.Application.create({\n      ready: function(){\n        App.stateMachine = App.StateMachine.create({\n          //enableLogging: true\n        });\n      }\n    });\n    \n    // Model\n    App.Store = DS.Store.extend({\n      revision: 12,\n      adapter: 'DS.FixtureAdapter'\n    });\n    \n    App.Slide = DS.Model.extend({\n      filename: DS.attr('string'),\n      milliseconds: DS.attr('number')\n    });\n    \n    // States\n    App.StateMachine = Ember.StateManager.extend({\n      initialState: 'idling',\n      idling: Ember.State.extend({\n        next: function (manager, context) {\n          var milliseconds = context.get('currentModel.milliseconds');\n          if (milliseconds && milliseconds !== 0) {\n            manager.transitionTo('playing', context);\n          } else {\n            var id = '' + (+context.get('currentModel.id') + 1);\n            window.document.location = '#/slides/' + id;\n          }\n        }\n      }),\n      playing: Ember.State.extend({\n        setup: function (manager, context) {\n          this.next(manager, context);\n        },\n        next: function (manager, context) {\n          var id = '' + (+context.get('currentModel.id') + 1);\n          window.document.location = '#/slides/' + id;\n          this.play(manager, context);\n        },\n        play: function (manager, context) {\n          var milliseconds = context.get('currentModel.milliseconds');\n          if (milliseconds && milliseconds !== 0) {\n            this.startInterval(context, milliseconds);\n          } else {\n            this.stopInterval();\n            manager.transitionTo('idling', context);\n          }\n        },\n        startInterval: function (context, milliseconds) {\n          var id = '' + (+context.get('currentModel.id') + 1);\n          this.timeoutId = Ember.run.later(function(){\n            window.document.location = '#/slides/' + id;\n            App.stateMachine.send('play', context);\n          }, milliseconds);\n        },\n        stopInterval: function () {\n          if (this._timeoutId) {\n            Ember.run.cancel(this._timeoutId);\n            delete this._timeoutId;\n          }\n        }\n      })\n    });\n    \n    App.Router.map(function() {\n      this.resource('/');\n      this.resource('slides');\n      this.resource('slide', { path: '/slides/:slide_id' });\n    });\n    \n    App.IndexRoute = Ember.Route.extend({\n      redirect: function() {\n        this.transitionTo('slides');\n      }\n    });\n    \n    App.SlidesRoute = Ember.Route.extend({\n      model: function() {\n        return App.Slide.find();\n      }\n    });\n    \n    App.SlideRoute = Ember.Route.extend({\n      model: function(params) {\n        return App.Slide.find(params.slide_id);\n      },\n      events: {\n        previous: function () {\n          var id = '' + (+this.get('currentModel.id') - 1);\n          window.document.location = '#/slides/' + id;\n        },\n        next: function () {\n          App.stateMachine.send('next', this);\n        },\n        first: function () {\n          window.document.location = '#/slides/' + 0;\n        }\n      }\n    });\n    \n    // Controllers\n    App.SlidesController = Ember.ArrayController.extend({\n      sortProperties: ['id']\n    });\n    \n    App.SlideController = Ember.Controller.extend({\n      // left = 37, up = 38, right = 39, down = 40\n      updateKey: function (code) {\n        if (code === 37) {\n          this.get('target').send('previous');\n        } else if (code === 39) {\n          this.get('target').send('next');\n        } else if (code === 38) {\n          this.get('target').send('first');\n        } else if (code === 40) {\n          this.get('target').send('last');\n        }\n      }\n    });\n    \n    // Views\n    App.SlidesView = Ember.View.extend({\n      classNames: ['slides']\n    });\n    \n    App.SlideView = Ember.View.extend({\n      classNames: ['slide'],\n      keyDown: function(e) {\n        this.get('controller').send('updateKey', e.keyCode);\n      },\n      didInsertElement: function() {\n        $('head title').text(\n            ['Using Ember.StateManager', this.get('context.model.filename')].join(' | ')\n        );\n        return this.$('input').focus();\n      },\n    });\n\n\n**javascript/slide-deck/fixtures.js**\n\n    App.Slide.FIXTURES = [\n      { id: '0', filename: 'http://fpoimg.com/800x600?text=Title'},\n      { id: '1', filename: 'http://fpoimg.com/800x600?text=Section-A', milliseconds: 1000 },\n      { id: '2', filename: 'http://fpoimg.com/800x600?text=Slide-A1', milliseconds: 500 },\n      { id: '3', filename: 'http://fpoimg.com/800x600?text=Slide-A2', milliseconds: 250 },\n      { id: '4', filename: 'http://fpoimg.com/800x600?text=Slide-A3' },\n      { id: '5', filename: 'http://fpoimg.com/800x600?text=Section-B', milliseconds: 300 },\n      { id: '6', filename: 'http://fpoimg.com/800x600?text=Slide-B1', milliseconds: 300 },\n      { id: '7', filename: 'http://fpoimg.com/800x600?text=Slide-B2', milliseconds: 300 },\n      { id: '8', filename: 'http://fpoimg.com/800x600?text=Slide-B3' },\n      { id: '9', filename: 'http://fpoimg.com/800x600?text=The End'}\n    ];    \n\n\n### Styles\n\n**css/style.css**\n\n\n    html, body {\n        margin: 0;\n        padding: 0;\n        text-align: left;\n    }\n    .slides img {\n        max-width: 102px;\n        max-height: 77px;\n        float: left;\n        display: inline-block;\n    }\n    .slide {\n        text-align: center;\n        position: relative;\n        top: 0;\n        margin: 0;\n        border: 0;\n        padding: 0;\n        height: 100%;\n        overflow: hidden;\n    }\n    .slide input {\n        position: absolute;\n        display: block;\n        left: -999em;\n    }\n    .slide img {\n        height: 100%;\n        border-style: none;\n    }\n\n\n## Observations on using Ember.StateManager\n\nEmber has some awesome tools baked into the framework. The StateManager is an example of an object to mange the state of objects like models, routes, or any object that needs to behave according to it's state.\n\nI few things I noticed when using Ember.State objects:\n\n* Action handlers for `enter` and `exit` may not have the `currentState.name` in the state that you expect, these events happen during transition to/from a state. \n\n* The `setup` method does have the `currentState` you would expect and receives the `manager` and `context` objects as arguments, while `enter` and `exit` only receive `manager`.\n\n* A state's methods for `enter` and `exit` are good for handling common behaviors when transitioning to sub-states. The `setup` method can be defined in a base state class as the  default setup action for states and thier child states as well.\n\n* Methods defined on a parent state are shared with sub-states.\n\n* Utilize the state pattern by defining the same action methods with varying outcomes depending on the state's required behaviors.\n\n* Reading the 'ember-states' test suite ([state_manager_test.js][5] & [state_test.js][6]) reveals everthing you want to know about the `Ember.StateManager`.\n\n* A state machine may be useful for: \n  * Interactions that don't need to be persisted and represented via a URL.\n  * Workflow, e.g. multiple steps to accomplish an objective.\n\nSee the [State Pattern][7] for another example of a state objects used to handle various behaviors of mouse activity.\n\n[0]: http://emberjs.com/api/classes/Ember.StateManager.html\n[1]: https://github.com/pixelhandler/ember-example-turnstile\n[2]: https://github.com/pixelhandler/ember-slide-deck\n[3]: https://en.wikipedia.org/wiki/Finite-state_machine\n[4]: http://jsbin.com/uvucuw/8/\n[5]: https://github.com/emberjs/ember.js/blob/master/packages/ember-states/tests/state_manager_test.js\n[6]: https://github.com/emberjs/ember.js/blob/master/packages/ember-states/tests/state_test.js\n[7]: http://en.wikipedia.org/wiki/State_pattern",
  "date": "2013-07-20T00:00:00.000Z",
  "excerpt": "**Example Apps**\n\nThis article demonstates two examples of using [Ember#StateManager][0] to\nmanage state that does not need to be represented by a URL.\n\n* The first is more of a an exercise to discover how to use Ember#StateManager in a basic application, [a turnstile app][1]\n* The second is a presentation application (slide deck) made with Ember, using the StateManager to autoplay slides (images).\n\nI used the ember slide deck app to animate some white board sketches during a talk at a meetup on this topic; [ember slide deck app][2].\n\n[0]: http://emberjs.com/api/classes/Ember.StateManager.html \"Ember.StateManager\"\n[1]: https://github.com/pixelhandler/ember-example-turnstile \"Example use of Ember.StateManager\"\n[2]: https://github.com/pixelhandler/ember-slide-deck \"Presentation application written in Ember.js in slideshow format\"",
  "id": "da23a065-e371-455f-be57-99ae6b95055b",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "using-emberstatemanager-example-apps",
  "title": "Using Ember.StateManager: Example Apps"
},
{
  "body": "Inspired my Robert Martin's 'Bowling Game Kata' (a programmer's exercise) I followed Uncle Bob's presentation of the test-driven development exercise to write a program that scores a bowling game and documented the code written in JavaScript. This tutorial content is not my own but rather an exercise of making the Bowling Game Kata my own practice, so I've borrowed the kata from Uncle Bob along with his class diagrams and ten-pin bowling graphic. The headings in this tutorial from the 'Quick Design Session' through the 'Fifth Test' make up the essence of Uncle Bob's presentation. Thank you [Uncle Bob][unclebob] for putting together an excellent exercise!\n\nNote: The code examples in this tutorial will use `git diff` style indicators, lines with the first character `+`/`-` show an action to add(+) or remove(-) a line of code.\n\n### Test-driven development (TDD)\n\nA software development process that relies on the repetition of a very short development cycle: **first** the developer writes a **failing automated test case** that defines a desired improvement or new function, **then** produces **code to pass that test** and finally refactors the new code to acceptable standards.\n\nSee: [http://en.wikipedia.org/wiki/Test-driven\\_development][TDD]\n\n*“Test-driven development constantly repeats the steps of adding test cases that fail, passing them, and refactoring. Receiving the expected test results at each stage reinforces the programmer’s mental model of the code, boosts confidence and increases productivity.”*\n\n#### The TDD Process\n\n1. Add a test\n2. Run all tests and see if the new one fails\n3. Write some code\n4. Run the automated tests and see them succeed\n5. Refactor code\n6. Repeat\n\nBasically *[Lather, Rinse, Repeat][TDD]*\n\n#### Behavior-driven development (BDD)\n\nSee: Introducing BDD : [http://blog.dannorth.net/introducing-bdd/][BDD]\n\nUse language/terminology that everyone on the project understands; using a pattern (e.g. Given, When, Then.) to test expected behavior.\n\n*“Developers discovered it could do at least some of their documentation for them, so they started to write test methods that were real sentences.”*\n\n#### The benefits of TDD\n\nIn Robert Martin's book, 'The Clean Coder: A Code of Conduct for Professional Programmers', is a chapter on TDD, I found a mind map of the book… <http://www.mindmeister.com/119023034/the-clean-coder-by-robert-c-martin-book-notes> …look for 'development' > 'test driven development' then expand 'benefits'\n\nWith the practice of behavior-driven development (BDD) developers begin by writing the acceptance tests (or perhaps a business analyst does this). Since the acceptance tests are agreed to by both team and client, everyone's definition of 'done' (tested and shipped) is establised before development begins. In Martin's book, he asserts that as professionals we should not introduce any defects into a system. Writing tests is the only way a software engineer can be certain that he/she does no harm, by not shipping defects into a system (aside from malformed UI). Writing tests gives everyone on a team the courage to refactor and clean any messy code. Writing tests as BDD specs provides documentation of how components (modules) of a system work. Writing tests enforces quality in design. Testable code needs to be isolated; the result is modular code that is de-coupled from other modules; likely preventing an unstable mess. Since tests can be automated and become part of a build process… less money may be spent on manual QA cycles. And it is less likely that clients will discover defects in production (client satisfaction). Overall, the BDD discipline should enhance certainty, courage, defect reduction, documentation, and design. \n\n## Training Video\n\n<iframe src=\"http://player.vimeo.com/video/53048454?badge=0\" width=\"500\" height=\"313\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe> <p><a href=\"http://vimeo.com/53048454\">Bowling Game Kata In JavaScript - Using Mocha (BDD) Test Framework and Yeoman</a> from <a href=\"http://vimeo.com/user14550887\">Bill Heaton</a> on <a href=\"http://vimeo.com\">Vimeo</a>.</p>\n\n## Vagrant Development Environment\n\nVagrant [development environment][vagrant-dev-box] provisioned with shell scripts on a (linux/ubuntu) precise64 box. The first time you execute `vagrant up` the provision scripts will download a linux box \"precise64\" and install some software needed for a development box. You can edit the provision.sh or scripts in the /bin directory to customize your environment or skip some installations. It may take about 10 minutes to download and install.\n\n```\ncd ~/code/\ngit clone https://github.com/pixelhandler/vagrant-dev-env ./bowlingkata\ncd bowlingkata\ngit submodule init\ngit submodule update\nvagrant up\n```\n\nUpdate your /etc/hosts file, add: `192.168.50.4 precise64` the vagrant/virtual box will use <http://precise64/> or <http://192.168.50.4/> for the www root. You could use any domain you like, the `precise64` apache vhost runs from on the IP address: 192.168.50.4 so `192.168.50.4 precise64.dev` works too, <http://precise64.dev/> may be easier to use in a browser.\n\n## Scoring Bowling\n\n![Complete game][10frames]\n\nThe game consists of 10 frames as shown above.  In each frame the player has two opportunities to knock down 10 pins.  The score for the frame is the total number of pins knocked down, plus bonuses for strikes and spares.\n\nA spare is when the player knocks down all 10 pins in two tries.  The bonus for that frame is the number of pins knocked down by the next roll.  So in frame 3 above, the score is 10 (the total number knocked down) plus a bonus of 5 (the number of pins knocked down on the next roll.)\n\nA strike is when the player knocks down all 10 pins on his first try.  The bonus for that frame is the value of the next two balls rolled.\n\nIn the tenth frame a player who rolls a spare or strike is allowed to roll the extra balls to complete the frame.  However no more than three balls can be rolled in tenth frame.\n\nFor more info see [Ten-pin bowling game Wikipedia article][TenPinBowlingGame] and article for [Instructions on scoring with game examples][scoringinstructions]\n\n[10frames]: https://raw.github.com/pixelhandler/vagrant-dev-env/bowling/www/app/images/ten-pins.jpg \"Uncle Bob game\"\n\n## The Requirements\n\n    +--------------------+\n    | Game               |\n    | ------------------ |\n    | + roll(pins : int) |\n    | + score() : int    |\n    +--------------------+\n\nWrite a class named “Game” that has two methods:  \n* **roll(pins : int)** is called each time the player rolls a ball.  The argument is the number of pins knocked down.  \n* **score() : int** is called only at the very end of the game.  It returns the total score for that game.\n\n\n## Quick Design Session\n\n1. Clearly we need the Game class. ![Game class][des1]\n2. A game has 10 frames.  ![Frame class][des2]\n3. A frame has 1 or two rolls.  ![Roll class][des3]\n4. The tenth frame has two or three rolls. It is different from all the other frames.  ![Tenth frame][des4]\n5. The score function must iterate through all the frames, and calculate all their scores.  ![Score method][des5]\n6. The score for a spare or a strike depends on the frame’s successor  ![Next frame][des6]\n\n[des1]: https://raw.github.com/pixelhandler/vagrant-dev-env/bowling/www/app/images/game_class.png \"Game class\"\n[des2]: https://raw.github.com/pixelhandler/vagrant-dev-env/bowling/www/app/images/frame_class.png \"Frame class\"\n[des3]: https://raw.github.com/pixelhandler/vagrant-dev-env/bowling/www/app/images/roll_class.png \"Roll class\"\n[des4]: https://raw.github.com/pixelhandler/vagrant-dev-env/bowling/www/app/images/tenth_frame_class.png \"Tenth frame\"\n[des5]: https://raw.github.com/pixelhandler/vagrant-dev-env/bowling/www/app/images/frame_class_score.png \"Score method\"\n[des6]: https://raw.github.com/pixelhandler/vagrant-dev-env/bowling/www/app/images/frame_class_next.png \"Next frame\"\n\n\n## Begin\n\n### Create a project in /vagrant/www\n\nIssue some vagrant and yeoman commands to get started\n\n    git checkout -b bowling\n    vagrant ssh\n    git config --global user.name \"Your Name\"\n    git config --global user.email \"me@dom.com\"\n    cd /vagrant/www\n    yeoman init\n    # Answer Y/n (make yeoman better), then... n, n, Y (RequireJS), n, N to yeoman.\n    git add .\n    git commit -m \"yeoman init\"\n    yeoman test\n    yeoman server\n    # see http://precise64.dev:3501/ \n    # stop yeoman server with control-c, `exit` (vagrant ssh); or stay in bowlingkata and use vimvim\n\nNow you should have /vagrant/www/app and vagrant/www/test directories this is where we will write some code in. \n\n*Note:* You do not have to use the vagrant development environment to complete this tutorial (kata); you could just open the test file in your browser to execute the tests and view the mocha report. If you are not using the virtual box / vagrant environment then be sure to modify `/vagrant/www/` to the path to your working directory.\n\nEdit app/scripts/main.js add `app: 'app',` and delete a few lines, all you will need is the `paths` object:\n\n     require.config({\n    -  shim: {\n    -  },\n    -\n       paths: {\n    +    app: 'app',\n         jquery: 'vendor/jquery.min'\n       }\n     });\n    - \n    -require(['app'], function(app) {\n    -  // use app here\n    -  console.log(app);\n    -});\n\nCreate symbolic link for `scripts` in the test directory, to load [require.js][requirejs] and main.js with one script element. I had an issue creating a symbolic link while in the precise64 box (using `vagrant ssh`), so I exited the ssh connection and made the link.\n\n    exit\n    cd www/test/\n    ln -s ../app/scripts/ ./scripts\n    cd ../../ && vagrant ssh\n    cd /vagrant/www/\n\nThe test runner index.html (see below) will use the directory `www/app/scripts` via the symbolic link (see above) to load the application's RequireJS main configuration file and to load the RequireJS library.\n\nEdit file: /test/index.html - use this markup:\n\n    <!doctype html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n      <title>Mocha Spec Runner</title>\n      <link rel=\"stylesheet\" href=\"lib/mocha/mocha.css\">\n    </head>\n    <body>\n      <div id=\"mocha\"></div>\n    \n      <script src=\"lib/mocha/mocha.js\"></script>\n      <script src=\"lib/chai.js\"></script>\n      <script data-main=\"scripts/main\" src=\"scripts/vendor/require.js\"></script>\n    \n      <script>\n        mocha.setup({ui: 'bdd', ignoreLeaks: true});\n        expect = chai.expect;\n        require(['../spec/game.spec'], function () {\n          setTimeout(function () {\n            require(['../runner/mocha']);\n          }, 100);\n        });\n      </script>\n    \n    </body>\n    </html>\n\n\nIt will be very helpful to change the lint task in the (yeoman) generated file, Gruntfile.js, e.g. to ignore the vendor directory (and other subdirectories); also to lint the test directory with the command: `yeoman lint`.\n\n         lint: {\n           files: [\n             'Gruntfile.js',\n    -        'app/scripts/**/*.js',\n    +        'app/scripts/*.js',\n    +        'test/spec/*.js'\n           ]\n\n\n## First Test, A Gutter Game\n\n### Create a unit test in test/spec/game.spec.js\n\n    cd /vagrant/www/test/spec && touch game.spec.js\n    cd /vagrant/www/app/scripts && touch Game.js\n\n### Add a failing test for a gutter game.\n\nAdd code to test/spec/game.spec.js\n\n    +// Bowling Game specs\n    +\n    +describe(\"Ten-Ping Bowling Kata\", function () {\n    +\n    +    describe(\"Gutter Game\", function () {\n    +\n    +        it(\"should score 0 for a gutter game, all rolls are 0\", function () {\n    +            var game = new Game();\n    +        });\n    +\n    +    });\n    +\n    +});\n\n\n### Execute this program and verify that you get an error\n\n    cd /vagrant/www/\n\n#### Run the spec, `yeoman test` should FAIL\n\n    >> Gutter Game - should score 0 for a gutter game, all rolls are 0\n    >> Message: Can't find variable: Game\n\n### Pass the failing test, by adding Game constructor\n\nAdd code in app/scripts/Game.js\n\n    +define('game', function () {\n    +    var Game = function () {};\n    +\n    +    return Game;\n    +});\n\nAdd `game: 'Game'` to requirejs config in app/scripts/main.js\n\n     require.config({\n       paths: {\n         app: 'app',\n    +    game: 'Game',\n         jquery: 'vendor/jquery.min'\n       }\n     });\n\nUpdate spec in test/spec/game.spec.js adding a `require` call for the Game constructor, wrap the entire describe call with...\n\n    +require(['game'], function (Game) {\n    +\n     describe(\"Ten-Ping Bowling Kata\", function () {\n\n…\n\n     });\n    +\n    +});\n\n#### Run the spec, `yeoman test` should PASS\n\n    >> 1 assertions passed (0.01s)\n\nYou can also visit <http://precise64.dev/test/> in your browser; the vagrant provisioning task setup the precise64.dev virtual host for you. The precise64.dev domain renders the files served by apache from the `/vagrant/www` directory, and is accessible to your browser as long as your hosts file has the entry `192.168.50.4 precise64.dev`.\n\n### Continue the specs for a gutter game\n\n#### Add a failing test for a gutter game, and stub roll() and score() methods\n\nAdd an assertion to test/spec/game.spec.js\n\n             it(\"should score 0 for a gutter game, all rolls are 0\", function () {\n    -            var game = new Game();\n    +            var game = new Game(), i = 0;\n    +\n    +            for (i; i < 20; i ++) {\n    +                game.roll(0);\n    +            }\n    +            expect(game.score()).to.equal(0);\n             });\n\nAdd some stub methods in app/scripts/Game.js\n\n     define('game', function () {\n         var Game = function () {};\n     \n    +    Game.prototype.roll = function (pins) {\n    +        if (typeof pins !== 'number') {\n    +            throw new Error(\"expeced a number\");\n    +        }\n    +    };\n    +\n    +    Game.prototype.score = function () {\n    +        return -1;\n    +    };\n    +\n         return Game;\n     });\n\n#### Run the spec, `yeoman test` should FAIL\n\n    >> Gutter Game - should score 0 for a gutter game, all rolls are 0\n    >> Message: expected -1 to equal 0\n    >> Actual: undefined\n    >> Expected: 0\n\n### Pass failing test with code change in app/scripts/Game.js\n\n     define('game', function () {\n    -    var Game = function () {};\n    +    var Game = function () {\n    +        this._score = 0;\n    +    };\n     \n         Game.prototype.roll = function (pins) {\n             if (typeof pins !== 'number') {\n                 throw new Error('Game.role() expects `pins` argument to be a number');\n             }\n    +        this._score += pins;\n         };\n     \n         Game.prototype.score = function () {\n    -        return -1;\n    +        return this._score;\n         };\n     \n         return Game;\n\n#### Run the spec, `yeoman test` should PASS\n\n    >> 1 assertions passed (0.01s)\n\n## Second Test, Game With Every Roll Hitting 1 Pin\n\n### Add new test for scoring a game of all 20 rolls only hitting 1 pin\n\n    +    describe(\"Score game given all rolls hit only one pin\", function () {\n    +\n    +        it(\"should score 20\", function () {\n    +            var game = new Game(), i = 0;\n    +\n    +            for (i; i < 20; i ++) {\n    +                game.roll(1);\n    +            }\n    +            expect(game.score()).to.equal(20);\n    +        });\n    +\n    +    });\n\n#### Run the spec, `yeoman test` should PASS\n\n    >> 2 assertions passed (0.02s)\n\n### Refactor test/spec/game.spec.js to make test more DRY (don't repeat yourself)\n\nEach test instantiates a game object, use a `beforeEach` method; also add a `rollMany` helper function. \n\n     describe(\"Ten-Ping Bowling Kata\", function () {\n     \n    +    function rollMany(rolls, pins) {\n    +        var i = 0;\n    +        for (i; i < rolls; i ++) {\n    +            this.roll(pins);\n    +        }\n    +    }\n    +\n    +    beforeEach(function () {\n    +        this.game = new Game();\n    +    });\n    +\n         describe(\"Gutter Game\", function () {\n     \n             it(\"should score 0 for a gutter game, all rolls are 0\", function () {\n    -            var game = new Game(), i = 0;\n    -\n    -            for (i; i < 20; i ++) {\n    -                game.roll(0);\n    -            }\n    -            expect(game.score()).to.equal(0);\n    +            rollMany.call(this.game, 20, 0);\n    +            expect(this.game.score()).to.equal(0);\n             });\n     \n         });\n\n\n         describe(\"Score game given all rolls hit only one pin\", function () {\n     \n             it(\"should score 20\", function () {\n    -            var game = new Game(), i = 0;\n    -\n    -            for (i; i < 20; i ++) {\n    -                game.roll(1);\n    -            }\n    -            expect(game.score()).to.equal(20);\n    +            rollMany.call(this.game, 20, 1);\n    +            expect(this.game.score()).to.equal(20);\n             });\n     \n         });\n\n#### Run the spec, `yeoman test` should still PASS\n\n    >> 2 assertions passed (0.02s)\n\n## Third Test, Game With One Spare\n\n### Add failing test for a game with one spare\n\n#### Add helper function for rolling a spare\n\n    +    function rollSpare() {\n    +        this.roll(5);\n    +        this.roll(5);\n    +    }\n\n#### Add test for game with the first frame as a spare\n\n    +    describe(\"Score a game with only a spare\", function () {\n    +\n    +        it(\"should score 20 given the first 3 rolls hit 5 pins\", function () {\n    +            rollSpare.call(this.game);\n    +            this.game.roll(5);\n    +            rollMany.call(this.game, 17, 0);\n    +            expect(this.game.score()).to.equal(20);\n    +        });\n    +\n    +    });\n\n#### Run the spec, `yeoman test` should FAIL\n\n    >> Score a game with only a spare - should score 20 given the first 3 rolls hit 5 pins\n    >> Message: expected 15 to equal 20\n    >> Actual: undefined\n    >> Expected: 20\n\nThere is a design error with Game methods: roll() & score() so add some TODOs and *skip* the new test for spare…\n\n### Note incorrect design in app/scripts/Game.js\n\n    +    // TODO design is wrong, responsibilities are missplaced...\n    +\n    +    // TODO roll should not calculate score\n         Game.prototype.roll = function (pins) {\n\n…\n     \n    +    // TODO score is not actually calculating value\n         Game.prototype.score = function () {\n\n### Skip test in test/spec/game.spec.js\n\n    -    describe(\"Score a game with only a spare\", function () {\n    +    describe.skip(\"Score a game with only a spare\", function () {\n\n#### Run the spec, `yeoman test` should PASS (new test was skipped)\n\n    >> 3 assertions passed (0.04s)\n\n### Refactor Game methods, roll() and score(), in app/scripts/Game.js\n\nPass tests for rolling and scoring spares…\n\n     define('game', function () {\n         var Game = function () {\n    -        this._score = 0;\n    +        this._currentRoll = 0;\n    +        this._rolls = [];\n         };\n     \n    -    // TODO design is wrong, responsibilities are missplaced...\n    -\n    -    // TODO roll should not calculate score\n         Game.prototype.roll = function (pins) {\n             if (typeof pins !== 'number') {\n                 throw new Error(\"expeced a number\");\n             }\n    -        this._score += pins;\n    +        this._rolls[this._currentRoll++] = pins;\n         };\n     \n    -    // TODO score is not actually calculating value\n         Game.prototype.score = function () {\n    -        return this._score;\n    +        var score = 0, i = 0, \n    +            rollsToScore = this._rolls.length;\n    +\n    +        for (i; i < rollsToScore; i ++) {\n    +            if (this._isSpare(i)) {\n    +                score += 10 + this._rolls[i + 2];\n    +                i ++;\n    +            } else {\n    +                score += this._rolls[i];\n    +            }\n    +        }\n    +        return score;\n    +    };\n    +\n    +    Game.prototype._isSpare = function (rollIdx) {\n    +        return (this._rolls[rollIdx] + this._rolls[rollIdx + 1] === 10);\n    +    };\n     \n         return Game;\n\n### Enable the skipped test in test/spec/game.spec.js\n\n    -    describe.skip(\"Score a game with only a spare\", function () {\n    +    describe(\"Score a game with only a spare\", function () {\n\n#### Run the spec, `yeoman test` should PASS\n\n    >> 3 assertions passed (0.02s)\n\n## Fourth Test, Game With One Strike\n\n### Add failing test for rolling a strike\n\nAdd helper function for testing a strike in test/spec/game.spec.js\n\n    +    function rollStrike() {\n    +        this.roll(10);\n    +    }\n\nAdd test for scoring with one strike and two following rolls each hitting 4 pins\n\n    +    describe(\"Score a game with only a strike\", function () {\n    +\n    +        it(\"should score 20 given a strike followed by a two rolls hitting 2 & 3 pins\", function () {\n    +            rollStrike.call(this.game);\n    +            this.game.roll(2);\n    +            this.game.roll(3);\n    +            rollMany.call(this.game, 17, 0);\n    +            expect(this.game.score()).to.equal(20);\n    +        });\n    +    };\n\n#### Run the spec, `yeoman test` should FAIL\n\nIf you get a response like:\n\n    >> 0 assertions passed (0s)\n\nIt may be a good idea to lint your code, using `yeoman lint`.\n\n    Linting test/spec/game.spec.js...ERROR\n    [L64:C6] Expected ')' and instead saw ';'.\n\nThe fix needed at line 64 in game.spec.js is:\n\n    -    };\n    +    });\n\n#### Run the spec, `yeoman test` should FAIL\n\n    >> Score a game with only a spare - should score 20 given a strike followed by a two rolls hitting 2 & 3 pins\n    >> Message: expected 15 to equal 20\n    >> Actual: undefined\n    >> Expected: 20\n\n### Pass the failing test with code edits in app/scripts/Game.js\n\nRefactor score method, add code to score a strike  \n\n         Game.prototype.score = function () {\n             var score = 0, i = 0, \n                 rollsToScore = this._rolls.length;\n     \n             for (i; i < rollsToScore; i ++) {\n    -            if (this._isSpare(i)) {\n    +            if (this._isStrike(i)) {\n    +                score += 10 + this._rolls[i + 1] + this._rolls[i + 2];\n    +            } else if (this._isSpare(i)) {\n                     score += 10 + this._rolls[i + 2];\n                     i ++;\n                 } else {\n                     score += this._rolls[i];\n                 }\n             }\n     \n             return score;\n         };\n\nAdd method to check if a roll is a strike\n\n    +    Game.prototype._isStrike = function (rollIdx) {\n    +        return (this._rolls[rollIdx] === 10);\n    +    };\n\n#### Run the spec, `yeoman test` should PASS\n\n    >> 4 assertions passed (0.02s)\n\n## Fifth Test, Perfect Game - All Strikes\n\n### Add test for rolling perfect game of 300 in test/spec/game.spec.js\n\n    +    describe(\"Score a perfect game of 300 points\", function () {\n    +\n    +        it(\"should score 300 for 12 strikes in a row\", function () {\n    +            rollMany.call(this.game, 12, 10);\n    +            expect(this.game.score()).to.equal(300);\n    +        });\n    +\n    +    });\n\n#### Run the spec, `yeoman test` should FAIL\n\n    >> Score a perfect game of 300 points - should score 300 for 12 strikes in a row\n    >> Message: expected NaN to equal 300\n    >> Actual: undefined\n    >> Expected: 300\n\n### Refactor Game object to handle scoring the 10th frame\n\n#### Add method for checking if the game has a bonus roll in the 10th frame\n\n    +    Game.prototype._bonusRoll = function () {\n    +        var hasBonusRoll = false, \n    +            checkRoll = this._rolls.length - 3;\n    +\n    +        if (this._isStrike(checkRoll) || this._isSpare(checkRoll)) {\n    +            hasBonusRoll = true;\n    +        }\n    +\n    +        return (hasBonusRoll) ? checkRoll : null;\n    +    };\n\n#### Update score method to calculate the 10th frame properly\n\n         Game.prototype.score = function () {\n             var score = 0, i = 0, \n    -            rollsToScore = this._rolls.length;\n    +            tenthFrameRoll = this._bonusRoll(),\n    +            rollsToScore = (tenthFrameRoll) ? tenthFrameRoll + 1 : this._rolls.length;\n\n#### Run the spec, `yeoman test` should PASS\n\n    >> 5 assertions passed (0.03s)\n\n### As a sanity check, Add one more test in test/spec/game.spec.js \n\nTest a complete game with all kinds of rolls\n\n    +    describe(\"Game with all scoring variations including tenth frame\", function () {\n    +\n    +        it(\"should score 110\", function () {\n    +            var game = this.game;\n    +\n    +            // frame 1, score: 9\n    +            game.roll(7);\n    +            game.roll(2);\n    +            // frame 2, score: 16\n    +            game.roll(6);\n    +            game.roll(1);\n    +            // frame 3, score: 26 + 3 = 29\n    +            rollSpare.call(game);\n    +            // frame 4, score: 36\n    +            game.roll(3);\n    +            game.roll(4);\n    +            // frame 5, score: 46 + 10 = 56\n    +            rollSpare.call(game);\n    +            // frame 6, score: 66 + 5 + 3 = 74\n    +            rollStrike.call(game);\n    +            // frame 7, score: 82\n    +            game.roll(5);\n    +            game.roll(3);\n    +            // frame 8, score: 87\n    +            game.roll(5);\n    +            game.roll(0);\n    +            // frame 9, score: 95\n    +            game.roll(6);\n    +            game.roll(2);\n    +            // frame 10, score: 105 + 5 = 110\n    +            game.roll(7);\n    +            game.roll(3);\n    +            game.roll(5);\n    +            expect(this.game.score()).to.equal(110);\n    +        });\n    +\n    +    });\n\n#### Run the spec, `yeoman test` should PASS\n\n    >> 6 assertions passed (0.03s)\n\n#### Well that's a wrap from red to green over and over until the requirements are met.\n\n\n## Additional Topics\n\nThe finished test/code is on a [bowling branch][vagrant-dev-box-bowling] of my dev repository.\n\nI added a few branches to my [dev repository][vagrant-dev-box] showing examples of:\n\n* [Testing both the development code and the build][vagrant-dev-box-bowling-rjs]  \n* [Testing with Jasmine instead of Mocha][vagrant-dev-box-bowling-jasmine]  \n* [Reporting code coverage with jscoverage and mocha][vagrant-dev-box-bowling-coverage]\n\n*Note:* See the Makefiles in the above branches (in the www directories) for the commands build, test, report coverage, etc.\n\nBelow is a followup on the tutorial video reviewing branches in the [repo][vagrant-dev-box] showing: the mocha spec changed to jasmine (assertions changed); a build using r.js (RequireJS); generating code coverage reports with mocha; and, asynchronous testing with mocha using the backbone.js boilerplate (scaffold by yeoman) including mocking server with SinonJS:\n\n<video poster=\"http://pixelhandler.com/uploads/Bowling-Game-Kata-AdditionalTopics.png\" width=\"900\" height=\"600\" controls>\n  <source src=\"http://pixelhandler.com/uploads/Bowling-Game-Kata-AdditionalTopics.m4v\" type='video/m4v' />\n</video>\n[Video File](http://pixelhandler.com/uploads/Bowling-Game-Kata-AdditionalTopics.m4v)\n\n## Reference / Links\n\n1. [Uncle Bob's The Bowling Game Kata][TheBowlingGameKata]\n2. [Ten-pin bowling game Wikipedia article][TenPinBowlingGame]\n3. [Instructions on scoring with game examples][scoringinstructions]\n4. [The Basics of Keeping Score][scoringbasics]\n5. [Yeoman.io][yeomansource]\n6. [Mocha Test Framewor][mochasite]\n7. [Chai assertion library][chaibdd]\n8. [RequireJS][requirejs]\n9. [Vagrant dev box][vagrant-dev-box]\n10. [Behavior-Driven Development][BDD]\n11. [Test-Driven Development][TDD]\n\n[BDD]: http://blog.dannorth.net/introducing-bdd/ \"Behavior-Driven Development\"\n\n[chaibdd]: http://chaijs.com/api/bdd/ \"Chai BDD Assertion Library\"\n\n[mochasite]: http://visionmedia.github.com/mocha/ \"Mocha Test Framework\"\n\n[nodejs]: http://nodejs.org/ \"Node.js\"\n\n[phantomjs]: http://phantomjs.org/ \"PhantomJS - headless WebKit w/ JavaScript API\"\n\n[requirejs]: http://requirejs.org/docs/requirements.html \"RequireJS Library for dependency management and build optimization\"\n\n[scoringbasics]: http://slocums.homestead.com/gamescore.html \"The Basics of Keeping Score\"\n\n[scoringinstructions]: http://www.bowlingindex.com/instruction/scoring.htm \"Scoring a bowling game\"\n\n[TenPinBowlingGame]: http://en.wikipedia.org/wiki/Ten-pin_bowling \"Ten pin bowling game Wikipedia article\"\n\n[TheBowlingGameKata]: http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata \"The Bowling Game Kata\"\n\n[TDD]: http://en.wikipedia.org/wiki/Test-driven_development \"Test-Driven Development\"\n\n[testindex]: https://github.com/pixelhandler/vagrant-dev-env/blob/bowling/www/test/index.html \"testing index.html file uses symbolic link in test directory to load app code w/ requirejs\"\n\n[unclebob]: https://twitter.com/unclebobmartin \"Uncle Bob Martin on Twitter\"\n\n[vagrant-dev-box]: https://github.com/pixelhandler/vagrant-dev-env \"Vagrant Development Environment\"\n[vagrant-dev-box-bowling]: https://github.com/pixelhandler/vagrant-dev-env/tree/bowling/www/test \"Completed Bowling Game Test using Mocha\"\n[vagrant-dev-box-bowling-jasmine]: https://github.com/pixelhandler/vagrant-dev-env/tree/bowling-jasmine/www/test \"Completed Bowling Game Test using Jasmine\"\n[vagrant-dev-box-bowling-rjs]: https://github.com/pixelhandler/vagrant-dev-env/tree/bowling-rjs/www/test \"Testing a build with r.js (RequireJS optimization tool)\"\n[vagrant-dev-box-bowling-coverage]: https://github.com/pixelhandler/vagrant-dev-env/blob/bowling-cov/www/Makefile \"Code Coverage using Mocha, commands in Makefile\"\n\n[yeomansource]: https://github.com/yeoman/yeoman \"Yeoman source code\"\n\n[yeomansite]: http://yeoman.io/ \"Yeoman - set of tools\"",
  "date": "2012-10-24T00:00:00.000Z",
  "excerpt": "About this Tutorial…\n\nThis tutorial was created in an effort to learn more about using new tools like Yeoman and the Mocha test framework using [Node.js][nodejs] that can be executed in a headless browser environment ([phantomjs][phantomjs]), and to assist other engineers in learning the practice of behavior driven development. Basically, this article is a result of following the ['kata' by Uncle Bob][TheBowlingGameKata] to author a simple program in JavaScript that scores a [game of ten-pin bowling][TenPinBowlingGame].\n\nCovered in this tutorial:\n\n1.  Using the [Mocha test framework][mochasite] with behavior-driven development ([BDD][BDD])  \n2.  [Uncle Bob's \"Bowling Game\" kata][TheBowlingGameKata] in JavaScript\n3.  Quickly setting up your development environment with [Vagrant, VirtualBox][vagrant-dev-box] and [Yeoman][yeomansite] \n3.  First, writing [tests][chaibdd] to describe the expected behaviors which fail  \n4.  Next, writing application code which passes the tests  \n5.  The result: a program that [scores a game of bowling][scoringbasics], and better BDD skills\n\n[nodejs]: http://nodejs.org/ \"Node.js\"\n[phantomjs]: http://phantomjs.org/ \"PhantomJS - headless WebKit w/ JavaScript API\"\n[TenPinBowlingGame]: http://en.wikipedia.org/wiki/Ten-pin_bowling \"Ten pin bowling game Wikipedia article\"\n[TheBowlingGameKata]: http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata \"The Bowling Game Kata\"\n[BDD]: http://blog.dannorth.net/introducing-bdd/ \"Behavior-Driven Development\"\n[chaibdd]: http://chaijs.com/api/bdd/ \"Chai BDD Assertion Library\"\n[mochasite]: http://visionmedia.github.com/mocha/ \"Mocha Test Framework\"\n[yeomansite]: http://yeoman.io/ \"Yeoman - set of tools\"\n[scoringbasics]: http://slocums.homestead.com/gamescore.html \"The Basics of Keeping Score\"",
  "id": "7ea8240a-9752-4d2a-8c53-62ae0554bc08",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "bowling-game-kata-using-mocha-bdd-test-framework-and-yeoman",
  "title": "Bowling Game Kata Using Mocha (BDD) Test Framework and Yeoman"
},
{
  "body": "I will start with the end in mind. I'll need a router to **list** the products, a **collection** of data, a **view** to render the list, and a **model** for each data object. (The code examples are found in a [gist][backbone product list gist])\n\n## The Product's Router\n\n**product_router.js**\n\n    PX = window.PX || {};\n    // application\n    PX.App = Backbone.Router.extend({\n        routes: {\n            \"/\": \"listProducts\",\n            \"list\": \"listProducts\"\n        },\n        //initialize: function (options) {},\n        listProducts: function () {\n            var productsList = new PX.ProductListView({\n                \"container\": $('#container'),\n                \"collection\": PX.products\n            });\n            PX.products.deferred.done(function () {\n                productsList.render();\n            });\n        }\n    });\n\nIn the code above I am using a object named 'PX' as a namespace, adding the code for the Backbone objects to the PX object to minimize adding a bunch global variables to the window obejct. For the purpose of this tutorial I am only adding one global object, 'PX'.\n\n    PX = window.PX || {};\n\nThe object literal `{ ... }` is an argument to `Backbone.Router.extend` which is the **prototype** for the router object that I will use to render the products' list. `PX.App` is a constructor with a prototype that extends the `Backbone.Router` function. The prototype (object literal) has to properties: *routes* and *listProducts*. The routes property has an object literal with two named routes - the root directory \"/\" and \"list\". Both routes are assigned a string which is the name of the function that handles the routes. See the [Backbone.Router documentation][backbone router] for more details.\n\nIn the routes' handler method (`listProducts`) I create a new `Backbone.View` object using the new operator with `PX.ProductListView` and passing some options as an object literal. Included in the options argument are properties for a `container` and also a `collection`. The container is the jQuery object where I will render the products list or *view*. The collection is a list of products or a collection of product models. Typically with an application that has some output from a server-side script a collection's data would be written into a script element (or bootstrapped) as JSON data so that an AJAX request is not necessary. In this case, I am not using any server-side scripting; so, I will need to fetch a collection (array) of products from an API. Also, I am using a [jQuery Deferred object][deferred] to indicate when the collection is ready. The function `PX.products.deferred.done` accepts functions as arguments which can be executed when the deferred object is resolved. In this example the render method is called when a list of products (collection instance) is populated with models (data).\n\nI have not created a view or a collection yet; to use this router I will need both.\n\n## The Products' View(s)\n\nI will need two types of view objects one to render the list and one for each item in the list. A Backbone view has a model instance as data; and uses a `render` method to parse the JSON data into HTML with using a template, e.g. the [Mustache library][mustachejs] provides a sweet logic-less utility to render JSON using an HTML template (see a [Mustache tutorial][mustache tutorial] with [examples][mustache examples]).\n\n**product_list_view.js**\n\n\n    PX.ProductListView = Backbone.View.extend({\n        tagName: \"ul\",\n        className: \"products\",\n        render: function () {\n            for (var i = 0; i < this.collection.length; i++) {\n                this.renderItem(this.collection.models[i]);\n            };\n            $(this.container).find(this.className).remove();\n            this.$el.appendTo(this.options.container);\n            return this;\n        },\n        renderItem: function (model) {\n            var item = new PX.ProductListItemView({\n                \"model\": model\n            });\n            item.render().$el.appendTo(this.$el);\n        }\n    });    \n\n\nThe constructor for the *product list view* above uses an (unordered list) `ul` tag and will be responsible for rendering a list of products. The render method uses an iteration over the object's `collection` to build the list of products. The render method depends on the list view object having a `collection` property. (I should have added a check during initialization and also thrown an error if the constructor is called without an option for the collection.)\n\nWhen rendering a list, the `render` method calls a `renderItem` method which renders each list item. In the method to render each `li` a variable named `item` is assigned a new `PX.ProductListItemView` instance. This *item* is constructed with a model from the products' collection. The item object is a view instance for each product in the list. Notice the reference to `this.$el`, every Backbone view object has an `el` property and also a jQuery/Zepto object `$el`. Also in the render method, the return value is `this`, which refers to the view object itself. So, when a view is rendered the element can be accessed like so `viewInstance.render().$el`. When this code is executed: `item.render().$el.appendTo(this.$el);` from within the `renderItem` method, the result of rendering the product (item) is appended to the `ul` (this.$el) element with belongs to the product list view instance object.\n\nI will need to create a view to render each item...\n\n**product_list_item_view.js**\n\n    PX.ProductListItemView = Backbone.View.extend({\n        tagName: \"li\",\n        className: \"product\",\n        initialize: function (options) {\n            this.template = $('#product-template').html();\n        },\n        render: function () {\n            var markup = Mustache.to_html(this.template, this.model.toJSON());\n            this.$el.html(markup).attr('id',this.model.get('_id'));\n            return this;\n        }\n    });\n\n\nThe *product list items'* view constructor uses a (list item) `li` tag and during initialization selects some HTML to use as an HTML template. This template will be used to render the JSON data for each product. The template HTML is found on the document within a script element, see below.\n\n**product-template.html**\n\n    <script type=\"text/template\" id=\"product-template\">\n            <p><a href=\"products/{{_id}}\">{{title}}</a></p>\n        <p>{{description}}</p>\n        <p>ID: {{_id}}</p>\n    </script>\n\n\nThe HTML template will be used to render the markup; see the code in the render method `Mustache.to_html(this.template, this.model.toJSON())`. To learn more about using Mustache, see: [mustache.js][mustachejs]. The [Underscore] library has a template rendering utility as well, I happen to like the *logic-less* library and syntax that Mustache.js provides. This demonstrates the flexibility of Backbone, I can use whatever methods I choose to render HTML. The template HTML could have been loaded using AJAX and stored as an object, in this example I used a script element. In the template there are placeholders for the JSON object's properties: `{{title}}`, `{{description}}` and `{{_id}}`. The job of the template utility is blending JSON data found in a Backbone model object with a HTML template string.\n\nThe `$el` property of the view instance object for the list item is an `li` element, which receives the `markup` as it's HTML content when the code `this.$el.html(markup)` in the render method executes. Using `this.$el` allows for chaining. So, I added an `id` property to the `li` element as well.\n\nTo learn more about [Backbone.View objects][backbone view] see the documentation.\n\nThere would be no list of products to render without a collection...\n\n## The Products' Collection\n\nThe product data exists in an (example) API and is available using a [Web service][ecomapi]; the url to fetch an array of products is '/api/products'. [Backbone collections][backbone collection] can fetch this array, then generate models to add as members of the products' collection. Below is a constructor to generate a collection of product data using an API for the data source.\n\n**product_collection.js**\n\n    PX.ProductList = Backbone.Collection.extend({\n        model: PX.Product,\n        url: '/api/products',\n        initialize: function () {\n            this.fetch({\n                success: this.fetchSuccess,\n                error: this.fetchError\n            });\n            this.deferred = new $.Deferred();\n        },\n        deferred: Function.constructor.prototype,\n        fetchSuccess: function (collection, response) {\n            collection.deferred.resolve();\n        },\n        fetchError: function (collection, response) {\n            throw new Error(\"Products fetch did get collection from API\");\n        }\n    });\n    \n    PX.products = new PX.ProductList();\n\n\nIn the `PX.ProductList` prototype there are properties for `model` and `url`. The model property has a constructor object used to generate models as members of the products collection. The url property is the web service that [Backbone.sync][backbone sync] will call to fetch the data. During initialization the product data is fetched and a `deferred` property is initialized which will be resolved during execution of the fetch success handler function. \n\nBackbone wraps the AJAX success and error handlers and calls the handlers sent following the fetch call. When Backbone calls either handler, two arguments are passed `collection` and `response`. In this example, the `fetchSuccess` method resolves the collection's deferred object and the `fetchError` method throws an error. \n\nWhen the router fires the method to `listProducts` the collections' deferred object is used to render the list when the deferred is done (resolved). See the router code `PX.products.deferred.done`; which takes an anonymous function to call the list view's render method, `productsList.render();`.\n\nThe collection cannot generate a list of products without a model constructor...\n\n## The Product Model\n\n**product_model.js**\n\n    // model\n    PX.Product = Backbone.Model.extend({\n        defaults: {\n            title: null,\n            description: null\n        }\n    });    \n\n\nThis [Backbone.Model][backbone model] is very simple, it has some defaults defined on it's prototype object: `title` and `description`. The API has a much more data in each product document. However, the purpose of this tutorial is to demonstrate generating a list of products; these two properties do for now. Each model that the collection adds will have all the data provided by the Web service. The List view instance also uses the model instance to get JSON data when rendering each list item. The model object has a method to get the data as an object `.toJSON()` which is not stringified but rather a JavaScript object. The model's data is stored on a property of the model instance named `attributes`. To learn more about [Backbone.Model][backbone model] see the documentation.\n\nAll these objects work together to provide a representation of the API data in the format specified using the template and the view instance objects to present HTML within the browser. The server is only providing data as JSON objects. All the HTML rendering is done on the client-side. \n\nSo to kick off the application we need to create an instance of the router and start Backbone.history ...\n\n## Bootstrap the Application\n\n**bootstrap.js**\n\n    // bootstrap\n    PX.app = new PX.App();\n    Backbone.history.start();\n\n\n`new PX.App()` returns the instance of the router and `Backbone.history.start()` handles monitoring of the hashchange or HTML5 pushState. When a route is matched in the URL e.g. /#list the assigned function is called to handler the route's behavior. For a demo, see the example API page at [http://ecomapi.herokuapp.com/#list][ecomapi list] (look under the heading 'Product List' you can reset the data with the button 'Add product fixtures'). \n\nSee the [Backbone.history documentation][backbone history] for more info.\n\n## Post Hoc\n\nThis tutorial walks through development using the core components that Backbone provides; as stated in the Backbone documentation, giving *structure* to a web application. There are more than a few ways to do this same job of rendering a list of products with JSON data. Perhaps event a single AJAX call using a success handler and some DOM manipulation with jQuery. However, without structure in a web application, the task of managing code as the application's life matures and grows (well into a beast) can become a fairly difficult. Backbone provides simple structure and still allows the developer to decide how to organize code, and which utilities to add. I like to use jQuery, Mustache and RequireJS as well, Backbone does not get in the way. See a [sample application][app-boilerplate] using these libraries. I used this sample application to test the file structure and build process when planning development for a fairly complex application.\n\nPerhaps you can continue building upon this tutorial and generate a route to view product details. Also, if you have not already read the first article in this series, you can build your own development API as well - [Develop a RESTful API Using Node.js With Express and Mongoose][productsapi].\n\nIn the next post I plan to take a second look at this same code; but instead, walk though the process of using [Jasmine][jasmine], a behavior-driven development framework, to discover the implementation. This tutorial is structured in the same way I would approach writing tests, sort of a top-down approach beginning with the router instance.\n\n## Reference\n\n* Gist: [Product API example using Backbone.js Models, Views and Collections][backbone product list gist]  \n* API tutorial: [Develop a RESTful API Using Node.js With Express and Mongoose][productsapi]  \n* [Sample API with list generated using code in this tutorial][ecomapi list]  \n* [Backbone documentation][backbone]  \n* [Underscore documentation][underscore]  \n* Framework for API: [Express, a node package for developing node.js apps][expressjs]  \n* [hashchange][hashchange] | HTML5 [pushState][pushState]  \n* [Mustache examples][mustache examples] | [Mustache tutorial][mustache tutorial]  \n* [Example application structure with RequireJS and Backbone.js][app-boilerplate]  \n\n[backbone product list gist]: https://gist.github.com/1912291 \"Product API example using Backbone.js Models, Views and Collections\"\n\n[productsapi]: http://pixelhandler.com/blog/2012/02/09/develop-a-restful-api-using-node-js-with-express-and-mongoose/ \"Develop a RESTful API Using Node.js With Express and Mongoose\"\n\n[app-boilerplate]: https://github.com/pixelhandler/vertebrae \"Example application structure with RequireJS and Backbone.js\"\n\n[backbone]: http://documentcloud.github.com/backbone/ \"Backbone.js\"\n[backbone model]: http://documentcloud.github.com/backbone/#Model \"Backbone.Model\"\n[backbone collection]: http://documentcloud.github.com/backbone/#Collection \"Backbone.Collection\"\n[backbone view]: http://documentcloud.github.com/backbone/#View \"Backbone.View\"\n[backbone history]: http://documentcloud.github.com/backbone/#History \"Backbone History\"\n[backbone sync]: http://documentcloud.github.com/backbone/#Sync \"Backbone.sync\"\n[backbone router]: http://documentcloud.github.com/backbone/#Router \"Backbone.Router\"\n\n[deferred]: http://api.jquery.com/category/deferred-object/ \"utility object that can register multiple callbacks into callback queues\"\n\n[ecomapi]: http://ecomapi.herokuapp.com/ \"Web Service\"\n[ecomapi list]: http://ecomapi.herokuapp.com/#list \"Backbone List of Products generated with API data\"\n\n[expressjs]: http://expressjs.com/ \"High performance, high class Web development for Node.js\"\n\n[hashchange]: http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#event-hashchange \"hashchange\"\n\n[jasmine]: http://pivotal.github.com/jasmine/ \"Jasmine is a behavior-driven development framework\"\n\n[json]: http://www.json.org/ \"JSON\"\n\n[mongodb]: http://www.mongodb.org/ \"MongoDB (from 'humongous') - Document-oriented storage\"\n\n[mongoosejs]: http://mongoosejs.com/ \"Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\"\n\n[mustachejs]: https://github.com/janl/mustache.js/ \"Minimal templating with {{mustaches}} in JavaScript\"\n\n[mustache examples]: http://coenraets.org/tutorials/mustache/ \"example code using Mustache\"\n\n[mustache tutorial]: http://coenraets.org/blog/2011/12/tutorial-html-templates-with-mustache-js/ \"Tutorial: HTML Templates with Mustache.js\"\n\n[node]: http://nodejs.org/ \"Node.js\"\n\n[pushState]: https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history \"Manipulating the browser history\"\n\n[rest]: http://en.wikipedia.org/wiki/Representational_state_transfer \"Representational state transfer\"\n\n[underscore]: http://documentcloud.github.com/underscore/ \"Underscore is a utility-belt library for JavaScript\"",
  "date": "2012-02-29T00:00:00.000Z",
  "excerpt": "This tutorial explores coding with [Backbone.js][backbone] using data stored in an API. The code developed will interact with an API as described in the earlier post : [Develop a RESTful API Using Node.js With Express and Mongoose][productsapi]. This article is the second tutorial in a series on the topic building an online store using [REST][rest]. Previously, I explored creating an API with [Node.js][node], [Express][expressjs], [MongoDB][mongodb], and [Mongoose][mongoosejs]. In this article I demonstrate an overview of coding a front-end interface for a data-driven application using Backbone.\n\nBackbone organizes code objects for [Models][backbone model], [Collections][backbone collection], [Views][backbone view], [Routers][backbone router] and uses a [sync][backbone sync] object to interact with an API. I will use these constructors to build a list of projects from objects stored as documents in a database ([MongoDB][mongodb]) . The API built in the previous tutorial facilitates development with an actual [web service][ecomapi] rather than mocking JSON data in a flat file.\n\nFor the purpose of getting to know Backbone, the use case that I will focus on is listing products consumed via [JSON][json] data from a web service. Each product in the list represents data found in a *model*. The product list represents a *collection* of (product) models. The HTML is generated using a *view* which renders data - blending the model's JSON data with a template. Finally a *route* triggers the asynchronous process of fetching data and rendering the product list by listening for a [hashchange][hashchange] or using [pushState][pushState]. These are the core components that Backbone provides.\n\n[backbone]: http://documentcloud.github.com/backbone/ \"Backbone.js\"\n[backbone model]: http://documentcloud.github.com/backbone/#Model \"Backbone.Model\"\n[backbone collection]: http://documentcloud.github.com/backbone/#Collection \"Backbone.Collection\"\n[backbone view]: http://documentcloud.github.com/backbone/#View \"Backbone.View\"\n[backbone history]: http://documentcloud.github.com/backbone/#History \"Backbone History\"\n[backbone sync]: http://documentcloud.github.com/backbone/#Sync \"Backbone.sync\"\n[backbone router]: http://documentcloud.github.com/backbone/#Router \"Backbone.Router\"\n[productsapi]: http://pixelhandler.com/posts/develop-a-restful-api-using-nodejs-with-express-and-mongoose \"Develop a RESTful API Using Node.js With Express and Mongoose\"\n[rest]: http://en.wikipedia.org/wiki/Representational_state_transfer \"Representational state transfer\"\n[expressjs]: http://expressjs.com/ \"High performance, high class Web development for Node.js\"\n[mongodb]: http://www.mongodb.org/ \"MongoDB (from 'humongous') - Document-oriented storage\"\n[mongoosejs]: http://mongoosejs.com/ \"Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\"\n[ecomapi]: http://ecomapi.herokuapp.com/ \"Web Service\"\n[json]: http://www.json.org/ \"JSON\"\n[node]: http://nodejs.org/ \"Node.js\"\n[pushState]: https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history \"Manipulating the browser history\"\n[hashchange]: http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#event-hashchange \"hashchange\"",
  "id": "ee9262da-2d89-4e73-86bc-2301deee859d",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "backbonejs-models-views-and-collections-to-present-api-data",
  "title": "Backbone.js Models, Views and Collections to Present API Data"
},
{
  "body": "### Nouns\n\n#### Products\n\nThere a many configurations for setting up a product to sell online, some with no options, with multiple configurable options, or groups of products. For this example I will use one of my favorite things, a *t-shirt*. This type of product can be configured with size and color options, e.g. Black - Large, or Red - Medium; specific material variations would be represented as separate products, like long- vs. short-sleeves.\n\n**Product** attributes include:\n\n    Id,  \n    Title,  \n    Description,  \n    Images: [ { Kind, URL } ],  \n    Categories: [ { Name } ],  \n    Style: Number,  \n    Varients: [  \n      {  \n        Color,  \n        Images: [  \n          { Kind, URL }  \n        ],  \n        Sizes: [  \n          { Size, Available, SKU, Price }  \n        ],  \n      }  \n    ]\n\n**[JSON][json]** data may be represented like so:\n\n    \n    {  \n      \"title\": \"My Awesome T-shirt\",  \n      \"description\": \"All about the details. Of course it's black.\",  \n      \"images\": [  \n        {  \n          \"kind\": \"thumbnail\",  \n          \"url\": \"images/products/1234/main.jpg\"  \n        }  \n      ],  \n      \"categories\": [  \n          { \"name\": \"Clothes\" },  \n          { \"name\": \"Shirts\" }  \n      ],  \n      \"style\": \"1234\",  \n      \"variants\": [  \n        {  \n          \"color\": \"Black\",  \n          \"images\": [  \n            {  \n              \"kind\": \"thumbnail\",  \n              \"url\": \"images/products/1234/thumbnail.jpg\"  \n            },  \n            {  \n              \"kind\": \"catalog\",  \n              \"url\": \"images/products/1234/black.jpg\"  \n            }  \n          ],  \n          \"sizes\": [  \n            {  \n              \"size\": \"S\",  \n              \"available\": 10,  \n              \"sku\": \"CAT-1234-Blk-S\",  \n              \"price\": 99.99  \n            },  \n            {  \n              \"size\": \"M\",  \n              \"available\": 7,  \n              \"sku\": \"CAT-1234-Blk-M\",  \n              \"price\": 109.99  \n            }  \n          ]  \n        }  \n      ],  \n      \"catalogs\": [  \n          { \"name\": \"Apparel\" }  \n      ]  \n    }\n\n\nThe above object has a variety of types composing a document that should bring up some challenges in learning how to store and update the document in a [MongoDB][mongodb] database. The first thing I needed to do was install MongoDB (see the [quickstart guide][mongoquickstart]). To get to know the database I [tried out using Mongo in the console][try mongodb]. \n\nI'll need to define the [Web service][web service] urls to interact with the data via REST like so...\n\n* /products *- list*  \n* /products/:id *- single*  \n\n\n### Data: MongoDB using [Mongoose][mongoosejs] with [Express framework][expressjs] running on Node.js\n\nFor installation of Node.js, NPM, and Express see:\n\n* [Installing Node.js][install node]  \n* [npm is a package manager for node.][install npm]  \n  * [npm install express][install express]  \n\nAlso there are plenty of links at the end of the article to learn about this stack.\n\nWorking with data using the Mongoose package in node, I will need to research storing JSON documents. The Mongoose documentation outlines the use of [schema types][schema types] and [embedded documents][embedded documents]; so these can be integrated into a product [model][mongoosejs model] to store the product JSON above. Models are defined by passing a Schema instance to [mongoose.model][mongoosejs model].\n\n#### A Node App Running Express to Access Data using a RESTful Web Service\n\nI found that a section of '[Backbone Fundamentals][node-express-mongodb]' has an example application which is built using this same stack : Node.js, Express, Mongoose and MongoDB. I reviewed the example methods to GET, POST, PUT and DELETE. Then I got started with an instance of the `express.HTTPServer`.\n\nI created a file `app.js` and added the following JavaScript code:\n\n    \n    var application_root = __dirname,\n        express = require(\"express\"),\n        path = require(\"path\"),\n        mongoose = require('mongoose');\n\n    var app = express.createServer();\n\n    // Database\n\n    mongoose.connect('mongodb://localhost/ecomm_database');\n\n    // Config\n\n    app.configure(function () {\n      app.use(express.bodyParser());\n      app.use(express.methodOverride());\n      app.use(app.router);\n      app.use(express.static(path.join(application_root, \"public\")));\n      app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));\n    });\n\n    app.get('/api', function (req, res) {\n      res.send('Ecomm API is running');\n    });\n\n    // Launch server\n\n    app.listen(4242);\n\n\nIn the above code, the line beginning with `var` loads the modules needed for the API, and `app = express.createServer()` creates the Web server. The Web server can also serve static files in a `public` directory, the line in the configure block `app.use(express.static(path.join(application_root, \"public\")));` sets up the public directory to use static files. The code,  `mongoose.connect('mongodb://localhost/ecomm_database');`, hooks up the database. All I needed to do is name the database, in this example I used the name: 'ecomm_database'. With MongoDB is setup and running, the actual database is automatically generated. To run `mongod`, on the command line I needed to execute the command: \n\n    mongod run --config /usr/local/Cellar/mongodb/2.0.1-x86_64/mongod.conf  \n\nSince I installed MongoGB on OSX Lion, the above command was printed out following the installation on my MacBook.\n\nThe code `app.listen(4242);` sets up the server to respond to the URL: *http://localhost:4242*. Once *mongod* is running, to start up the server genereated with the app.js file... I executed `node app.js` on the command line.\n\nNow, I have a folder named 'ecomapi' and inside this directory is the 'app.js' file and a directory named 'public' which has an 'index.html' file. With the static index.html file I can load the data using jQuery which I am linking to on a CDN. Later I will be able to try out AJAX calls to create products using my browser's JavaScript console.\n\n    ecomapi\n    |-- app.js  \n    `-- public  \n        `-- index.html  \n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\">\n        <title>API index</title>\n      </head>\n      <body>\n        <section>\n          <h1>Nouns...</h1>\n          <p>\n            /products<br>\n            /products/:id\n          </p>\n        </section>\n        <script src=\"http://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.1/jquery.min.js\"></script>\n      </body>\n    </html>\n\nIn my browser I can load http://localhost:4242 and see that the static index.html file loads and also hitting http://localhost:4242/api spits out some text 'Ecomm API is running', which is the result of the get response:\n\n    app.get('/api', function (req, res) {  \n      res.send('Ecomm API is running');  \n    });  \n\nUp to this point we have a simple server with a single get response, next I can add in the data models and REST services.\n\n#### Setup a Simple Model Using CRUD (create, read, update, delete)\n\nFollowing the `app.configure` code block, in the *app.js*, I added a Schema and a Product Model:\n\n    var Schema = mongoose.Schema;  \n      \n    var Product = new Schema({  \n        title: { type: String, required: true },  \n        description: { type: String, required: true },  \n        style: { type: String, unique: true },  \n        modified: { type: Date, default: Date.now }\n    });\n\nSince I still needed to learn how to use the [schema types][schema types] and [embedded documents][embedded documents] that come with [mongoose][mongoosejs], I didn't add the price yet which should be set on a combination of color and size.\n\nTo use the model I created a variable `ProductModel`:\n\n    var ProductModel = mongoose.model('Product', Product);  \n\nNow I can add the CRUD methods:\n\n##### READ a List of Products\n\n    \n    app.get('/api/products', function (req, res){\n      return ProductModel.find(function (err, products) {\n        if (!err) {\n          return res.send(products);\n        } else {\n          return console.log(err);\n        }\n      });\n    });\n\n\n##### CREATE a Single Product\n\n\n    app.post('/api/products', function (req, res){\n      var product;\n      console.log(\"POST: \");\n      console.log(req.body);\n      product = new ProductModel({\n        title: req.body.title,\n        description: req.body.description,\n        style: req.body.style,\n      });\n      product.save(function (err) {\n        if (!err) {\n          return console.log(\"created\");\n        } else {\n          return console.log(err);\n        }\n      });\n      return res.send(product);\n    });\n\n\n##### READ a Single Product by ID\n\n\n    app.get('/api/products/:id', function (req, res){\n      return ProductModel.findById(req.params.id, function (err, product) {\n        if (!err) {\n          return res.send(product);\n        } else {\n          return console.log(err);\n        }\n      });\n    });\n\n\n##### UPDATE a Single Product by ID\n\n    \n    app.put('/api/products/:id', function (req, res){\n      return ProductModel.findById(req.params.id, function (err, product) {\n        product.title = req.body.title;\n        product.description = req.body.description;\n        product.style = req.body.style;\n        return product.save(function (err) {\n          if (!err) {\n            console.log(\"updated\");\n          } else {\n            console.log(err);\n          }\n          return res.send(product);\n        });\n      });\n    });\n\n\n##### DELETE a Single Product by ID\n\n    \n    app.delete('/api/products/:id', function (req, res){\n      return ProductModel.findById(req.params.id, function (err, product) {\n        return product.remove(function (err) {\n          if (!err) {\n            console.log(\"removed\");\n            return res.send('');\n          } else {\n            console.log(err);\n          }\n        });\n      });\n    });\n\n\n*NOTE: To exit your running app.js job, press `control-c` then re-start your updated app.js using the same command as before: node app.js* \n\nWith the new **product model** and **CRUD methods** serving up a RESTful service at *http://localhost:4242/api* I can utilize the index.html (with jQuery)... and in my browser's console I can fiddle with my new Web service using jQuery's AJAX methods. Specifically, by loading http://localhost:4242/ and executing commands in the JavaScript console I can using ($.ajax) POST to create a new product.\n\n    \n    jQuery.post(\"/api/products\", {\n      \"title\": \"My Awesome T-shirt\",  \n      \"description\": \"All about the details. Of course it's black.\",  \n      \"style\": \"12345\"\n    }, function (data, textStatus, jqXHR) { \n        console.log(\"Post resposne:\"); console.dir(data); console.log(textStatus); console.dir(jqXHR); \n    });\n\n\nThe post response is something like:\n\n    _id: \"4f34d8e7f05ebf212b000004\"  \n    description: \"All about the details. Of course it's black.\"  \n    modified: \"2012-02-10T08:44:23.372Z\"  \n    style: \"12345\"  \n    title: \"My Awesome T-shirt\"\n\nThe `_id` property was added automatically, this value can be used to UPDATE, READ, or DELETE the record. Notice all the `console.log()` and `console.dir()` calls I added within the anonymous functions' '*success*' callbacks. With the logging in place, I can inspect the server's response in the console or by viewing the responses on in network tab of my browser's developer tools.\n\nTo READ the product data I just created, I execute the following code in my browser's JavaScript console:\n\n\n    jQuery.get(\"/api/products/\", function (data, textStatus, jqXHR) { \n        console.log(\"Get resposne:\"); \n        console.dir(data); \n        console.log(textStatus); \n        console.dir(jqXHR); \n    });\n\n\nThe above GET request reads *all products*; to read a specific product add the ID to the URL like so:\n\n\n    jQuery.get(\"/api/products/4f34d8e7f05ebf212b000004\", function(data, textStatus, jqXHR) { \n        console.log(\"Get resposne:\"); \n        console.dir(data); \n        console.log(textStatus); \n        console.dir(jqXHR); \n    });\n\n\nTo test the UPDATE request use PUT:\n\n\n    jQuery.ajax({\n        url: \"/api/products/4f34d8e7f05ebf212b000004\", \n        type: \"PUT\",\n        data: {\n          \"title\": \"My Awesome T-shirt in Black\",  \n          \"description\": \"All about the details. Of course it's black, and long sleeve\",  \n          \"style\": \"12345\"\n        }, \n        success: function (data, textStatus, jqXHR) { \n            console.log(\"Post resposne:\"); \n            console.dir(data); \n            console.log(textStatus); \n            console.dir(jqXHR); \n        }\n    });\n\n\nThe above code is about the same as the the previous code I used to create the product document and store in MongoDB. However, I appended the product's description with the text: 'black, and long sleeve'.\n\nNow, when I get the product by ID, I see the updated text added to the product description:\n\n    jQuery.get(\"/api/products/4f34d8e7f05ebf212b000004\");  \n    \nOr I can visit : http://localhost:4242/api/products/4f34d8e7f05ebf212b000004 to see the text response only.\n\nI can also DELETE the product:  \n\n    jQuery.ajax({\n        url: \"/api/products/4f34d8e7f05ebf212b000004\", \n        type: \"DELETE\",\n        success: function (data, textStatus, jqXHR) { \n            console.log(\"Post resposne:\"); \n            console.dir(data); \n            console.log(textStatus); \n            console.dir(jqXHR); \n        }\n    });\n\nNow when I load http://localhost:4242/api/products/4f34d8e7f05ebf212b000004 the server response with a `null` response\n\n*TIP: I am using a log of console.log() and console.dir() calls within the success (anonymous) functions to view the responses from the server.*\n\n\n#### Embedded Documents for the Remaining Product Attributes\n\nI am now adding a few items to the product model: *images, categories, catalogs, variants*. A t-shirt product may have many variants with size and color options; the pricing should be configured by the combination of: the selected size option which belongs to a selected color option. The product may belong one or more product catalogs, and also should have one or more associated categories.\n\n\n    // Product Model\n\n    var Product = new Schema({\n        title: { type: String, required: true },\n        description: { type: String, required: true },\n        style: { type: String, unique: true },\n        images: [Images],\n        categories: [Categories],\n        catalogs: [Catalogs],\n        variants: [Variants],\n        modified: { type: Date, default: Date.now }\n    });\n\n\nThe [embedded documents][embedded documents] are in square brackets (above) in the product model. I referenced the [Mongoose][mongoosejs] documentation to learn how to assemble this model with embedded documents.\n\nBelow are the schema assignments that together assemble the product document to store in MongoDB. My strategy is adding one embedded document at time and updating each the CREATE and UPDATE methods, stopping and restarting the application (`control-c` then `node app.js`) with each iteration. And working out the additional code by fiddling with the same jQuery `$.ajax` requests, but also adding the single attribute(s) added to the `post` data to create a new product document in the db.\n\n\n    // Schemas\n\n    var Sizes = new Schema({\n        size: { type: String, required: true },\n        available: { type: Number, required: true, min: 0, max: 1000 },\n        sku: { \n            type: String, \n            required: true, \n            validate: [/[a-zA-Z0-9]/, 'Product sku should only have letters and numbers']\n        },\n        price: { type: Number, required: true, min: 0 }\n    });\n\n    var Images = new Schema({\n        kind: { \n            type: String, \n            enum: ['thumbnail', 'catalog', 'detail', 'zoom'],\n            required: true\n        },\n        url: { type: String, required: true }\n    });\n\n    var Variants = new Schema({\n        color: String,\n        images: [Images],\n        sizes: [Sizes]\n    });\n\n    var Categories = new Schema({\n        name: String\n    });\n\n    var Catalogs = new Schema({\n        name: String\n    });\n\n\nFor example, I first added the `[Images]` embedded docuemnt to my product model and tested out the application by updated the AJAX post which creates the product using the same post as before but with an array of objects with the image attributes for `kind` and `url`, see below:\n\n\n    var Images = new Schema({ \n        kind: String, \n        url: String\n    });\n\n    var Product = new Schema({\n        title: { type: String, required: true },\n        description: { type: String, required: true },\n        style: { type: String, unique: true },\n        images: [Images],\n        modified: { type: Date, default: Date.now }\n    });\n\n\nI also updated the CREATE *(POST)* and UPDATE *(PUT)* methods, adding the references to the images attribute (an embedded document) of the product model.\n\n\n    // CREATE a product\n\n    app.post('/api/products', function(req, res){\n      var product;\n      console.log(\"POST: \");\n      console.log(req.body);\n      product = new ProductModel({\n        title: req.body.title,\n        description: req.body.description,\n        style: req.body.style,\n        images: [Images]\n      });\n      product.save(function(err) {\n        if (!err) {\n          return console.log(\"created\");\n        } else {\n          return console.log(err);\n        }\n      });\n      return res.send(product);\n    });\n\n\n\n    // UPDATE a single product\n\n    app.put('/api/products/:id', function(req, res){\n      return ProductModel.findById(req.params.id, function(err, product) {\n        product.title = req.body.title;\n        product.description = req.body.description;\n        product.style = req.body.style;\n        product.images = req.body.images;\n        return product.save(function(err) {\n          if (!err) {\n            console.log(\"updated\");\n          } else {\n            console.log(err);\n          }\n          return res.send(product);\n        });\n      });\n    });\n\n\nThen I worked out the adding the image(s) data to my post that creates a product in the database; addming the images data array with an object like so:\n\n\n    jQuery.post(\"/api/products\", {\n      \"title\": \"My Awesome T-shirt\",  \n      \"description\": \"All about the details. Of course it's black.\",  \n      \"style\": \"1234\",\n      \"images\": [  \n        {  \n          \"kind\": \"thumbnail\",  \n          \"url\": \"images/products/1234/main.jpg\"  \n        }  \n      ]\n    }, function(data, textStatus, jqXHR) { \n        console.log(\"Post resposne:\"); console.dir(data); console.log(textStatus); console.dir(jqXHR); \n    });\n\n\nOn my first of attempt of adding multiple documents to the product model, I did get errors and the server's create action failed. However, my terminal (shell) does report the errors - the app.js file uses the code `app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));` to setup the display of errors on the command line. Also, I added some console.log calls in the post action to log the request pluse notes on the execution of saving the document. On both the browser and on the command line, all the logging indicates whether I am building the product model (using Mongoose) properly. This attempt to add the images did not save. I am not sure why, but I switched over to adding a [Categories] embedded docuemnt, then worked my way toward a completed product model with an API to CREATE, UPDATE and DELETE a single product at a time and to READ a single product or list of products in an array.\n\nAfter debugging the embedded documents I added for the product models attribtues... now I can create the complete product in a post:\n\n\n    jQuery.post(\"/api/products\", {\n      \"title\": \"My Awesome T-shirt\",  \n      \"description\": \"All about the details. Of course it's black.\",  \n      \"images\": [  \n        {  \n          \"kind\": \"thumbnail\",  \n          \"url\": \"images/products/1234/main.jpg\"  \n        }  \n      ],  \n      \"categories\": [  \n          { \"name\": \"Clothes\" },\n          { \"name\": \"Shirts\" } \n      ],  \n      \"style\": \"1234\",  \n      \"variants\": [  \n        {  \n          \"color\": \"Black\",  \n          \"images\": [  \n            {  \n              \"kind\": \"thumbnail\",  \n              \"url\": \"images/products/1234/thumbnail.jpg\"  \n            },\n            {  \n              \"kind\": \"catalog\",  \n              \"url\": \"images/products/1234/black.jpg\"  \n            }  \n          ],  \n          \"sizes\": [  \n            {  \n              \"size\": \"S\",  \n              \"available\": 10,  \n              \"sku\": \"CAT-1234-Blk-S\",  \n              \"price\": 99.99  \n            },\n            {\n              \"size\": \"M\",  \n              \"available\": 7,  \n              \"sku\": \"CAT-1234-Blk-M\",  \n              \"price\": 109.99  \n            }  \n          ]  \n        }  \n      ],\n      \"catalogs\": [\n          { \"name\": \"Apparel\" }\n      ]  \n    }, function(data, textStatus, jqXHR) { \n        console.log(\"Post resposne:\"); console.dir(data); console.log(textStatus); console.dir(jqXHR); \n    });\n\n\nAnd from the node console (shell) I get this output:\n\n    POST:  \n    { title: 'My Awesome T-shirt',  \n      description: 'All about the details. Of course it\\'s black.',  \n      images: [ { kind: 'thumbnail', url: 'images/products/1234/main.jpg' } ],  \n      categories: [ { name: 'Clothes' }, { name: 'Shirts' } ],  \n      style: '1234',  \n      varients: [ { color: 'Black', images: [Object], sizes: [Object] } ],  \n      catalogs: [ { name: 'Apparel' } ] }  \n    validate style  \n    1234  \n    validate description  \n    All about the details. Of course it's black.  \n    validate title  \n    My Awesome T-shirt  \n    created  \n\nIn my browser this looks like these two screenshot:\n\nReady to post using the console…\n\n![jQUery post in console](http://pixelhandler.com/images/products-post.png)\n\nServer response in the network tab…\n\n![network tab in browser](http://pixelhandler.com/images/server-response.png)\n\n#### Bulk Actions for UPDATE and DELETE\n\nFinally to finish up the actions needed in the design for the products web service I added the **bulk** actions to remove all products at once and also to update many products in a PUT request. \n\n\n    app.delete('/api/products', function (req, res) {\n      ProductModel.remove(function (err) {\n        if (!err) {\n          console.log(\"removed\");\n          return res.send('');\n        } else {\n          console.log(err);\n        }\n      });\n    });\n\n\n\n    app.put('/api/products', function (req, res) {\n        var i, len = 0;\n        console.log(\"is Array req.body.products\");\n        console.log(Array.isArray(req.body.products));\n        console.log(\"PUT: (products)\");\n        console.log(req.body.products);\n        if (Array.isArray(req.body.products)) {\n            len = req.body.products.length;\n        }\n        for (i = 0; i < len; i++) {\n            console.log(\"UPDATE product by id:\");\n            for (var id in req.body.products[i]) {\n                console.log(id);\n            }\n            ProductModel.update({ \"_id\": id }, req.body.products[i][id], function (err, numAffected) {\n                if (err) {\n                    console.log(\"Error on update\");\n                    console.log(err);\n                } else {\n                    console.log(\"updated num: \" + numAffected);\n                }\n            });\n        }\n        return res.send(req.body.products);\n    });\n\n\nSee the [Gist][gist-ecomapi] links that follow for sample scripts to create many products (fixtures) and also the bulk update with single AJAX PUT request.\n\n### The app.js, index.html and jQuery AJAX snippets developed in this tutorial\n\n**The Source Code for This Tutorial is on GitHub as a Gist:**\n\n* [Develop a RESTful API Using Node.js With Express and Mongoose][gist-ecomapi]\n* [Fixtures - example AJAX posts to create products][gist-ecomapi-fixture]\n* [Sample script for bulk update of products][gist-ecomapi-updates]\n\nThe application file:\n\n    \n    var application_root = __dirname,\n        express = require(\"express\"),\n        path = require(\"path\"),\n        mongoose = require('mongoose');\n    \n    var app = express.createServer();\n    \n    // database\n    \n    mongoose.connect('mongodb://localhost/ecomm_database');\n    \n    // config\n    \n    app.configure(function () {\n      app.use(express.bodyParser());\n      app.use(express.methodOverride());\n      app.use(app.router);\n      app.use(express.static(path.join(application_root, \"public\")));\n      app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));\n    });\n    \n    var Schema = mongoose.Schema; //Schema.ObjectId\n    \n    // Schemas\n    \n    var Sizes = new Schema({\n        size: { type: String, required: true },\n        available: { type: Number, required: true, min: 0, max: 1000 },\n        sku: { \n            type: String, \n            required: true, \n            validate: [/[a-zA-Z0-9]/, 'Product sku should only have letters and numbers']\n        },\n        price: { type: Number, required: true, min: 0 }\n    });\n    \n    var Images = new Schema({\n        kind: { \n            type: String, \n            enum: ['thumbnail', 'catalog', 'detail', 'zoom'],\n            required: true\n        },\n        url: { type: String, required: true }\n    });\n    \n    var Variants = new Schema({\n        color: String,\n        images: [Images],\n        sizes: [Sizes]\n    });\n    \n    var Categories = new Schema({\n        name: String\n    });\n    \n    var Catalogs = new Schema({\n        name: String\n    });\n    \n    // Product Model\n    \n    var Product = new Schema({\n        title: { type: String, required: true },\n        description: { type: String, required: true },\n        style: { type: String, unique: true },\n        images: [Images],\n        categories: [Categories],\n        catalogs: [Catalogs],\n        variants: [Variants],\n        modified: { type: Date, default: Date.now }\n    });\n    \n    // validation\n    \n    Product.path('title').validate(function (v) {\n        console.log(\"validate title\");\n        console.log(v);\n        return v.length > 10 && v.length < 70;\n    });\n    \n    Product.path('style').validate(function (v) {\n        console.log(\"validate style\");\n        console.log(v);\n        return v.length < 40;\n    }, 'Product style attribute is should be less than 40 characters');\n    \n    Product.path('description').validate(function (v) {\n        console.log(\"validate description\");\n        console.log(v);\n        return v.length > 10;\n    }, 'Product description should be more than 10 characters');\n    \n    var ProductModel = mongoose.model('Product', Product);\n    \n    /* Product Document \n    [\n    {  \n      \"title\": \"My Awesome T-shirt\",  \n      \"description\": \"All about the details. Of course it's black.\",  \n      \"images\": [  \n        {  \n          \"kind\": \"thumbnail\",  \n          \"url\": \"images/products/1234/main.jpg\"  \n        }  \n      ],  \n      \"categories\": [  \n          { \"name\": \"Clothes\" },  \n          { \"name\": \"Shirts\" }  \n      ],  \n      \"style\": \"1234\",  \n      \"variants\": [  \n        {  \n          \"color\": \"Black\",  \n          \"images\": [  \n            {  \n              \"kind\": \"thumbnail\",  \n              \"url\": \"images/products/1234/thumbnail.jpg\"  \n            },  \n            {  \n              \"kind\": \"catalog\",  \n              \"url\": \"images/products/1234/black.jpg\"  \n            }  \n          ],  \n          \"sizes\": [  \n            {  \n              \"size\": \"S\",  \n              \"available\": 10,  \n              \"sku\": \"CAT-1234-Blk-S\",  \n              \"price\": 99.99  \n            },  \n            {  \n              \"size\": \"M\",  \n              \"available\": 7,  \n              \"sku\": \"CAT-1234-Blk-M\",  \n              \"price\": 109.99  \n            }  \n          ]  \n        }  \n      ],  \n      \"catalogs\": [  \n          { \"name\": \"Apparel\" }  \n      ]  \n    }\n    ]\n    */\n    \n    \n    // REST api\n    \n    app.get('/api', function (req, res) {\n      res.send('Ecomm API is running');\n    });\n    \n    // POST to CREATE\n    app.post('/api/products', function (req, res) {\n      var product;\n      console.log(\"POST: \");\n      console.log(req.body);\n      product = new ProductModel({\n        title: req.body.title,\n        description: req.body.description,\n        style: req.body.style,\n        images: req.body.images,\n        categories: req.body.categories,\n        catalogs: req.body.catalogs,\n        variants: req.body.variants\n      });\n      product.save(function (err) {\n        if (!err) {\n          return console.log(\"created\");\n        } else {\n          return console.log(err);\n        }\n      });\n      return res.send(product);\n    });\n    \n    // PUT to UPDATE\n    \n    // Bulk update\n    app.put('/api/products', function (req, res) {\n        var i, len = 0;\n        console.log(\"is Array req.body.products\");\n        console.log(Array.isArray(req.body.products));\n        console.log(\"PUT: (products)\");\n        console.log(req.body.products);\n        if (Array.isArray(req.body.products)) {\n            len = req.body.products.length;\n        }\n        for (i = 0; i < len; i++) {\n            console.log(\"UPDATE product by id:\");\n            for (var id in req.body.products[i]) {\n                console.log(id);\n            }\n            ProductModel.update({ \"_id\": id }, req.body.products[i][id], function (err, numAffected) {\n                if (err) {\n                    console.log(\"Error on update\");\n                    console.log(err);\n                } else {\n                    console.log(\"updated num: \" + numAffected);\n                }\n            });\n        }\n        return res.send(req.body.products);\n    });\n    \n    // Single update\n    app.put('/api/products/:id', function (req, res) {\n      return ProductModel.findById(req.params.id, function (err, product) {\n        product.title = req.body.title;\n        product.description = req.body.description;\n        product.style = req.body.style;\n        product.images = req.body.images;\n        product.categories = req.body.categories;\n        product.catalogs = req.body.catalogs;\n        product.variants = req.body.variants;\n        return product.save(function (err) {\n          if (!err) {\n            console.log(\"updated\");\n          } else {\n            console.log(err);\n          }\n          return res.send(product);\n        });\n      });\n    });\n    \n    // GET to READ\n    \n    // List products\n    app.get('/api/products', function (req, res) {\n      return ProductModel.find(function (err, products) {\n        if (!err) {\n          return res.send(products);\n        } else {\n          return console.log(err);\n        }\n      });\n    });\n    \n    // Single product\n    app.get('/api/products/:id', function (req, res) {\n      return ProductModel.findById(req.params.id, function (err, product) {\n        if (!err) {\n          return res.send(product);\n        } else {\n          return console.log(err);\n        }\n      });\n    });\n    \n    // DELETE to DESTROY\n    \n    // Bulk destroy all products\n    app.delete('/api/products', function (req, res) {\n      ProductModel.remove(function (err) {\n        if (!err) {\n          console.log(\"removed\");\n          return res.send('');\n        } else {\n          console.log(err);\n        }\n      });\n    });\n    \n    // remove a single product\n    app.delete('/api/products/:id', function (req, res) {\n      return ProductModel.findById(req.params.id, function (err, product) {\n        return product.remove(function (err) {\n          if (!err) {\n            console.log(\"removed\");\n            return res.send('');\n          } else {\n            console.log(err);\n          }\n        });\n      });\n    });\n    \n    // launch server\n    \n    app.listen(4242);\n    \n\nAlso in the app.js gist (above), I added code to validate the product model\nusing Mongoose.\n\nThe index file (inside /public directory):\n\n    \n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\">\n        <title>API index</title>\n      </head>\n      <body>\n        <section>\n          <h1>Nouns...</h1>\n          <p>\n            /products<br>\n            /products/:id\n          </p>\n        </section>\n        <script src=\"http://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.1/jquery.min.js\"></script>\n      </body>\n    </html>\n    \n\nSome jQuery AJAX snippets to fiddle with the API:\n\n    \n    // jQuery snippets used in the console to use the REST api created with app.js\n    \n    // CREATE\n    \n    jQuery.post(\"/api/products\", {\n      \"title\": \"My Awesome T-shirt\",  \n      \"description\": \"All about the details. Of course it's black.\",  \n      \"images\": [  \n        {  \n          \"kind\": \"thumbnail\",  \n          \"url\": \"images/products/1234/main.jpg\"  \n        }  \n      ],  \n      \"categories\": [  \n          { \"name\": \"Clothes\" },\n          { \"name\": \"Shirts\" } \n      ],  \n      \"style\": \"1234\",  \n      \"variants\": [  \n        {  \n          \"color\": \"Black\",  \n          \"images\": [  \n            {  \n              \"kind\": \"thumbnail\",  \n              \"url\": \"images/products/1234/thumbnail.jpg\"  \n            },\n            {  \n              \"kind\": \"catalog\",  \n              \"url\": \"images/products/1234/black.jpg\"  \n            }  \n          ],  \n          \"sizes\": [  \n            {  \n              \"size\": \"S\",  \n              \"available\": 10,  \n              \"sku\": \"CAT-1234-Blk-S\",  \n              \"price\": 99.99  \n            },\n            {\n              \"size\": \"M\",  \n              \"available\": 7,  \n              \"sku\": \"CAT-1234-Blk-M\",  \n              \"price\": 109.99  \n            }  \n          ]  \n        }  \n      ],\n      \"catalogs\": [\n          { \"name\": \"Apparel\" }\n      ]  \n    }, function(data, textStatus, jqXHR) { \n        console.log(\"Post resposne:\"); console.dir(data); console.log(textStatus); console.dir(jqXHR); \n    });\n    \n    // generated a product document with automatically assigned ID, e.g. 4f34734d21289c1c28000007 \n    \n    \n    // READ\n    \n    jQuery.get(\"/api/products/\", function(data, textStatus, jqXHR) { \n        console.log(\"Post resposne:\"); \n        console.dir(data); \n        console.log(textStatus); \n        console.dir(jqXHR); \n    });\n    \n    jQuery.get(\"/api/products/4f34734d21289c1c28000007\", function(data, textStatus, jqXHR) { \n        console.log(\"Post resposne:\"); \n        console.dir(data); \n        console.log(textStatus); \n        console.dir(jqXHR); \n    });\n    \n    // UPDATE\n    \n    jQuery.ajax({\n        url: \"/api/products/4f34734d21289c1c28000007\", \n        type: \"PUT\",\n        data: {\n          \"title\": \"My Awesome T-shirt\",  \n          \"description\": \"All about the details. Of course it's black, and longsleeve.\",  \n          \"images\": [  \n            {  \n              \"kind\": \"thumbnail\",  \n              \"url\": \"images/products/1234/main.jpg\"  \n            }  \n          ],  \n          \"categories\": [  \n              { \"name\": \"Clothes\" },\n              { \"name\": \"Shirts\" } \n          ],  \n          \"style\": \"1234\",  \n          \"variants\": [  \n            {  \n              \"color\": \"Black\",  \n              \"images\": [  \n                {  \n                  \"kind\": \"zoom\",  \n                  \"url\": \"images/products/1234/zoom.jpg\"  \n                }\n              ],  \n              \"sizes\": [  \n                {  \n                  \"size\": \"L\",  \n                  \"available\": 77,  \n                  \"sku\": \"CAT-1234-Blk-L\",  \n                  \"price\": 99.99  \n                }\n              ]  \n            }  \n          ],\n          \"catalogs\": [\n              { \"name\": \"Apparel\" }\n          ]  \n        }, \n        success: function(data, textStatus, jqXHR) { \n            console.log(\"PUT resposne:\"); \n            console.dir(data); \n            console.log(textStatus); \n            console.dir(jqXHR); \n        }\n    });\n    \n    // Delete\n    \n    jQuery.ajax({url: \"/api/products/4f34734d21289c1c28000007\", type: \"DELETE\", success: function(data, textStatus, jqXHR) { console.dir(data); }});\n    \n\n\n### Post Hoc\n\nThis tutorial came about as a desire to develop with a local API. Using a local API, I can develop a client application with Backbone.js and utilize the asynchronous behaviors that come with the API. I am not suggesting that anyone uses this tutorial to build a RESTful API for a production ecommerce application. However, I do advocate developing with a local API rather then just mocking a server without asynchronous interations with JSON data. If you are not working with a RESTful API and are not consuming data using AJAX, in a few hours you can be. \n\nJavaScript runs in so many applications, and since I already know JavaScript I would rather fiddle with Node.js than build an API for my local development needs in PHP or Ruby. Also, this exercise helps me to understand more about JSON, REST and jQuery AJAX development. Getting to know these technologies and developing solid skills using asynchronous behavior, necessary to build HTML5 apps for desktop and/or mobile browsers.\n\n*Completing this tutorial will likely take a few hours, even longer if you do not have node and npm running on your development environment.*\n\n### Reference\n\n* [API design nouns are good, verbs are bad.][nouns are good verbs are bad]\n* [Installing Node.js][install node]\n* [npm is a package manager for node.][install npm]\n* [Models are defined by passing a Schema instance to mongoose.model][mongoosejs model]\n* [SchemaTypes take care of validation, casting, defaults, and other general options in our models][schema types]\n* [Embedded documents are documents with schemas of their own that are part of other documents][embedded documents]\n* [Backbone Todo boilerplates demonstrating integration with Node.js, Express, MongoDB][backbone boilerplates]\n* [MongoDB (from 'humongous') - Document-oriented storage][mongodb]\n  * [MongoDB Quickstart][mongoquickstart]\n  * [Try manipulating the Mongo database with the database shell][mongotutorial] or [MongoDB browser shell][try mongodb]\n* [Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.][mongoosejs]\n* [High performance, high class Web development for Node.js][expressjs]\n* [npm install express][install express]\n* [Using Node.js, Express, Mongoose and MongoDB][node-express-mongodb]\n\n[gist-ecomapi]: https://gist.github.com/1791080 \"Develop a RESTful API Using Node.js With Express and Mongoose\"\n[gist-ecomapi-fixture]: https://gist.github.com/1791080#file_fixtures.js \"Fixtures - example AJAX posts to create products\"\n[gist-ecomapi-updates]: https://gist.github.com/1791080#file_bulk_updates.js \"Sample script for bulk update of products\"\n\n[nouns are good verbs are bad]: http://blog.apigee.com/detail/restful_api_design_nouns_are_good_verbs_are_bad/ \"API design nouns are good, verbs are bad\"\n\n[mongoosejs]: http://mongoosejs.com/ \"Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\"\n\n[mongoosejs model]: http://mongoosejs.com/docs/model-definition.html \"Models are defined by passing a Schema instance to mongoose.model\"\n\n[schema types]: http://mongoosejs.com/docs/schematypes.html \"SchemaTypes take care of validation, casting, defaults, and other general options in our models\"\n\n[embedded documents]: http://mongoosejs.com/docs/embedded-documents.html \"Embedded documents are documents with schemas of their own that are part of other documents\"\n\n[backbone boilerplates]: https://github.com/addyosmani/backbone-boilerplates \"Backbone Todo boilerplates demonstrating integration with Node.js, Express, MongoDB\"\n\n[mongodb]: http://www.mongodb.org/ \"MongoDB (from 'humongous') - Document-oriented storage\"\n\n[mongoquickstart]: http://www.mongodb.org/display/DOCS/Quickstart \"MongoDB Quickstart\"\n\n[try mongodb]: http://try.mongodb.org/ \"MongoDB browser shell\"\n\n[mongotutorial]: http://www.mongodb.org/display/DOCS/Tutorial \"Try manipulating the Mongo database with the database shell\"\n\n[backbone]: http://documentcloud.github.com/backbone/ \"Backbone.js\"\n\n[node]: http://nodejs.org/ \"Node.js\"\n\n[install node]: https://github.com/joyent/node/wiki/Installation \"Building and Installing Node.js\"\n\n[install npm]: http://npmjs.org/ \"npm is a package manager for node.\"\n\n[expressjs]: http://expressjs.com/ \"High performance, high class Web development for Node.js\"\n\n[install express]: http://expressjs.com/guide.html \"npm install express\"\n\n[node-express-mongodb]: https://github.com/addyosmani/backbone-fundamentals#restful \"Using Node.js, Express, Mongoose and MongoDB\"\n\n[rest]: http://en.wikipedia.org/wiki/Representational_state_transfer \"Representational state transfer\"\n\n[crud]: http://en.wikipedia.org/wiki/Create,_read,_update_and_delete \"Create, read, update and delete\"\n\n[web service]: http://en.wikipedia.org/wiki/Web_service \"Web service\"\n\n[json]: http://www.json.org/ \"JSON (JavaScript Object Notation)\"\n",
  "date": "2012-02-09T00:00:00.000Z",
  "excerpt": "For the past couple months I've been developing with [Backbone.js][backbone] and mocking data for an application. I've worked in the ecommerce industry for a few years and thought it would be a good idea to create a serious of posts on the topic of developing with Backbone using an example with some complexity, perhaps more than a '*todos*' or '*blog*' application, so the example will utilize a familiar Web application, an online store. To program a data-driven asynchronous application using a language I already know, JavaScript, the best way to learn is to write some code. So, I researched a few example applications using [Node.js][node] with a [MongoDB database][mongodb]. This article is intended to be the first in a series on the topic building an online store using [REST][rest] and Backbone.js to structure the code. This tutorial is not intended for production code, but rather an exploration of developing interactions with a RESTful API. This first post lays down a foundation for developing with a local API, then I can get into using the application with Backbone; but let's get into the server-side for a bit first.\n\n## API Design for Mock Ecommerce Application\n\nGoals for the Web service:\n\n* Simple API design and pragmatic REST Web service, with only 2 base URLs per resource  \n* Keep verbs out of your base URLs\n* Our HTTP verbs are POST, GET, PUT, and DELETE ([Create, Read, Update, Delete][crud])  \n* Concrete names are better than abstract\n\n*Example* : two (2) resources (`/products` and `/products/XX`) and the four (4) HTTP verbs\n\n<table class=\"cols5\">\n    <tr>\n        <th><strong>Resource</strong></th>\n        <th><strong>POST</strong><br>(create)</th>\n        <th><strong>GET</strong><br>(read)</th>\n        <th><strong>PUT</strong><br>(update)</th>\n        <th><strong>DELETE</strong><br>(delete)</th>\n    </tr>\n    <tr>\n        <td><strong>/products</strong></td>\n        <td>create a new product</td>\n        <td>list products</td>\n        <td>bulk update products</td>\n        <td>delete all products</td>\n    </tr>\n    <tr>\n        <td><strong>/products/1234</strong></td>\n        <td>error</td>\n        <td>show 1234</td>\n        <td>if exists update 1234, else error</td>\n        <td>delete 1234</td>\n    </tr>\n</table>\n\n[backbone]: http://documentcloud.github.com/backbone/ \"Backbone.js\"\n[node]: http://nodejs.org/ \"Node.js\"\n[mongodb]: http://www.mongodb.org/ \"MongoDB (from 'humongous') - Document-oriented storage\"\n[rest]: http://en.wikipedia.org/wiki/Representational_state_transfer \"Representational state transfer\"",
  "id": "5e6e36d1-ec7d-4ec0-979f-324d327cfcd7",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "develop-a-restful-api-using-nodejs-with-express-and-mongoose",
  "title": "Develop a RESTful API Using Node.js With Express and Mongoose"
},
{
  "body": "## A few reasons I enjoy the JavaScript development community\n\nI find it refreshing that many of these libraries have a fair amount of\nadoption within the development community. One of the primary objectives on\nthis project is to build the application with modular code. Also to load\nmodules when the specific components are needed for execution rather than the\nentire library which becomes the finish application. The AMD specification and\nthe compatibility with RequireJS and other libraries is very attractive.\nRequireJS gives me the ability to author various modules and manage the code\ndependencies efficiently. Also with the build and optimization features of\nRequireJS I am able to organize the modules within packages. I broke down the\nfile organization by having common directories for models, views, collections\n(objects defined using Backbone) and a few other directories, like syncs,\nutils to extend the functionality of Backbone. The modules in each directory\nare built into a single common package of modules and the package can be\nrequired by other modules which reside in other packages (groups of code for\nspecific feature/component implementation, e.g. site chrome). I forked an open\nsource book [Backbone.js Fundamentals](https://github.com/pixelhandler/backbone-fundamentals) on these topics adding an explanation on how I am\nbuilding and optimizing using packages of modules; see the section \"Optimize\nand Build a Backbone JavaScript application with Require.JS using Packages\". I\nposted this section on the [HauteLookTech.com blog](http://www.hautelooktech.com/2012/02/01/optimize-and-build-a-backbone-js-javascript-application-with-require-js-using-packages/) as well.\n\nAfter spending a few weeks during code freeze at work and trying out all these\nlibraries we began development for a mobile application. In an effort to\nrapidly prototype the web application I began to build with [jQuery Mobile](http://jquerymobile.com/demos/1.0.1/docs/about/getting-started.html).\nThis gave our team common components that work across a wide range of devices\nwithout overloading us with testing. Also the theme roller for jQuery Mobile\nis a handy tool for the building a base skin for the mobile site. With only a\nfew sketches and by generating a mobile theme that looked very _blueprint-ish_\nwe began authoring a site prototype to work out the features and components\nthat should be included in the mobile site application. Since the site\nframework is built with Backbone we will not use the jQuery Mobile routing\nfeatures; however for the prototype this mobile framework was very handy right\nout of the box. Recently there have been many talks and articles on the\nconcept of **\"mobile first\"**, basically the small screen helps to define what\nreally matters and helps to put usability as a high priority. This ends up\nstriking a nice balance between identifying requirements for design, usability\nand the application's functionality. Using the logic-less template library,\nMustache to render JSON from the web service layer is much funner than all\nkinds of crazy DOM fragment manipulation to render data. I found a great\ntutorial post on using [HTML Templates with Mustache.js](http://coenraets.org/blog/2011/12/tutorial-html-templates-with-mustache-js/).\n\nI am developing the framework based on Backbone.js which has the dependency of\nthe Underscore.js library - a very robust set of tools that complement\nBackbone, especially with filtering collections. Also, Backbone needs either\njQuery or Zepto, I am content with jQuery. The Deferred and Callbacks objects\nin the current version of jQuery also help to manage asynchronous behaviors of\nthe components within the framework. For example, I can add a Deferred object\nto a collection and within a view object only render after the resolution of\nthe deferred property of the required collection object. The Callbacks object\ncomes in handy using a view object that programmatically renders partial\ntemplates based on various child views, I can iterate over options passed to a\nview and define child views based on the options, then add to the (parent)\nview object's render method callbacks to render the child views. Though\nBackbone does not provide (out of the box) a collection view; there are good\nsolutions posted online. So, when I need to program some behavior that is not\nincluded in Backbone, I often discover good solutions online that I can borrow\nfrom. For me, the bottom line is that Backbone gives common patterns for\ndeveloping a data-driven application backed by a RESTful API and is very\nextendable. Backbone does not box me in, yet is fairly straight forward for me\nto build on top of, also giving solid structure to the components I need in\ndeveloping a modular application.\n\nAbout modular code, which JavaScript does not currently provide a standard,\nthere are plenty of patterns you can use. For me\n[AMD](http://requirejs.org/docs/whyamd.html) is just fine. Even though a\nfuture standard my be different than the way AMD operates, the API fits well\ninto current libraries. One thing I notice is that when there is a need for\nsome functionality in JavaScript many solutions pop up in the community; which\nis great. However, it would be nice if developers find a good solution and\nadopt it; it would seem that more adoption and development using the ‘good’\nsolution would lead to the said solution becoming _even better_ or _great_ and\nthe use of the solution would become easier for other developers to adopt and\nimplement. AMD is a good solution for [modules using RequireJS](http://requirejs.org/docs/why.html), some would argue _‘the’_\nsolution. For now, it is a viable solution and I’m using it. The Group for AMD\nJS Module API has forks for AMD compatible versions of\n[Backbone.js](https://github.com/amdjs/backbone) and\n[Underscore.js](https://github.com/amdjs/underscore) libraries.\n\nPerhaps the most enjoyment I find in JavaScript development with this mix of\nlibraries is the discovery of a solution based on using [behavior-driven development (BDD)](http://dannorth.net/introducing-bdd/) methodologies; and of\ncourse discovering though this _lather, rinse, repeat_ (test-driven\ndevelopment) practice. The combination of\n[Jasmine](http://pivotal.github.com/jasmine/), [jQuery-Jasmin](https://github.com/velesin/jasmine-jquery) and\n[Sinon.JS](http://sinonjs.org/) testing libraries is powerful to say the\nleast. I really enjoy getting from red to green, in passing the tests. I find\nthat sometimes the hardest part is to guess what exactly will prove the\nsolution yet to be discovered. This development approach helps to break down a\nsolution by proving the expected behavior with simpler units of behavior which\ncan be tested and verified independently from the application itself. Sinon.JS\nprovides an nice and [fake XHR server](http://sinonjs.org/docs/#server) for\n[testing Backbone.js applications](http://tinnedfruit.com/2011/03/03/testing-backbone-apps-with-jasmine-sinon.html). Jasmine has\n[spies](https://github.com/pivotal/jasmine/wiki/Spies) which replace a\nfunction that it is spying on, and Jasmine-jQuery adds the sweetness of\nfixtures, jQuery based matchers and event spies to complete a solid suite for\na front-end developer to embrace the process of test-driven development. It is\nvery nice to execute the tests on various mobile devices during development to\nensure cross platform/device compatibility.\n\nNode.js came in very handy in authoring a shell script to prep and build using\nthe [r.js optimizer](http://requirejs.org/docs/optimization.html). I needed to\nhave a site that can be hosted in a cloud environment with out any server-side\nscript execution. So adding to the RequireJS optimizer script I added a\nrelease script to modify my build.js and index.html files to utilize a\nspecified build directory. And, node is just cool, right?\n\nI would like tell an anecdote from my youth to summarize the experience I have\nusing this combination of JavaScript libraries and frameworks. When I was a\nkid I loved wearing Docs (Dr. Martens). These are warehouse style boots with\nair-cushioned soles (dubbed **Bouncing Soles**). A kid I knew wrote a song, \"I\ncan climb mountains, I can climb rocks, I can do anything when I wear my\nDocs.\" These bouncing soles give a sense of invincibility to a young man full\nof spit and well you know. I feel the same way when developing with Backbone,\nUnderscore, Node.js, AMD, Jasmine, jQuery and RequireJS. Perhaps I should\nwrite a song, \"I can pass my specs, I can mock my requests, I can build\nanything with Backbone, Underscore, jQuery and RequireJS\". On second thought,\nI'll spare you the pain of my lack of musical talent. to wrap it up happy\ndeveloper build awesome stuff, and these group of libraries and the community\nbehind them makes me a kick-xxx happy developer, seriously.\n",
  "date": "2012-02-03T00:00:00.000Z",
  "excerpt": "Currently I am developing a JavaScript application using open source\nframeworks and libraries. Included the mix are… \n[jQuery Mobile](http://jquerymobile.com/),\n[Underscore.js](http://documentcloud.github.com/underscore/),\n[Backbone.js](http://documentcloud.github.com/backbone/),\n[RequireJS](http://requirejs.org/),\n[mustache.js](https://github.com/janl/mustache.js),\n[Node.js](http://nodejs.org/), [Jasmine](http://pivotal.github.com/jasmine/),\n[Sinon.JS](http://sinonjs.org/), [Jasmine-jQuery](https://github.com/velesin/jasmine-jquery), \nand the [Asynchronous Module Definition (AMD)](https://github.com/amdjs/amdjs-api/wiki/AMD)\nspecification. The web application is backed with a RESTful API. \nSo, in researching on all the JavaScript based MVC type of frameworks, comparing\n[Knockout](http://knockoutjs.com/), [Ember.js](http://emberjs.com/)\n(Sproutcore 2), [JavaScript MVC](http://javascriptmvc.com/), and\n**Backbone.js** I ended up selecting Backbone as my first choice. The\ncommunity of developers using Backbone appears very active, there are plenty\nof blog posts, articles, tutorials, and videos on how to author code using\nBackbone.",
  "id": "58dec352-f53f-47fe-b5f1-11a90d49f035",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "developing-a-modular-javascript-application-with-requirejs-and-backbonejs",
  "title": "Developing a Modular JavaScript Application With RequireJS and Backbone.js"
},
{
  "body": "### Links on the topic of Deferreds / Promises\n\n* <http://api.jquery.com/jQuery.ajax/>\n* <http://msdn.microsoft.com/en-us/scriptjunkie/gg723713>\n* <http://quickleft.com/blog/jquery-15-hotness-part-2> | <https://gist.github.com/862567>\n* <http://joseoncode.com/2011/09/26/a-walkthrough-jquery-deferred-and-promise/>\n\n## Short explanation\n\n* You really want to use jQuery methods : $.Deferred() .promise() .done() .fail() .isResolved() .isRejected() .then() .always() .pipe() .when()\n* You may be using a service to get some data e.g. via .ajax()\n* You need both ajax actions to complete (with success) then your code responds after both actions are done.\n* See Gists below ... <https://gist.github.com/1273143> | <https://gist.github.com/1273133>\n\n**See working example at** : <http://pixelhandler.com/downloads/code/deferred-promise/>\n\n## Code …\n\n    \n    <!docType html>\n    <html>\n    <head>\n      <title>Deferred / Promise</title>\n      <meta charset=\"utf-8\">\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n      <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"></script>\n      <script type=\"text/javascript\" src=\"jquery-1.6.4-promises.js\">// get script at https://gist.github.com/1273133</script>\n    </head>\n    <body>\n    <h1>Deferred / Promise Example using jQuery 1.4.2 by adding implementation in newer version</h1>\n    <script type=\"text/javascript\" charset=\"utf-8\">\n    \n    (function($){ // IIFE ...\n      \n    $(function(){ // doc ready ...\n      \n      var container, things, promises;\n          \n      // Code below borrowed from ...\n      //    Deferreds post : http://quickleft.com/blog/jquery-15-hotness-part-2\n      //    Code : https://gist.github.com/862567\n    \n      container = $( \"<div/>\" ).appendTo( document.body );\n      $('div').html(\"<p>jQuery version:\" + jQuery.fn.jquery + \". Hang on this should take about 5 seconds to complete.</p>\");\n    \n      // List of resources we want to load files on http://pixelhandler.com/ domain\n      things = [\n        {\n          url: \"/downloads/code/deferred-promise/services/?type=XML\",\n          data_type: \"xml\",\n          name: \"Products XML\"\n        },\n        {\n          url: \"/downloads/code/deferred-promise/services/?type=JSON\",\n          data_type: \"json\",\n          name: \"Products JSON\"\n        }\n      ];\n    \n      // Container to hold our promises\n      promises = [];\n    \n      function getSomething(thing){\n    \n        // Create our deferred\n        var dfd = $.Deferred();\n    \n        // - Make a request and resolve our deferred onSuccess\n        // - You can get super fancy here with $.ajax and explicitly\n        //   set fail or rejected states\n        $.get(\n          thing.url,\n          function() { dfd.resolve(); },\n          thing.data_type\n        );\n    \n        // We return a promise so we can watch it for a resolution\n        return dfd.promise();\n    \n      }\n    \n      // Iterate through our requests\n      $.each( things, function(_, thing){\n        // - Each getSomething() call will return a promise, so let's\n        //   push them into our promises array\n        promises.push( getSomething(thing).done(function(){\n          // - This is an inline done() handler which will fire when\n          //   the individual promise is resolved\n          container.append( '<p>Loaded ' + thing.name  + '. - Promise done.</p>' );\n          // - You could string other handlers like fail() after this\n          //   if you want to try a broken link or other situation\n        }) );\n      });\n    \n      setTimeout(function(){\n    \n        // Apply entire array of promises to a $.when listener\n        $.when.apply( null,  promises ).then(function(){\n          // All promises have been resolved :)\n          container.append( '<p class=\"green\">Finished loading All Files - All promises have been resolved. (We can even wait a bit before we handle our promises. If they have already been resolved, jQuery will remember!)</p>' );\n        });\n    \n      }, 5000);\n    \n    }); // end ready\n    \n    }(jQuery)); // end IIFE\n    \n    </script>\n    </body>\n    </html>\n\n**Uses code from:**\n    \n    (function($){\n    \n        var // Promise methods\n            promiseMethods = \"done fail isResolved isRejected promise then always pipe\".split( \" \" ),\n            // Static reference to slice\n            sliceDeferred = [].slice;\n    \n        if (typeof $ !== 'function') {\n            return false;\n        } else {\n            jQuery.each(promiseMethods, function(){\n                if (typeof jQuery[this] !== 'undefined') {\n                    return false;\n                }\n            });\n        }\n    \n        // dependencies\n        if (typeof jQuery.type === 'undefined') {\n            var class2type = {};\n            // Populate the class2type map\n            jQuery.each(\"Boolean Number String Function Array Date RegExp Object\".split(\" \"), function(i, name) {\n                class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n            });\n            jQuery.extend({\n                type: function( obj ) {\n                    return obj == null ?\n                        String( obj ) :\n                        class2type[ toString.call(obj) ] || \"object\";\n                }\n                // redefine isFunction using type method\n                //isFunction: function( obj ) {\n                //  return jQuery.type(obj) === \"function\";\n                //}\n            });\n    \n        }\n    \n        jQuery.extend({\n            // Create a simple deferred (one callbacks list)\n            _Deferred: function() {\n                var // callbacks list\n                    callbacks = [],\n                    // stored [ context , args ]\n                    fired,\n                    // to avoid firing when already doing so\n                    firing,\n                    // flag to know if the deferred has been cancelled\n                    cancelled,\n                    // the deferred itself\n                    deferred  = {\n    \n                        // done( f1, f2, ...)\n                        done: function() {\n                            if ( !cancelled ) {\n                                var args = arguments,\n                                    i,\n                                    length,\n                                    elem,\n                                    type,\n                                    _fired;\n                                if ( fired ) {\n                                    _fired = fired;\n                                    fired = 0;\n                                }\n                                for ( i = 0, length = args.length; i < length; i++ ) {\n                                    elem = args[ i ];\n                                    type = jQuery.type( elem );\n                                    if ( type === \"array\" ) {\n                                        deferred.done.apply( deferred, elem );\n                                    } else if ( type === \"function\" ) {\n                                        callbacks.push( elem );\n                                    }\n                                }\n                                if ( _fired ) {\n                                    deferred.resolveWith( _fired[ 0 ], _fired[ 1 ] );\n                                }\n                            }\n                            return this;\n                        },\n    \n                        // resolve with given context and args\n                        resolveWith: function( context, args ) {\n                            if ( !cancelled && !fired && !firing ) {\n                                // make sure args are available (#8421)\n                                args = args || [];\n                                firing = 1;\n                                try {\n                                    while( callbacks[ 0 ] ) {\n                                        callbacks.shift().apply( context, args );\n                                    }\n                                }\n                                finally {\n                                    fired = [ context, args ];\n                                    firing = 0;\n                                }\n                            }\n                            return this;\n                        },\n    \n                        // resolve with this as context and given arguments\n                        resolve: function() {\n                            deferred.resolveWith( this, arguments );\n                            return this;\n                        },\n    \n                        // Has this deferred been resolved?\n                        isResolved: function() {\n                            return !!( firing || fired );\n                        },\n    \n                        // Cancel\n                        cancel: function() {\n                            cancelled = 1;\n                            callbacks = [];\n                            return this;\n                        }\n                    };\n    \n                return deferred;\n            },\n    \n            // Full fledged deferred (two callbacks list)\n            Deferred: function( func ) {\n                var deferred = jQuery._Deferred(),\n                    failDeferred = jQuery._Deferred(),\n                    promise;\n                // Add errorDeferred methods, then and promise\n                jQuery.extend( deferred, {\n                    then: function( doneCallbacks, failCallbacks ) {\n                        deferred.done( doneCallbacks ).fail( failCallbacks );\n                        return this;\n                    },\n                    always: function() {\n                        return deferred.done.apply( deferred, arguments ).fail.apply( this, arguments );\n                    },\n                    fail: failDeferred.done,\n                    rejectWith: failDeferred.resolveWith,\n                    reject: failDeferred.resolve,\n                    isRejected: failDeferred.isResolved,\n                    pipe: function( fnDone, fnFail ) {\n                        return jQuery.Deferred(function( newDefer ) {\n                            jQuery.each( {\n                                done: [ fnDone, \"resolve\" ],\n                                fail: [ fnFail, \"reject\" ]\n                            }, function( handler, data ) {\n                                var fn = data[ 0 ],\n                                    action = data[ 1 ],\n                                    returned;\n                                if ( jQuery.isFunction( fn ) ) {\n                                    deferred[ handler ](function() {\n                                        returned = fn.apply( this, arguments );\n                                        if ( returned && jQuery.isFunction( returned.promise ) ) {\n                                            returned.promise().then( newDefer.resolve, newDefer.reject );\n                                        } else {\n                                            newDefer[ action + \"With\" ]( this === deferred ? newDefer : this, [ returned ] );\n                                        }\n                                    });\n                                } else {\n                                    deferred[ handler ]( newDefer[ action ] );\n                                }\n                            });\n                        }).promise();\n                    },\n                    // Get a promise for this deferred\n                    // If obj is provided, the promise aspect is added to the object\n                    promise: function( obj ) {\n                        if ( obj == null ) {\n                            if ( promise ) {\n                                return promise;\n                            }\n                            promise = obj = {};\n                        }\n                        var i = promiseMethods.length;\n                        while( i-- ) {\n                            obj[ promiseMethods[i] ] = deferred[ promiseMethods[i] ];\n                        }\n                        return obj;\n                    }\n                });\n                // Make sure only one callback list will be used\n                deferred.done( failDeferred.cancel ).fail( deferred.cancel );\n                // Unexpose cancel\n                delete deferred.cancel;\n                // Call given func if any\n                if ( func ) {\n                    func.call( deferred, deferred );\n                }\n                return deferred;\n            },\n    \n            // Deferred helper\n            when: function( firstParam ) {\n                var args = arguments,\n                    i = 0,\n                    length = args.length,\n                    count = length,\n                    deferred = length <= 1 && firstParam && jQuery.isFunction( firstParam.promise ) ?\n                        firstParam :\n                        jQuery.Deferred();\n                function resolveFunc( i ) {\n                    return function( value ) {\n                        args[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;\n                        if ( !( --count ) ) {\n                            // Strange bug in FF4:\n                            // Values changed onto the arguments object sometimes end up as undefined values\n                            // outside the $.when method. Cloning the object into a fresh array solves the issue\n                            deferred.resolveWith( deferred, sliceDeferred.call( args, 0 ) );\n                        }\n                    };\n                }\n                if ( length > 1 ) {\n                    for( ; i < length; i++ ) {\n                        if ( args[ i ] && jQuery.isFunction( args[ i ].promise ) ) {\n                            args[ i ].promise().then( resolveFunc(i), deferred.reject );\n                        } else {\n                            --count;\n                        }\n                    }\n                    if ( !count ) {\n                        deferred.resolveWith( deferred, args );\n                    }\n                } else if ( deferred !== firstParam ) {\n                    deferred.resolveWith( deferred, length ? [ firstParam ] : [] );\n                }\n                return deferred.promise();\n            }\n        });\n    \n    \n    }(jQuery));\n\n",
  "date": "2011-10-08T00:00:00.000Z",
  "excerpt": "## So, your app only uses a certain version of jQuery from last year sometime, e.g. v 1.4.2\n\nNot a problem, you can add in the newer features you need by copying form the source and defining any dependencies used by the newer code, also copied from the source. *Use the Source, Luke*\n\nThis example shows how to add $.Deferred and the jQuery promise methods to your app which is still using version 1.4.2; perhaps some mission critical plugin or other code is preventing you from an upgrade to the lasted jQuery release.",
  "id": "b37f4b6a-0bcb-432f-ae54-f1441503909d",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "use-newer-jquery-features-when-your-app-is-stuck-on-older-version",
  "title": "Use Newer jQuery Features When Your App Is Stuck on Older Version"
},
{
  "body": "_Screencast Demo_  \n<video poster=\"http://pixelhandler.com/uploads/html5-video-block-demo.png\" width=\"864\" height=\"540\" controls>\n  <source src=\"http://pixelhandler.com/uploads/videojs_player_demo.mp4\" type='video/mp4' />\n</video>\n[Video File](http://pixelhandler.com/uploads/videojs_player_demo.mp4)\n\n*Notes:* For info on HTML5 video see : <http://diveintohtml5.info/video.html> which has a tutorial for video conversion for web using the (free) Miro Video Converter. As HTML5 video implementations vary per web browser, to use this block you will need to prepare (4) files: .mp4, .ogv, .webm and have a preview or \"poster\" image. Also, if needed, Flowplayer (free) plays your .mp4 as flash media content.\n\n*CMS Block supports videos playback using the following supporting files*\n\n1. Preview Image: Choose a 'Poster' image, file with a .png or .jpg extension; e.g. still frame from video.\n2. MPEG 4 (.mp4): Choose a file with a .mp4 extension as common HTML5 video format; also used for flash fallback\n3. Ogg video (.ogv): Choose a file with a .ogv extension; \"Theora\" file, HTML5 video format e.g. for FireFox\n4. WebM video (.webm): Choose a file with a .webm extension; HTML5 video format e.g. for MSIE 9+\n5. Maximum Dimensions: Input the maximum width and height in pixels\n\n*Links and References:*\n\n* Source code : <https://github.com/pixelhandler/videojs_player>\n* CMS: <http://www.concrete5.org/> | add-on: <http://www.concrete5.org/marketplace/addons/video-js-player/>\n* HTML5 video: <http://diveintohtml5.info/video.html>\n* Video Converter: <http://www.mirovideoconverter.com/>\n* VideoJS: JavaScript for HTML5 video player - <http://videojs.com/>\n* Flowplayer free: Flash fallback for playing videos for browsers that do not support `<video>` element - <http://flowplayer.org/index.html>\n* Alternate location to view tutorial : <http://www.vimeo.com/28320066>\n",
  "date": "2011-08-29T00:00:00.000Z",
  "excerpt": "## Screencast: Demo of HTML5 video used in a CMS block\n\n**videojs_player package as add-on for [Concrete5.org](http://www.concrete5.org/marketplace/addons/) CMS**\n\nThe screencast below shows how to use the videojs_player package and also\nnotes the tools used to prepare video for the block.",
  "id": "8a7ecaca-23b7-43d3-9199-0bc95e10e705",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "html5-video-package-for-cms-using-videojs",
  "title": "HTML5 Video Package for CMS Using VideoJS"
},
{
  "body": "\n  * Ruby gems like capistrano for deployment,\n  * Git (SCM) to manage both the code to generate my site and generated code,\n  * local development using Ruby to build my now Jekyll powered website,\n  * and my favorite text editor, TextMate, to generate, edit and preview the content\n\n… the choice of leaving WordPress for my personal blog/site and using\nOctopress (Ruby, Jekyll) and some using handy tools like Git and Capistrano\njust felt right. And yeah my site is now static HTML, Javascript, CSS and not\nusing any PHP, MySQL, and I like it that way.\n\nAnd to boot any other content, or code (e.g. demos, apps) that I choose to add\nto my site, doesn't need to be part of any CMS and can deploy along site the\nblog.\n\nA few other things that just make me happy are:\n\n  * no WordPress updates when a security issues is discovered\n  * The Octopress plugins are cool: Gist Tag, Render Partial, Github Style codeblock, Category Generator \n    * I can include code snippets from a download folder\n    * Or import a Gist from github.com\n  * Since the site is generated with rake tasks, resulting in Web standards code (HTML, CSS, Javascript) I can test preview the site on my localhost easily…\n\nWell that sums up what made me happy about the switch.\n",
  "date": "2011-08-08T00:00:00.000Z",
  "excerpt": "Over the weekend I noticed a few coding bloggers had switched to\n[Octopress](http://octopress.org/docs/). I noticed the advantages for a\ndeveloper who doesn't need a content management system (CMS) using web forms\nto update a website. It may sound like I am reverting to the way people\nblogged 10 years ago with a static HTML website; but is not at all the case.\nWith modern programming tools like…",
  "id": "2082de5c-5677-43b7-a0f9-570e31f7756b",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "a-few-reasons-i-decided-to-switch-to-octopress-from-wordress",
  "title": "A Few Reasons I Decided to Switch to Octopress (From Wordress)"
},
{
  "body": "So I...\n\n  1. Ran Software Update,\n  2. backed up with Time Machine,\n  3. repaired disk permissions,\n  4. and verified my disk.\n  5. Then purchased Lion in the app store on my mac.\n  6. Made a backup of my /private/etc/php.ini file\n  7. Installed Lion\n  8. Ran Software Update again, e.g. for Java updates\nNext, I checked my localhost/phpmyadmin and checked my phpinfo.php files. The\narticle 'Fixing mysql in OS X Lion upgrade' (link above) was correct. I needed\nto:\n\n  1. Place my copy of php.ini back to its original location at /private/etc/php.ini\n  2. Update the php.ini file to change mysqli setting… ;mysqli.default_socket = /var/mysql/mysql.sock mysqli.default_socket = /tmp/mysql.sock\nMy current LAMP dev projects seem just fine so far. Notes on localhost\nenvironment on Lion :\n\n  * mysql -version mysql  Ver 14.14 Distrib 5.5.12, for osx10.6 (i386) using readline 5.1\n  * php -version PHP 5.3.6 with Suhosin-Patch (cli) (built: Jun 16 2011 22:26:57)\n  * httpd -v Server version: Apache/2.2.19 (Unix)\n",
  "date": "2011-07-21T00:00:00.000Z",
  "excerpt": "Today I upgraded to Lion (was on Snow Leopard). My main concern was that the\nOSX (native) PHP would break and that MySQL server (community) installation\nwould not be compatible. \n\nI found an article on the topic at :\n[http://www.september28.co.uk/blog/2011/07/20/fixing-mysql-in-os-x-lion-upgrade/](http://www.september28.co.uk/blog/2011/07/20/fixing-mysql-in-os-x-lion-upgrade/) which eased my nerves.",
  "id": "921c954d-d7a9-44c2-9063-2081a59e45b3",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "osx-upgrade-to-lion-went-well-and-so-far-native-php-and-mysql-server-playing-nice",
  "title": "OSX Upgrade to Lion Went Well, and So Far Native PHP and MySQL Server Playing Nice"
},
{
  "body": "Click below to view the PDF and/or download the templates files:\n\n  1. PDF of wireframe templates: [magento-wireframes](http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes.pdf)\n  2. ZIP of Adobe Illustrator files: [magento-wireframes](http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes.zip)\nThe following is a summary of the annotations that accompany the wireframe\ntemplates. These notes can be used to establish/inform your client of the user\nexperience(s) that can be expected from an online store build with magento\ncommerce.\n\nThe following is a summary of the annotations that accompany the wireframe templates. These notes can be used to establish/inform your client of the user experience(s) that can be expected from an online store build with magento commerce.\n<!--more-->\n<h2><em>Project : Online Storefront</em></h2>\n<h3>Page: Home</h3>\n<a href=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-1-e1310555340154.png\"><img class=\"alignnone size-full wp-image-827\" title=\"magento-wireframes-1\" src=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-1-e1310555340154.png\" alt=\"Magento Wireframe of homepage\" width=\"579\" height=\"337\" /></a>\n<h4>User Experiences:</h4>\n<strong>Shopper</strong> - Presented with multiple options to browse store (targeting various user types) slideshow, featured promotions/banners/products, by category, or by searching. As shopper searches for a product, suggestions result from user input (with search bar). Follows traditional navigation on top to view categories. Interacts with store widgets like mini-cart, recently viewed, search suggestions.\n\n<strong>Store Manager</strong> - Uses content management tools to update scenes based on marketing objectives, upcoming offerings, categories, etc. Adds graphics for banner promotions and informational badges.\n\n<em>Interactive / Elements:</em>\n<ul>\n\t<li>Branding image and top navigation</li>\n\t<li>Storefront navigation</li>\n\t<li>Search bar with interactive suggestions</li>\n\t<li>Interactive slides to promote targeted sections or products</li>\n\t<li>Sidebar area to hold blocks for banners, badges and dynamic blocks like, recently viewed and mini-cart</li>\n\t<li>Featured category image linked to category pages bundle of products)</li>\n\t<li>Featured products (configurable by options or as</li>\n\t<li>Footer area, navigation links, copyright, policy, newsletter sign-up etc.</li>\n\t<li>CMS structural block for adding promotional content.</li>\n</ul>\n<h3>Page: Category / Search Results</h3>\n<h4>User Experiences:</h4>\n<a href=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-2.png\"><img class=\"alignnone size-full wp-image-828\" title=\"magento-wireframes-2\" src=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-2.png\" alt=\"Magento wireframe of category or search results page\" width=\"580\" height=\"340\" /></a>\n\n<a href=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-3.png\"><img title=\"magento-wireframes-3\" src=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-3.png\" alt=\"Magento commerce wireframe of category page with quick view layout\" width=\"570\" height=\"334\" /></a>\n\n<strong>Shopper</strong> - Presented with listing of products within specific categories including filtered navigation allowing user to further limit display to desired category and/or product attributes. Shopper may sort the category list or search results by price and other sortable attributes. The list/search results are paginated. Shopper may add to cart or save to a wish list (creates login to save products). Mini-cart in sidebar is updated when user adds product to cart; also the mini cart is editable so user may remove products as well.\n\n<strong>Store Manager</strong> - Using back-office tools, organizes product categories and defines attributes based on merchandising objectives. Products may be associated with multiple categories to facilitate various shopping choices.\n\n<em>Interactive / Elements:</em>\n\nFiltered navigation on category and search results pages. Uses context specific product categories and attributes to help shopper find relevant products.\n\nMini-cart, interacts with user actions and displays quantity, total amount and mini views of products in cart; user can remove items from cart or click through to view fill shopping cart page.\n<ul>\n\t<li>Product navigation, with breadcrumbs, pagination, sorting options, subscribe to RSS feed.</li>\n\t<li>Products rendered in main area and paginated images and titles clickable to details pages.</li>\n\t<li>Actions to purchase, add to cart updates mini cart, if configurable with options user is taken to details page.</li>\n</ul>\n<h3>Page: Product Details</h3>\n<a href=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-4.png\"><img class=\"alignnone size-full wp-image-830\" title=\"magento-wireframes-4\" src=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-4.png\" alt=\"Magento Commerce wireframe of product details page\" width=\"570\" height=\"334\" /></a><a href=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-5.png\"><img title=\"magento-wireframes-5\" src=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-5.png\" alt=\"Magento Commerce wireframe of bundled product layout\" width=\"570\" height=\"333\" /></a>\n<h4>User Experiences:</h4>\n<strong>Shopper</strong> - Presented with product details, short description, purchase options, alternate views, price, availability, tabbed display of related products and long description/specifics. Interacts with options/quantity inputs to make a purchase decision. Supporting interactions: views alternate image, zooming to view details; sidebar reminds shopper of recently viewed products and prominent position of mini cart encourages checkout.\n\n<strong>Store Manager</strong> - Using back-office tools, updates product information including title, descriptions, pricing, multiple images, attributes (options may update pricing), manage inventory, setup related product offers (merchandising), and more.\n\nInteractive / Elements:\n<ul>\n\t<li>Recently viewed products listed in sidebar</li>\n\t<li>Product details, main image, name, availability, short description, link to email a friend</li>\n\t<li>Product options (required for configurable products) based on product attributes</li>\n\t<li>More views: alternate images of product, click changes main image, zooming feature to view detail.</li>\n\t<li>Add to cart / quantity input. Button click updates mini cart and user is notified at top of page; or (as set in back-office) user can be directed to the shopping cart page to begin checkout.</li>\n\t<li>Recommended (product specific merchandising)</li>\n\t<li>Long description and product specs</li>\n</ul>\n<h3>Page: Shopping Cart</h3>\n<a href=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-6.png\"><img class=\"alignnone size-full wp-image-832\" title=\"magento-wireframes-6\" src=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-6.png\" alt=\"Magento commerce wireframe of shopping cart\" width=\"570\" height=\"335\" /></a>\n<h4>User Experiences:</h4>\n<strong>Shopper</strong> - Reviews shopping choices in cart table and my edit quantity (update) and remove items, or continue to shop. In addition more (cross-sell) products are offered to shopper on the cart page. shopper may choose to use a discount if one is available or use the form to estimate shopping costs; with or without acting on the ‘discount’ and ‘estimate’ forms the shopper can ‘proceed to checkout’.\n\n<strong>Store Manager</strong> - Using back-office tools, sets up offers a cross-sells based on products visible in the shopping cart. May offer discount (coupon) code for special marketing campaigns. Other offers can be product / price based in addition to coupon based. Shipping form is based on shipping configuration in the back-office.\n\n<em>Interactive / Elements:</em>\n<ul>\n\t<li>Shopping cart table, editable quantity, displays any product options selected by shopper; line items include product icon name and unit price.</li>\n\t<li>Update shopping cart, when user changes quantity the pricing can be updated with this button</li>\n\t<li>Cross-sell offers on the cart page are based on products that the shopper has added to the cart</li>\n\t<li>Discount code form for redemption of coupon codes</li>\n\t<li>Shipping estimate form to help shopper to get a quote on total purchase cost</li>\n\t<li>Proceed to checkout begins the one-page checkout process, as a best practice the button is above and below the ‘fold’ (always visible when scrolling)</li>\n</ul>\n<h3>Page: One-page Checkout (step one)</h3>\n<a href=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-7.png\"><img class=\"alignnone size-full wp-image-833\" title=\"magento-wireframes-7\" src=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-7.png\" alt=\"Magento Commerce wireframe of one step checkout (login / guest)\" width=\"570\" height=\"331\" /></a>\n<h4><strong>User Experiences:</strong></h4>\n<strong>Shopper</strong> - First step in one-page checkout experience. Shopper may create a new account, login with previously created account or checkout anonymously without saving account details. Forgot password tools to recover existing account password if needed. Registered shoppers benefit from returning to check order status and history also secondary purchases are quicker as billing and shipping addresses are stored in the shopper account. Anonymous checkout is for shoppers who would rather not have a stored account.\n\n<strong>Store Manager</strong> - Manage customer accounts using the back-office tools, Customer service may reset account passwords return orders process cancellations and other order fulfillment tasks.\n\n<em>Interactive / Elements:</em>\n<ul>\n\t<li>Checkout Method is the fist step. Create an account, login or checkout as guest</li>\n\t<li>Steps in checkout flow are reported on screen to indicate progress and confirm shopper billing, shipping address and method as well payment method</li>\n\t<li>Options for first time customers to purchase as anonymous shopper (guest) or choose to save information in ‘My Account’ to register as a shopper</li>\n\t<li>Continue initiates the second step in the flow</li>\n\t<li>Login retrieves stored shopper details to facilitate completing of checkout forms and auto-populates the fields for ease of use.</li>\n</ul>\n<h3>Page: One-page Checkout (step two/three)</h3>\n<a href=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-8.png\"><img class=\"alignnone size-full wp-image-834\" title=\"magento-wireframes-8\" src=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-8.png\" alt=\"Magento Commerce wireframe of one step checkout (billing / shipping)\" width=\"570\" height=\"331\" /></a>\n<h4>User Experiences:</h4>\n<strong>Shopper</strong> - Second step in one-page checkout flow, AJAX interaction updates the page for shopper to enter or confirm billing information and choose the same address for shipping or select to enter a different shipping address. Returning customers have the fields pre-populated for easy checkout.\n\n<strong>Store Manager</strong> - Customer service may edit shopper shipping address if necessary to complete the transaction. This step is for the shopper to send their billing details. The back office collects customer data when shopper chooses to create account.\n\n<em>Interactive / Elements:</em>\n<ul>\n\t<li>Billing information is the second step in the AJAX experience.</li>\n\t<li>Steps in checkout flow are reported on screen to indicate progress and confirm shopper billing, shipping address and method as well payment method</li>\n\t<li>Shopper chooses whether or not to use the same address as billing to ship the purchase to or create a new address entry for shipment in the third step. When shopper elects to ship to the same address as billing the next (3rd) step is skipped as billing address is stored for the shipping address too</li>\n\t<li>Continue initiates the third or fourth step in the flow</li>\n</ul>\n<h3>Page: One-page Checkout (step four)</h3>\n<a href=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-9.png\"><img class=\"alignnone size-full wp-image-835\" title=\"magento-wireframes-9\" src=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-9.png\" alt=\"Magento Commerce wireframe of one step checkout (shipping options)\" width=\"570\" height=\"333\" /></a>\n<h4>User Experiences:</h4>\n<strong>Shopper</strong> - Fourth step in one-page checkout flow, (third step is address entry for shipping, very similar to billing address form). AJAX interaction updates the page for shopper to choose a shipping method. Also shopper has an option to ‘gift’ the purchase and notify the recipient by email with a ‘gift message’.\n\n<strong>Store Manager</strong> - Customer service process the order/shipment and notifies the shopper when the shipment is fulfilled using back-office tools.\n\n<em>Interactive / Elements:</em>\n<ul>\n\t<li>Shipping Method is the fourth (4th) step in the flow</li>\n\t<li>Steps in checkout flow are reported on screen to indicate progress and confirm shopper billing, shipping address and method as well payment method</li>\n\t<li>Option to ‘gift’ the purchase and notify the recipient by email suing the ‘gift message’</li>\n\t<li>Continue initiates the third or fifth step in the flow</li>\n</ul>\n<h3>Page: One-page Checkout (step five)</h3>\n<a href=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-10.png\"><img class=\"alignnone size-full wp-image-836\" title=\"magento-wireframes-10\" src=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-10.png\" alt=\"Magento Commerce wireframe of one step checkout (payment options)\" width=\"570\" height=\"331\" /></a>\n<h4>User Experiences:</h4>\n<strong>Shopper</strong> - Fifth (5th) step in one-page checkout flow. Shopper selects an available payment methods and screen is updated with entry form; shopper completes form and payment information is stored; When the shopper continues the next step is to review/confirm the order details.\n\n<strong>Store Manager</strong> - Customer service verifies payment processing depending on options set-up in the back-office for the payment gateway. Orders may be declined if fraud is suspected. The payment authorization process uses the information supplied by shopper here.\n\n<em>Interactive / Elements:</em>\n<ul>\n\t<li>Payment Method is the fifth (5th) step in the flow</li>\n\t<li>Steps in checkout flow are reported on screen to indicate progress and confirm shopper billing, shipping address and method as well payment method</li>\n\t<li>In this example the method chosen is Credit Card. Payment information is collected and processed with payment gateway selected in the back-office.</li>\n\t<li>Continue initiates the final ‘review’ step in the flow</li>\n</ul>\n<h3>Page: One-page Checkout (step six)</h3>\n<a href=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-11.png\"><img class=\"alignnone size-full wp-image-837\" title=\"magento-wireframes-11\" src=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-11.png\" alt=\"Magento Commerce wireframe of one step checkout (review / confirm order info)\" width=\"570\" height=\"334\" /></a>\n<h4>User Experiences:</h4>\n<strong>Shopper</strong> - Final (6th) step in one-page checkout flow. Shopper reviews the order details and total cost; also may follow link to edit the items the cart to add or correct quantities, etc. After reviewing the details presented shopper clicks ‘place order’ button to complete the order. Shopper will be notified with a success page in response to the order posting, or if there was any error on the transaction.\n\n<strong>Store Manager</strong> - Customer service will also be notified by email of the purchase and then manages the order with back-office tools. Various notifications are managed in the back-office for shipment notifications order cancellation, etc. Returns may also be posted in the back-office. Depending on payment gateway options store manager should process payments using gateway user interface (separate from back-office).\n\n<em>Interactive / Elements:</em>\n<ul>\n\t<li>Order Review is the final (6th) step in the flow</li>\n\t<li>Steps in checkout flow are reported on screen to indicate progress and confirm shopper billing, shipping address and method as well payment method</li>\n\t<li>Purchase summary of items and total cost for shopper confirmation</li>\n\t<li>Option to edit the items in the cart, add, etc.</li>\n\t<li>Place order action competes the purchase. The shopper will be notified with a success page in response to the order posting or if there was any error on the transaction</li>\n</ul>\n<h3>Page: Checkout Success</h3>\n<a href=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-12.png\"><img class=\"alignnone size-full wp-image-838\" title=\"magento-wireframes-12\" src=\"http://pixelhandler.com/wp-content/uploads/2011/07/magento-wireframes-12.png\" alt=\"Magento Commerce wireframe of one step checkout (success / thank you page)\" width=\"570\" height=\"332\" /></a>\n<h4>User Experiences:</h4>\n<strong>Shopper</strong> - Success page shows order number link to shopper to view and print order invoice and details. Continue shopping button provides an option to shopper to go back to the storefront and browser more products. My Orders block show customer recent purchase and give an option to add products to a now empty cart.\n\n<strong>Store Manager</strong> - Orders collected on storefront are stored in the back office tools for store management / customer service to interact with including notification of shipping, status updates (complete, pending, etc.); store manager view sales reports, status of orders, inventory, merchandising, storefront content, product details and many other tasks to successfully interact with online shoppers.\n\n<em>Interactive / Elements:</em>\n<ul>\n\t<li>Order Completed, Link to order details and button to continue shopping</li>\n\t<li>Mini-cart is now empty following competed order</li>\n\t<li>My Orders block shows recent purchases to allow quick re-order of products</li>\n</ul>",
  "date": "2011-07-13T00:00:00.000Z",
  "excerpt": "Building an ecommerce site and considering magento commerce as the code base?\nWell then, I have a treat for you. I've decided to share my **magento commerce\nwireframes**",
  "id": "45f7e37e-10c9-41a4-b8ab-0b862526b0a9",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "wireframing-templates-for-magento-commerce-with-user-experience-notes",
  "title": "Wireframing Templates for Magento Commerce With User Experience Notes"
},
{
  "body": "### Test-driven development (TDD) :\n\nA software development process that relies on the repetition of a very short\ndevelopment cycle: **first** the developer writes a **failing automated test\ncase** that defines a desired improvement or new function, **then** produces\n**code to pass that test** and finally refactors the new code to acceptable\nstandards.\n\nref: [http://en.wikipedia.org/wiki/Test-\ndriven_development](http://en.wikipedia.org/wiki/Test-driven_development)\n\n### Behavior-driven development (BDD)\n\nIntroducing BDD : [http://blog.dannorth.net/introducing-\nbdd/](http://blog.dannorth.net/introducing-bdd/)\n\n_\"…where to start, what to test and what not to test, how much to test in one\ngo, what to call their tests, and how to understand why a test fails.\"_\n\nBasically use language/terminology that everyone on the project understands;\nusing a pattern (e.g. Given, When, Then.) to test expected behavior.\n\n_\"Developers discovered it could do at least some of their documentation for\nthem, so they started to write test methods that were real sentences.\"_\n\n### This article is about…\n\n  1. Using QUnit with test-driven development (TDD)\n  2. Example: utility method for weekend (only) content\n  3. First, write tests to describe the expected behavior that fail\n  4. Next, code to pass the tests\n  5. **The result**: a short utility function, the test script describes what the code does (behavior), is unit tested, and doubles as documentation for the code.\n\n### TDD Process\n\n  1. Add a test\n  2. Run all tests and see if the new one fails\n  3. Write some code\n  4. Run the automated tests and see them succeed\n  5. Refactor code\n  6. Repeat\n\n_\"Test-driven development constantly repeats the steps of adding test cases\nthat fail, passing them, and refactoring. Receiving the expected test results\nat each stage reinforces the programmer's mental model of the code, boosts\nconfidence and increases productivity.\"_\n\n_- Lather, Rinse, Repeat_\n\n### Maybe the task is worth it…\n\n**From marketForce :** For weekend traffic, the one word difference had a +17.58% RPV Lift (98.01% Confidence) and a +16.15% Conversion Lift (97.53% Confidence) _So, I think it’s worth…_\n\n– this forecasts to an incremental **$XXX,000** in annual revenues.\n\n### Time will only tell…\n\nCould have used…\n\n    \n    \n      var today = new Date(); \n      if (today.getDay() == 0 || today.getDay() == 6) { \n        $('#dr_billingContainer h3:eq(0)').html('XXXX XXXX');\n      }\n    \n\n…Instead chose to make a jQuery plugin that acts as a utility method that can\neasily be reused for other sites\n\n> Javascript is all about behavior. Begin by writing some use cases or stories\nof what users will experience.\n\n### Plugin / utility method :  TODO…\n\n    \n    \n      /**  \n       *  $.fn.isWeekend() plugin to test if browsing on Sat./Sun.\n       *  checks a date object to see if the day is a weekend day, Saturday / Sunday\n       *  requires Date object as argument and jQuery\n       *  dr.isWeekend alias for plugin to use as utility function\n       *  @return true/false\n       */\n    \n\nWhat's Needed? What behavior will we test for?\n\n  * is dr a global variable.\n  * dr.isWeekend() expects argument of object type Date\n  * dr.isWeekend() plugin returns true or false for each day of the week\n\n### QUnit : Start w/ HTML\n\n    \n    \n    <!DoCtYpE html>\n    <html>\n      <head>\n        <!-- QUnit CSS, JS, etc. -->\n      </head>\n      <body>\n        <h1 id=\"qunit-header\">QUnit Tests for ...</h3>\n        <h2 id=\"qunit-banner\"></h2>\n        <div id=\"qunit-testrunner-toolbar\"></div>\n        <h2 id=\"qunit-userAgent\"></h2>\n        <ol id=\"qunit-tests\"></ol>\n        <div id=\"qunit-fixture\">test markup</div>\n      </body>\n    </html>\n    \n\n### What does this look like? Let's see it in action with JSFIDDLE\n\n> Tip: click the 'Result' tab to see test results; then click the test to\nexpand (0, 1, 1) and see the details.\n\n### Setup testing : [JSFIDDLE](http://jsfiddle.net/pixelhandler/NwPD5/)\n\n### Write a test : to fail\n\n    \n    \n      /* namespace */\n      module('namespace check');\n      test('is dr a global variable.',function(){\n          expect(1);\n          ok( window.dr, 'dr namespace is present');\n      });\n    \n\n### Add namespace test :  …fails\n\n### Add some code :\n\n    \n    \n      if (!window.dr) { var dr = {}; } // using dr as namespace\n    \n\n### Code for namesapce :  …passes\n\n### Add some helper code :  in a module\n\n    \n    \n      module(\"dr.isWeekend() utility fn uses jQuery\", {\n        setup: function() {\n          dr.date = new Date();\n          dr.weekdays = [1,2,3,4,5];\n          dr.weekends = [0,6];\n        },\n        teardown: function() {\n          delete dr.date;\n          delete dr.weekdays;\n          delete dr.weekends;\n        }\n      });\n    \n\n### Add a module w/ fixture : to run with each test\n\n### Add a test :  Arrange, Act, Assert\n\n    \n    \n      test(\"dr.isWeekend() expects argument of object type Date\", function(){\n          // Arrange - use setup() for dr.date\n          var testPluginDefault;\n          // Act\n          testPluginDefault = dr.isWeekend();\n          // Assert\n          expect(1);\n          notStrictEqual( testPluginDefault, 'error', \"Plugin does not return 'error' comparing with notStrictEqual\");\n      });\n    \n\n### Test for plugin / method :  …fails\n\n### Code for plugin :  skeleton\n\n    \n    \n      (function($) {\n    \n      $.fn.isWeekend = function(options) {\n          var defaults = {};\n          opts = $.extend({},defaults, options);\n          // return this.each(function() { \n              // code plugin here ...\n          // });\n      };\n      dr.isWeekend = $.fn.isWeekend;\n    \n      })(jQuery);\n    \n\n### Code for plugin skeleton :  …passes\n\n### Add more to the test :  date object?\n\n    \n    \n      test(\"dr.isWeekend() expects argument of object type Date\", function(){\n          // ...\n          failDate = [];\n          testPluginFalse = dr.isWeekend({ date: failDate });\n          // Assert\n          expect(2);\n          // ...\n          equal( testPluginFalse, 'invalid', \"Plugin returns sting 'invalid' if argument is not Date object\");\n      });\n    \n\n### Add more to the test :  …fails\n\n### Work it out :\n\n    \n    \n      $.fn.isWeekend = function(options) {\n          var defaults, opts;\n          defaults = { date: new Date() };\n          opts = $.extend({},defaults, options);\n          if (Object.prototype.toString.call(opts.date) === '[object Date]') {\n              opts.dateOk = true;\n          } else {\n              return 'invalid';\n          }\n      };\n    \n\n### Code to :  pass the test\n\n### More testing :\n\n    \n    \n      // Act\n      // ...\n      testPluginTrue = dr.isWeekend({ date: dr.date });\n      // Assert\n      expect(3);\n      // ...\n      notStrictEqual( testPluginTrue, 'invalid', \"Plugin does not return 'invalid' comparing with notStrictEqual\");\n    \n\n### More testing :  …passes, already :)\n\n### Write some tests for logic\n\n    \n    \n      test(\"dr.isWeekend() plugin returns true or false for each day of the week\", function(){\n          // Arrange - use setup() for dr.date, dr.weekdays, dr.weekends\n          var n, weekday, weekend;\n    \n          // Act\n          n = 0;\n          weekend = $.inArray(n, dr.weekends);\n          n = 1;\n          weekday = $.inArray(n, dr.weekdays);\n    \n          // Assert\n          expect(2);\n          equal(weekend, 0, \"testing a weekend value\");\n          equal(weekday, 0, \"testing a weekday value\");\n      });\n    \n\n### Write some tests for logic :  …passes\n\n### Write some test for behavior :\n\n    \n    \n      // Assert\n      expect(11);\n      equal(weekend, 0, \"testing a weekend value\");\n      equal(weekday, 0, \"testing a weekday value\");\n      equal(isSunday, true, \"Yes, 11/28/2010 is Sunday a weekend\" );\n      equal(isMonday, false, \"Yes, 11/29/2010 is Monday a weekday\" );\n      equal(isTuesday, false, \"Yes, Tuesday a weekday\" );\n      equal(isWednesday, false, \"Yes, Wednesday a weekday\" );\n      equal(isThursday, false, \"Yes, Thursday a weekday\" );\n      equal(isFriday, false, \"Yes, Friday a weekday\" );\n      equal(isSaturday, true, \"Yes, Saturday a weekday\" );\n      equal(isTodayAWeekend, true, \"Is today a weekend: true if today is a weekend\" );\n      equal(isTodayAWeekend, false, \"Is today a weekend: false if today is a weekday\" );\n    \n\n### Write some test for behavior :  …fails\n\n### Code the expected behavior :\n\n    \n    \n      // ...\n      weekdays = [1,2,3,4,5];\n      weekends = [0,6];\n      if (Object.prototype.toString.call(opts.date) === '[object Date]') {\n          // check if weekend using getDay() -> returns number 0-6 for day of week\n          opts.n = opts.date.getDay();\n          if ( $.inArray(opts.n , weekends) > -1 ) {\n              return true;\n          } else if ( $.inArray(opts.n , weekdays) > -1 ) {\n              return false;\n          }\n          return 'error';\n      } else {\n          return 'invalid';\n      }\n    \n\n### 1 fail  … everyday can't be a weekend :(\n\n### Another example :  input helper text\n\n### Another example :  input helper text\n\n### Links :\n\n  * This code - [(github.com) gist](https://gist.github.com/d379c952af637aeb0e51) | [jsfiddle.net ( append 1/ - 11/ )](http://jsfiddle.net/pixelhandler/NwPD5/)\n  * This presentation Source - [gist](https://gist.github.com/eee65f0f1d3b82b53ed9)\n  * QUnit - [Documentation](http://docs.jquery.com/Qunit) | [Code](https://github.com/jquery/qunit) | [JS](https://github.com/jquery/qunit/raw/master/qunit/qunit.js) | [CSS](https://github.com/jquery/qunit/raw/master/qunit/qunit.css)\n  * Notes - [TDD (wikipedia)](http://en.wikipedia.org/wiki/Test-driven_development) | [BDD (blog.dannorth.net)](http://blog.dannorth.net/introducing-bdd/) | [3-A's ](http://integralpath.blogs.com/thinkingoutloud/2005/09/principles_of_t.html)\n  * Tools - [jslint.com](http://jslint.com/) | [javascriptcompressor.com](http://javascriptcompressor.com/)\n  * Presentation: [Slides](http://skript.co/talks/qunit/)\n",
  "date": "2010-12-02T00:00:00.000Z",
  "excerpt": "### Who writes tests anyway?\n\n  * jQuery uses QUnit \n\nDocs: [http://docs.jquery.com/Qunit](http://docs.jquery.com/Qunit)\n\nCode: [https://github.com/jquery/qunit](https://github.com/jquery/qunit)\n\n  * QUnit is a powerful, easy-to-use, JavaScript test suite.\n  * It's used by the jQuery project to test its code and plugins but is capable of testing any generic JavaScript code",
  "id": "288d9b14-4171-404d-9a71-d3a2c7104b40",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "test-driven-development-tdd-using-javascript-with-qunit",
  "title": "Test-driven Development (TDD) Using Javascript With QUnit"
},
{
  "body": "Each test will get values at different stages of user interaction with text\ninput field.\n\n  1. simulate user entering text within input field\n  2. simulate user leaving input field\n  3. simulate user re-entering input\n\n**Tests:**\n\n  1. Search form value empty prior to using searchText plugin\n  2. searchText jQuery Plugin With No Parameters\n  3. searchText jQuery Plugin With helperText Parameter\n  4. searchText jQuery Plugin With forceReset Parameter\n_[QUnit](http://docs.jquery.com/QUnit) is a lean testing framework used by the\ncontributors to the jQuery JavaScript library. _\n\n    \n    // documentation on writing tests here: http://docs.jquery.com/QUnit\n    // source : https://github.com/jquery/qunit\n    \n    // global var htmlsrc for namespace\n    if (!window.htmlsrc) {var htmlsrc = {};}\n    /*\n     * .searchText() testing user interaction with form input behaviors\n     */\n    \n    /* namespace */\n    module('namespace check');\n    test('is htmlsrc a global variable',function(){\n    \texpect(1);\n    \tok( window.htmlsrc, 'htmlsrc namespace is present');\n    });\n    \n    /* fixture */\n    htmlsrc.testMarkup = '#qunit-fixture';\n    \n    module(\".searchText() jQuery Plugin\", {\n      setup: function() {\n        htmlsrc.testForm = '<form action=\"submit\" method=\"get\" accept-charset=\"utf-8\" id=\"searchform\"><input type=\"text\" name=\"s\" value=\"\" id=\"s\" /><input type=\"submit\" val=\"&rarr;\" name=\"submit\" /></form>';\n      },\n      teardown: function() {\n        $(htmlsrc.testMarkup).empty();\n      }\n    });\n    \n    test(\"Search form value empty prior to using searchText plugin\", function() {\n    \n      // Arrange\n      var _Form, _Selector, _Value;  \n      _Form = $(htmlsrc.testForm).appendTo(htmlsrc.testMarkup);\n    \n      // Act\n      _Selector = 'input[type=\"text\"]';\n      _Value = $(_Selector,_Form).val();\n    \n      // Assert\n      expect(1);\n      same(_Value,\"\", \"text input field should have be empty, value is empty string\");\n    });\n    \n    test(\"searchText jQuery Plugin With No Parameters\", function() {\n    \n      // Arrange\n      var _Form, _Selector, _Value = {};  \n      _Form = $(htmlsrc.testForm).appendTo(htmlsrc.testMarkup);\n    \n      // Act\n      _Form.searchText();\n      _Selector = 'input[type=\"text\"]';\n      _Value.a = $(_Selector, _Form).val();\n      _Value.b = $(_Selector, _Form).focus().val();\n      _Value.c = $(_Selector, _Form).focus().blur().val();\n      $(_Selector, _Form).blur();\n      _Value.c = $(_Selector, _Form).val();\n    \n      // Assert\n      expect(3);\n      same(_Value.a, \"Search\", \"text input field should have the text 'Search'\");\n      same(_Value.b, \"\", \"text input field should not have any text on focus event\");\n      same(_Value.c, \"Search\", \"text 'Search' is devault after blur event\");\n    });\n    \n    test(\"searchText jQuery Plugin With helperText Parameter\", function() {\n    \n      // Arrange\n      var _Form, _Selector, _Value = {};\n      _Form = $(htmlsrc.testForm).appendTo(htmlsrc.testMarkup);\n      _Selector = 'input[type=\"text\"]';\n    \n      // Act\n      _Form.searchText({ \n        helperText\t: \"Search our site...\"\n      });\n      // get values at different stages of user interaction with text input field\n      _Value.a = $(_Selector, _Form).val();\n      // simulate user entering text within input field\n      $(_Selector, _Form).focus();\n      _Value.b = $(_Selector, _Form).val();\n      $(_Selector, _Form).val(\"find it please\");\n      // simulate user leaving input field\n      $(_Selector, _Form).blur();\n      _Value.c = $(_Selector, _Form).val();\n      // simulate user re-entering input\n      $(_Selector, _Form).focus();\n      _Value.d = $(_Selector, _Form).val();\n    \n      // Assert\n      expect(4);\n      same(_Value.a, \"Search our site...\", \"text input field should have the custom text 'Search our site...'\");\n      same(_Value.b, \"\", \"text input field should not have any text on focus event\");\n      same(_Value.c, \"find it please\", \"new text value is kept after blur event\");\n      same(_Value.d, \"find it please\", \"new text value is not reset after re-entering input field\");\n    });\n    \n    test(\"searchText jQuery Plugin With forceReset Parameter\", function() {\n    \n      // Arrange\n      var _Form, _Selector, _Value = {};\n      _Form = $(htmlsrc.testForm).appendTo(htmlsrc.testMarkup);\n      _Selector = 'input[type=\"text\"]';\n    \n      // Act\n      _Form.searchText({ \n        forceReset : true\n      });\n      // get values at different stages of user interaction with text input field\n      _Value.a = $(_Selector, _Form).val();\n      // simulate user entering text within input field\n      $(_Selector, _Form).focus();\n      _Value.b = $(_Selector, _Form).val();\n      $(_Selector, _Form).val(\"I am looking for cheese\");\n      // simulate user leaving input field\n      $(_Selector, _Form).blur();\n      _Value.c = $(_Selector, _Form).val();\n      // simulate user re-entering input\n      $(_Selector, _Form).focus();\n      _Value.d = $(_Selector, _Form).val();\n    \n      // Assert\n      expect(4);\n      same(_Value.a, \"Search\", \"text input field should have the default text 'Search'\");\n      same(_Value.b, \"\", \"text input field should not have any text on focus event\");\n      same(_Value.c, \"I am looking for cheese\", \"new text value is kept after blur event\");\n      same(_Value.d, \"\", \"new text value is forced to reset after re-entering (focus) input\");\n    });\n",
  "date": "2010-11-11T00:00:00.000Z",
  "excerpt": "The purpose of this code is to test the behavior of the \n[.searchText() jQuery plugin](http://html-src.com/web-dev/71/searchtext-jquery-plugin-to-add-helper-text-in-search-input/). \n**[Source Code](https://gist.github.com/665652) |\n[Demo and QUnit tests](http://code.html-src.com/665652/)**",
  "id": "6d023e28-0a73-464e-a8ae-b0988dd0c403",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "qunit-tests-for-searchtext-search-form-helper-plugin",
  "title": "QUnit Tests for .searchText() Search Form Helper Plugin"
},
{
  "body": "<!-- Working example at : [code.html-src.com/621429](http://code.html-\nsrc.com/621429/) be sure to view your browser console. -->\n \n    \n    <!doctype html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\"/>\n        <title>Event Pooling, or perhaps Pub/Sub</title>\n        <script type=\"text/javascript\" charset=\"utf-8\" src=\"http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js\"></script>\n    </head>\n    <body>\n    <strong>Who is this?</strong>\n    <form action=\"#\" method=\"get\" accept-charset=\"utf-8\" id=\"whoisit\">\n        <p><label for=\"name\">name</label> <input type=\"text\" name=\"name\" value=\"\" id=\"name\">\n        </p>\n        <p><label for=\"email\">email</label> <input type=\"email\" name=\"email\" value=\"\" id=\"email\">\n        </p>\n        <p><input type=\"submit\" value=\"Continue &rarr;\" id=\"submit\"></p>\n    </form>\n    </body>\n    <script type=\"text/javascript\" charset=\"utf-8\" src=\"script.js\"></script>\n    </html>\n    \n    // Event pooling script\n    (function($) { // $ is jQuery \n    \n        var eventpooling = function() {\n            // broadcast events on elements\n            $('#name').bind('blur', function(event) {\n                $(document).trigger('NAME_CHANGED',event.target);\n            });\n            $('#email').bind('blur', function(event) {\n                $(document).trigger('EMAIL_CHANGED',event.target);\n            });\n            $('#submit').bind('click', function(event) {\n                $(document).trigger('SUBMIT_CLICKED',event);\n            });\n    \n            // Pool events on document\n            $(document).bind('NAME_CHANGED EMAIL_CHANGED SUBMIT_CLICKED', function(event) {\n                //Handler(s)\n                $.log(event.type);\n            })\n            .bind('NAME_CHANGED', function(event, obj) {\n                //Handler(s)\n                nameChangedHandler(event, obj);\n            })\n            .bind('EMAIL_CHANGED', function(event, obj) {\n                //Handler(s)\n                emailChangedHandler(event, obj);\n            })\n            .bind('SUBMIT_CLICKED', function(event) {\n                //Handler(s)\n                alert(\"form valid? \"+submitClickHandler(event));\n            });\n    \n            // properties\n            var IS_NAME_VALID, IS_EMAIL_VALID;\n    \n            // Common methods\n            function responder(str) {\n                var response = \"Are you really named: \";\n                return response + str;\n            }\n            function readyToSubmit() {\n                var ready = (IS_NAME_VALID === true && IS_EMAIL_VALID === true) || false;\n                if (ready === true) {\n                    $('#submit').removeAttr('disabled');\n                }\n                return ready;\n            }\n    \n            // validation methods\n            function validater(event,obj) {\n                $.log('validating: '+ event.type);\n                var valid = false;\n                var $obj = $(obj);\n                $obj.str = $obj.val();\n                $.log('value: '+ $obj.str);\n                if (event.type == 'NAME_CHANGED') {\n                    valid = notEmpty($obj.str);\n                    IS_NAME_VALID = valid;\n                }\n                if (event.type == 'EMAIL_CHANGED') {\n                    if (notEmpty($obj.str) && validEmail($obj.str)) {\n                        valid = true;\n                        IS_EMAIL_VALID = valid;\n                    } \n                }\n                $.log('valid field: '+ valid);\n                return readyToSubmit();\n            }\n            function notEmpty(str) {\n                if (str!=='') {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n            function validEmail(elmValue){\n               var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n               return emailPattern.test(elmValue);\n            }\n    \n            // Event handlers\n            function submitClickHandler(event) {\n                validater(event);\n                return readyToSubmit();\n            }\n            function nameChangedHandler(event, obj) {\n                var name = $(obj).val();\n                $.log(responder(name));\n                validater(event,obj);\n            }\n            function emailChangedHandler(event, obj) {\n                var email = $(obj).val();\n                alert('please confirm your email: '+ email);\n                validater(event,obj);\n            }\n            // initialize behavior\n            var init = (function(){\n                $('#submit').attr('disabled', 'disabled');\n            })();\n            return init;\n        };\n        \n        // debugging methods\n        $.fn.debug = function() {\n            return this.each(function(){\n                alert(this);\n            });\n        };\n        $.log = function(message) {\n            if(window.console) {\n                 console.debug(message);\n            } else {\n                 alert(message);\n            }\n        };\n        \n        // doc ready\n        $(function() {\n            try {\n                eventpooling();\n            } catch(oops) {\n                $.log(oops);\n            }\n        });\n        \n    })(jQuery);\n",
  "date": "2010-11-06T00:00:00.000Z",
  "excerpt": "Example of using custom events in jQuery for event pooling. Elements broadcast\n(trigger) events and the document listens (binds) responding with calls to\nhandlers based on. So, the methods to handle the events are loosely coupled\nwith the UI elements and their behaviors. similar to other bind and trigger\ntype of pub/sub (observer pattern).",
  "id": "e3f59386-f2af-461e-9c97-66528f83e1d7",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "event-pooling-example-using-jquery",
  "title": "Event Pooling Example Using jQuery"
},
{
  "body": "\n    \n    (function($) {\n    /**  \n     *  .searchText()\n     *\t\tadd some helper text to search input field\n     */\n    $.fn.searchText = function(options) {\n    \tvar defaults = {\n    \t\thelperText : 'Search',\n    \t\tinputId    : '#s',\n    \t\tforceReset : false\n    \t};\n    \tvar opts = $.extend({},defaults, options);\n    \treturn this.each(function() {\n    \t\t// write helper text inside input field\n    \t\t$(opts.inputId).bind('blur', {msg: opts.helperText}, function(event){\n    \t\t\t// $.log(event.type + \" : \" + event.target.id + \" : \" + event.data.msg);\n    \t\t\tvar _self = $(this);\n    \t\t\tif (_self.val() === '') {\n    \t\t\t\t_self.val(event.data.msg);\n    \t\t\t}\n    \t\t\treturn false;\n    \t\t}).bind('focus', {msg: opts.helperText}, function(event){\n    \t\t\tvar _self = $(this);\n    \t\t\tif (opts.forceReset || _self.val() === event.data.msg) {\n    \t\t\t\t// clear search input form\n    \t\t\t\t_self.val('');\n    \t\t\t}\n    \t\t\treturn false;\n    \t\t}).trigger('blur');\n    \t});\n    };\n    })(jQuery);\n    \n    // Use the plugin in your document ready block\n    // Use plugin when WordPress search form id is present\n    //   - $('#searchform').searchText();\n    // Call plugin with option to force reseting the text on focus\n    $('#searchform').searchText({\n    \thelperText : 'Search',\n    \tinputId    : '#s',\n    \tforceReset : true\n    });\n\n**Use the plugin in your document ready :**\n    \n    \n    // use plugin when WordPress search form id is present\n    $('#searchform').searchText();\n    \n\n**Or,**\n    \n    \n    // call plugin with option to force reseting the text on focus\n    $('#searchform').searchText({\n    \thelperText : 'Search',\n    \tinputId    : '#s',\n    \tforceReset : true\n    });\n    \n    \n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <title>HTML for .searchText() jQuery Plugin, custom helper text input value</title>\n      <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"></script>\n    </head>\n    <body>\n      <h1>.searchText() jQuery Plugin, adding search helper text / behavior</h1>\n      <ol>\n        <li>\n          <p><strong>Default options</strong>, &quot;Search&quot; text added to input&hellip;</p>\n          <form action=\"#\" method=\"get\" accept-charset=\"utf-8\" id=\"defaultform\">\n            <input type=\"text\" name=\"s\" value=\"\" id=\"d\" />\n            <input type=\"submit\" val=\"submit\" name=\"submit\" />\n          </form>\n        </li>\n      \n        <li>\n          <p>Extend default options, forcing text to <strong>reset upon re-entry</strong>&hellip;</strong></p>\n          <form action=\"#\" method=\"get\" accept-charset=\"utf-8\" id=\"searchform\">\n            <input type=\"text\" name=\"s\" value=\"\" id=\"s\" />\n            <input type=\"submit\" val=\"submit\" name=\"submit\" />\n          </form>\n        </li>\n      \n        <li>\n          <p>Extend default options, with <strong>custom helper</strong> text&hellip;</p>\n          <form action=\"#\" method=\"get\" accept-charset=\"utf-8\" id=\"findform\">\n            <input type=\"text\" name=\"s\" value=\"\" id=\"f\" />\n            <input type=\"submit\" val=\"submit\" name=\"submit\" />\n          </form>\n        </li>\n      \n        <li>\n          <p>Extend default options, with <strong>helperText</strong> and <strong>forceReset</strong> options&hellip;</p>\n          <form action=\"#\" method=\"get\" accept-charset=\"utf-8\" id=\"whereform\">\n            <input type=\"text\" name=\"s\" value=\"\" id=\"w\" />\n            <input type=\"submit\" val=\"submit\" name=\"submit\" />\n          </form>\n        </li>\n      </ol>\n      <h2>Unit Tests</h2>\n      <p><a href=\"unitTests.html\">Click to run tests with QUnit!</a></p>\n      <script src=\"jquery.htmlsrc.searchText.js\"></script>\n      <script type=\"text/javascript\" charset=\"utf-8\">\n      (function($){\n        // 1. Extend default options\n        $('#defaultform').searchText({\n        \tinputId    : '#d'\n        });\n    \n        // 2. Extend default options, forcing field to reset upon re-entry\n        // was already in the jquery.htmlsrc.searchText.js file\n    \n        // 3. Extend default options, with custom helper text\n        $('#findform').searchText({\n        \thelperText : 'Find something...',\n        \tinputId    : '#f'\n        });\n    \n        // 4. \n        $('#whereform').searchText({\n        \thelperText : 'where is...',\n        \tinputId    : '#w',\n        \tforceReset : true\n        });\n    \n      })(this.jQuery);\n      </script>\n    </body>\n    </html>\n\n**Clone the code snippet with git…**\n    \n    \n    git clone git://gist.github.com/665652.git\n    \n    \n    // documentation on writing tests here: http://docs.jquery.com/QUnit\n    // source : https://github.com/jquery/qunit\n    \n    // global var htmlsrc for namespace\n    if (!window.htmlsrc) {var htmlsrc = {};}\n    /*\n     * .searchText() testing user interaction with form input behaviors\n     */\n    \n    /* namespace */\n    module('namespace check');\n    test('is htmlsrc a global variable',function(){\n    \texpect(1);\n    \tok( window.htmlsrc, 'htmlsrc namespace is present');\n    });\n    \n    /* fixture */\n    htmlsrc.testMarkup = '#qunit-fixture';\n    \n    module(\".searchText() jQuery Plugin\", {\n      setup: function() {\n        htmlsrc.testForm = '<form action=\"submit\" method=\"get\" accept-charset=\"utf-8\" id=\"searchform\"><input type=\"text\" name=\"s\" value=\"\" id=\"s\" /><input type=\"submit\" val=\"&rarr;\" name=\"submit\" /></form>';\n      },\n      teardown: function() {\n        $(htmlsrc.testMarkup).empty();\n      }\n    });\n    \n    test(\"Search form value empty prior to using searchText plugin\", function() {\n    \n      // Arrange\n      var _Form, _Selector, _Value;  \n      _Form = $(htmlsrc.testForm).appendTo(htmlsrc.testMarkup);\n    \n      // Act\n      _Selector = 'input[type=\"text\"]';\n      _Value = $(_Selector,_Form).val();\n    \n      // Assert\n      expect(1);\n      same(_Value,\"\", \"text input field should have be empty, value is empty string\");\n    });\n    \n    test(\"searchText jQuery Plugin With No Parameters\", function() {\n    \n      // Arrange\n      var _Form, _Selector, _Value = {};  \n      _Form = $(htmlsrc.testForm).appendTo(htmlsrc.testMarkup);\n    \n      // Act\n      _Form.searchText();\n      _Selector = 'input[type=\"text\"]';\n      _Value.a = $(_Selector, _Form).val();\n      _Value.b = $(_Selector, _Form).focus().val();\n      _Value.c = $(_Selector, _Form).focus().blur().val();\n      $(_Selector, _Form).blur();\n      _Value.c = $(_Selector, _Form).val();\n    \n      // Assert\n      expect(3);\n      same(_Value.a, \"Search\", \"text input field should have the text 'Search'\");\n      same(_Value.b, \"\", \"text input field should not have any text on focus event\");\n      same(_Value.c, \"Search\", \"text 'Search' is devault after blur event\");\n    });\n    \n    test(\"searchText jQuery Plugin With helperText Parameter\", function() {\n    \n      // Arrange\n      var _Form, _Selector, _Value = {};\n      _Form = $(htmlsrc.testForm).appendTo(htmlsrc.testMarkup);\n      _Selector = 'input[type=\"text\"]';\n    \n      // Act\n      _Form.searchText({ \n        helperText\t: \"Search our site...\"\n      });\n      // get values at different stages of user interaction with text input field\n      _Value.a = $(_Selector, _Form).val();\n      // simulate user entering text within input field\n      $(_Selector, _Form).focus();\n      _Value.b = $(_Selector, _Form).val();\n      $(_Selector, _Form).val(\"find it please\");\n      // simulate user leaving input field\n      $(_Selector, _Form).blur();\n      _Value.c = $(_Selector, _Form).val();\n      // simulate user re-entering input\n      $(_Selector, _Form).focus();\n      _Value.d = $(_Selector, _Form).val();\n    \n      // Assert\n      expect(4);\n      same(_Value.a, \"Search our site...\", \"text input field should have the custom text 'Search our site...'\");\n      same(_Value.b, \"\", \"text input field should not have any text on focus event\");\n      same(_Value.c, \"find it please\", \"new text value is kept after blur event\");\n      same(_Value.d, \"find it please\", \"new text value is not reset after re-entering input field\");\n    });\n    \n    test(\"searchText jQuery Plugin With forceReset Parameter\", function() {\n    \n      // Arrange\n      var _Form, _Selector, _Value = {};\n      _Form = $(htmlsrc.testForm).appendTo(htmlsrc.testMarkup);\n      _Selector = 'input[type=\"text\"]';\n    \n      // Act\n      _Form.searchText({ \n        forceReset : true\n      });\n      // get values at different stages of user interaction with text input field\n      _Value.a = $(_Selector, _Form).val();\n      // simulate user entering text within input field\n      $(_Selector, _Form).focus();\n      _Value.b = $(_Selector, _Form).val();\n      $(_Selector, _Form).val(\"I am looking for cheese\");\n      // simulate user leaving input field\n      $(_Selector, _Form).blur();\n      _Value.c = $(_Selector, _Form).val();\n      // simulate user re-entering input\n      $(_Selector, _Form).focus();\n      _Value.d = $(_Selector, _Form).val();\n    \n      // Assert\n      expect(4);\n      same(_Value.a, \"Search\", \"text input field should have the default text 'Search'\");\n      same(_Value.b, \"\", \"text input field should not have any text on focus event\");\n      same(_Value.c, \"I am looking for cheese\", \"new text value is kept after blur event\");\n      same(_Value.d, \"\", \"new text value is forced to reset after re-entering (focus) input\");\n    });\n",
  "date": "2010-09-02T00:00:00.000Z",
  "excerpt": "This jQuery plugin script added text to an input field in a search form. The\ndefaults are set to the IDs used in a WordPress search form. The behavior can\nbe set to force clearing of text every time user causes focus event to fire in\ntext input (clicks to type). The function tirggers the focus event to start\noff with the helper text in the input field. [Demo and QUnit\ntests](http://code.html-src.com/665652/)",
  "id": "0a3e061b-d832-4835-957a-c309867dfd77",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "searchtext-jquery-plugin-to-add-helper-text-in-search-input",
  "title": "searchText() jQuery Plugin to Add Helper Text in Search Input"
},
{
  "body": "\n    \n    (function($) {\n    /**\n     *  .matchHeight()\n     *    - match heights of multiple columns that use css layout with floating elements\n     */\n    $.fn.matchHeight = function(options) {\n        // set the containing element and set elements used as columns\n        var defaults = {\n            container : '.main',\n            columns   : 'div',\n            excluded  : '.dontChangeThis, .dontChangeThat',\n            fixed     : 200\n        };\n        var opts = $.extend(defaults, options);\n        return this.each(function() {\n            var _ = { self : $(this) };\n            _.px = {};\n            _.cols = $(opts.container+' > '+opts.columns);\n            _.cols.each(function(index) {\n                _.px.index = $(this).height();\n                if ($(opts.excluded).length>0) {\n                    _.colheight = opts.fixed;\n                    return;\n                } else {\n                    if (index < 1) {\n                        _.colheight = _.px.index;\n                    } else {\n                        if (_.px.index > _.colheight) {\n                            _.colheight = _.px.index;\n                        }\n                    }\n                }\n            }).each(function(index) {\n                $(this).css({ height : _.colheight });\n            });\n        });\n    };\n    })(jQuery);\n    \n    //\n    // Call the plugin on a containing layout element with multiple columns\n    //\n    \n    /**\n     * Stuff to do as soon as the DOM is ready\n     *  - enable plugin behavior(s)\n     */\n    $(function() {\n        $('.main-container')matchHeight({\n                    container : '.main',\n                    columns   : 'div.cols',\n                    excluded  : 'body.page2, div.noColumns',\n                    fixed  : 200\n         });\n        // or us the defaults\n        // $('.container').matchHeight();\n    });\n",
  "date": "2010-08-26T00:00:00.000Z",
  "excerpt": "jQuery plugin to line up columns in a CSS layout with floating divs. This code\nhas an option to use a fixed height instead of the greatest height among the\ncolumn elements by setting a string as a (excluded) selector to indicate when\nto use the fixed height.  Call the plugin on a containing layout element with\nmultiple columns",
  "id": "63acfa2f-8b57-4395-b5c9-feeba47fbb1d",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "jquery-plugin-to-matchheight-of-multiple-columns-with-floating-elements",
  "title": "jQuery Plugin to 'matchHeight' of Multiple Columns With Floating Elements"
},
{
  "body": "## Files used to create simple skinning scripts\n\n* css\n* style.css\n* includes \n\n  * body_bottom.phtml\n  * body_top.phtml\n  * class_template.php\n  * config.php\n  * footer.phtml\n  * head.phtml\n  * topnav.phtml\n  * tracking.phtml\n* index.php\n* js \n\n  * jquery.plugins.js\n  * tail.js\n    \n    \n    <?php\n    /*\n    See more info on this article or source for setup on .local domain with MAMP\n    */\n    require_once($_SERVER['DOCUMENT_ROOT'].'/includes/config.php');\n    // arg \"Home\" appends page title, \"home\" is id for body, site is owner\n    $template = new pageTemplate(\"Home\",\"home\",\"/\",$site);\n    $template->description = \"yada yada\";\n    require_once($root.'/includes/head.phtml');\n    require_once($root.'/includes/body_top.phtml');\n    require_once($root.'/includes/topnav.phtml');\t\n    ?>\n    <div id=\"leader\" class=\"full-16\">\n    <!-- content here -->\n    </div>\n    <?php\n    require_once($root.'/includes/footer.phtml');\t\n    require_once($root.'/includes/body_bottom.phtml');\t\n    ?>\n    \n\n### includes/config.php\n\n    \n    \n    <?php\n    \n    # extra for testing, debugging, etc\n    # die(\"ERROR on line:\" . __line__);\n    error_reporting(E_ALL);\n    ini_set('display_errors','on');\n    # print_r($_SERVER);\n    # if (!session_id()) session_start();\n    \n    # Globals\n    $root = $_SERVER['DOCUMENT_ROOT'];\n    $site = \"My Site\";\n    $url = $_SERVER['SERVER_NAME'];\n    $prod = \"domain.com\";\n    $local = \"http://mysite.local:8888/\";\n    $googleAnalytics = \"XX-xxxxxxx-XX\";\n    \n    if (TRUE) { \n    \t// override for local work , use FALSE for prod. use\n    \t$url = $local;\n    } else {\n    \t// running in prod\n    \t$url = $prod;\n    \tif ($_SERVER['SERVER_NAME'] != $prod) {\n    \t\theader( 'Location: ' . 'http://' . $prod . '/') ;\n    \t}\n    }\n    \n    # Class\n    require_once($root.'/includes/class_template.php');\n    ?>\n    \n\n### includes/class_template.php\n\n    \n    \n    <?php \n    // template class\n    \n    class pageTemplate\n    {\n    \t\n    \tvar $title;\n    \tvar $description;\n    \tvar $name;\n    \tvar $type;\n    \tvar $dir;\n    \t\n    \tfunction __construct($pagetitle=\"\",$pagetype=\"details\",$path=\"\",$owner=\"\")\n    \t{\n    \t\t$this->title = $owner;\n    \t\tif ($this->title != \"\") \n    \t\t{\n    \t\t\t$this->title .= \" | \" . $pagetitle;\n    \t\t} \n    \t\telse \n    \t\t{\n    \t\t\t$this->title = $pagetitle;\n    \t\t}\n    \t\t$this->name = $pagetitle;\n    \t\t$this->description = $pagetitle;\n    \t\t$this->type = strtolower($pagetype);\n    \t\t$this->owner = $owner;\n    \t\t$this->dir = strtolower($path);\n    \t}\n    \t\n    \tfunction style($cssfile,$stamp=\"\")\n    \t{\n    \t\techo \"<link href=\"\" . $cssfile . \"?\" . round(time(), -3) . \"\" rel=\"stylesheet\" type=\"text/css\" media=\"screen\" />rn\";\n    \t}\n    \t\n    \tfunction script($jsfile)\n    \t{\n    \t\techo \"<script src=\"\" . $jsfile . \"?\" . round(time(), -3) . \"\" type=\"text/javascript\" charset=\"utf-8\"></script>rn\";\n    \t}\n    \t\n    \tfunction pagetitle()\n    \t{\n    \t\techo \"<title>\" . $this->title . \"</title>rn\";\n    \t}\n    \n    }\n    \n    ?>\n    \n\n### css/style.css\n\n    \n    \n    /* =========================== \n       Setup your grid here... \n       http://html-src.com/web-dev/53/use-ruby-gem-sass-to-generate-a-css-grid-layout/\n       =========================*/\n    \n\n### includes/head.phtml\n\n    \n    \n    <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n    \t\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n    \n    <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n    \n    <head>\n    \t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    \t<?php echo $template->pagetitle(); ?>\n    \t<meta name=\"description\" content=\"<?php echo $template->description; ?>\">\n    \t<link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\" />\n    \t<link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\" />\n    \t<?php echo $template->style(\"/css/style.css\"); ?>\n    \t<script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"></script>\n    \t<?php echo $template->script(\"/js/jquery.plugins.js\"); ?>\n    </head>\n    \n\n### includes/body_top.phtml\n\n    \n    \n    <body id=\"<?php echo $template->type ?>\" class=\"<?php echo $template->name ?>\">\n    <div id=\"wrapper\">\n    <div id=\"header\" class=\"full-16\">\n    \t<div class=\"inset\">\n    \t\t<a href=\"#mainContent\" class=\"accessibility\">&#x2193; Skip to page content</a>\n    \t\t<a id=\"mainMenu\" class=\"accessibility\">Main Menu</a>\n    \t</div><!--/.inset-->\n    \t<hr class=\"accessibility\" />\n    </div>\n    \n\n### includes/topnav.phtml\n\n    \n    \n    <div id=\"topnav\">\n    \t<ul id=\"menu\" class=\"nav\">\n    \t\t<li><a href=\"/\">Home</a><ul>\n    \t\t\t<li><a href=\"/articles/\">Articles</a></li></ul>\n    \t\t</li>\n    \t</ul>\n    </div><!--/#topnav-->\n    \n\n### index.php\n\n    \n    \n    <?php\n    /*\n    # DNS notes, running on MAMP\n    # instructions for running your site on http://mysite.local:8888/\n    \n    # edit your hosts file with Textmate\n    mate /etc/hosts\n    \n    # add your site\n    127.0.0.1 mysite.local\n    \n    # if needed flush DNS on mac \n    dscacheutil -flushcache\n    \n    # add vhosts include:\n    mate /Applications/MAMP/conf/apache/httpd.conf \n    # the code below needs to be at the end of our httpd.conf file ...\n    \n    # NameVirtualHost *\n    Include /Applications/MAMP/conf/apache/httpd-vhosts.conf\n    \n    mate /Applications/MAMP/conf/apache/httpd-vhosts.conf\n    # below are the contents of the httpd-vhosts.conf file ...\n    # be sure to change yourhomedirectory to the result of \n    cd ~\n    pwd\n    # remember to start/stop MAMP when all setup\n    \n    #\n    # Virtual Hosts\n    #\n    NameVirtualHost *:8888\n    \n    <VirtualHost *:8888>\n    \tDocumentRoot /Users/home/Sites/htdocs\n    \tServerName localhost\n    </VirtualHost>\n    \n    <VirtualHost *:8888> \n      <Directory /Users/yourhomedirectory/Sites/htdocs/simplephpskinner> \n        AllowOverride All \n      </Directory> \n      DocumentRoot /Users/yourhomedirectory/Sites/htdocs/simplephpskinner\n      ServerName mysite.local\n    </VirtualHost>\n    \n    */\n    require_once($_SERVER['DOCUMENT_ROOT'].'/includes/config.php');\n    // arg \"Home\" appends page title, \"home\" is id for body, site is owner\n    $template = new pageTemplate(\"Home\",\"home\",\"/\",$site);\n    $template->description = \"yada yada\";\n    require_once($root.'/includes/head.phtml');\n    require_once($root.'/includes/body_top.phtml');\n    require_once($root.'/includes/topnav.phtml');\t\n    ?>\n    <div id=\"leader\" class=\"full-16\">\n    <!-- content here -->\n    </div>\n    <?php\n    require_once($root.'/includes/footer.phtml');\t\n    require_once($root.'/includes/body_bottom.phtml');\t\n    ?>\n    \n\n### includes/footer.phtml\n\n    \n    \n    <div id=\"footer\">\n    \t<p class=\"quarter\">&copy; 2010 <?php echo $template->owner ?></p>\n    \t<div class=\"threeQuarter\" id=\"nav\">\n    \t\t<a href=\"/\">Home</a> |\n    \t</div>\n    \t<br class=\"clearLeft\" />\n    </div>\n    \n\n### includes/body_bottom.phtml\n\n    \n    \n    <a href=\"#mainContent\" class=\"accessibility\">&#x2191; Back to page content</a>\n    <a href=\"#mainMenu\" class=\"accessibility\">&#x2191; Back to main menu</a>\n    \t<!-- <div class=\"test\">&nbsp;</div> -->\n    </div><!--/#wrapper-->\n    <?php echo $template->script(\"js/tail.js\"); ?>\n    <?php # require_once($root.'/includes/tracking.phtml'); ?>\n    </body>\n    </html><!-- <?php echo(date(\"D F d Y\",time())); ?> -->\n    \n\n### includes/tracking.phtml\n\n    \n    \n    <script type=\"text/javascript\">\n      var _gaq = _gaq || [];\n      _gaq.push(['_setAccount', '<?php echo $googleAnalytics ?>']);\n      _gaq.push(['_trackPageview']);\n      (function() {\n        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n      })();\n    </script>\n    \n\n### js/jquery.plugins.js\n\n    \n    \n    /**\n     * jQuery go in here plugins.\n     */\n    \n\n### js/tail.js\n\n    \n    \n    /* load at end of page */\n    $(document).ready(function() { \n    \n    }); // end doc ready\n    \n",
  "date": "2010-08-15T00:00:00.000Z",
  "excerpt": "This example is based on a MAMP environment with DNS setup for a .local\ndomain, using MAMP apache's httpd.conf to set up vhosts; notes on this are in\nthe index.php file. Source code on github : [http://github.com/pixelhandler/si\nmplephpskinner](http://github.com/pixelhandler/simplephpskinner)",
  "id": "2c2260b2-6130-4ee9-b836-1b1efc47bc80",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "simple-php-skinning-scripts-using-basic-template-class",
  "title": "Simple PHP Skinning Scripts Using Basic Template Class"
},
{
  "body": "    # Allows concatenation from files ending with .js and .css  \n    # In styles.combined.css use...\n    #   <!--#include file=\"reset.css\" -->\n    #   <!--#include file=\"layout.css\" -->\n    # these will included into this single file\n    \n    <FilesMatch \".combined.js\">\n            Options +Includes\n            SetOutputFilter INCLUDES\n    </FilesMatch>\n    <FilesMatch \".combined.css\">\n            Options +Includes\n            SetOutputFilter INCLUDES\n    </FilesMatch>",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "I like to keep CSS files named separately like ; reset.css, elements.css,\nclasses.css, layout.css and so on. Also, I like to keep jQuery plugins in\nindividual files. This apache directive allows me to combine .js and .css\nfiles into a single file. This is a great performance advantage, less http\nrequests on page load; see Google's best practices for tips on combining\nexternal [css](http://code.google.com/speed/page-speed/docs/rtt.html#CombineExternalCSS) and \n[js](http://code.google.com/speed/page-speed/docs/rtt.html#CombineExternalJS).",
  "id": "79a0e9af-9c91-4f2e-8a9a-46acf1906f93",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "apache-directive-to-combine-js-and-css-files",
  "title": "Apache Directive to Combine .js and .css Files"
},
{
  "body": "## Create your proxy.php file\n\n    \n    \n    <?php\n    // Set your return content type\n    header('Content-type: text/html');\n    \n    // Website url to open\n    $daurl = 'htts://domain.com';\n    \n    // Get that website's content\n    $handle = fopen($daurl, \"r\");\n    \n    // If there is something, read and return\n    if ($handle) {\n        while (!feof($handle)) {\n            $buffer = fgets($handle, 4096);\n            echo $buffer;\n        }\n        fclose($handle);\n    }\n    ?>\n    \n\n### Call your proxy file with AJAX using jQuery\n\n    \n    \n    // requires jQuery $\n    $(function(){ \n    \t// you will need a proxy script to load remote content\n    \tvar proxy = 'proxy.php'; \n    \t$('div.container').hide();\n    \t$('div.container').load( proxy + ' div#id', function() {\n    \t\t$('div.container').show()\n    \t});\n    });\n    \n",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "To get around cross domain issues use a local proxy.php file to load the\nremote url that you would like to use on your domain and interact with AJAX.",
  "id": "246426bb-f296-4231-86f4-14b133c9d46f",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "use-proxy-file-with-php-to-load-a-url-from-remote-domain",
  "title": "Use Proxy File With PHP to Load a URL From Remote Domain"
},
{
  "body": "## Javascript function to test if image is loaded already :\n\n    \n    // Check if images load properly\n    // returns false if image not loaded\n    function imgOK(img) {\n        if (!img.complete) {\n            return false;\n        }\n        if (typeof img.naturalWidth != \"undefined\" && img.naturalWidth == 0) {\n            return false;\n        }\n        return true;\n    }\n     \n    // Note: using prototype js library for $, $$\n    // Test if images load ok\n    var tnLink = $$('.more-views a');\n    // Hide links to more views when images do no load properly.\n    if (tnLink.length>0) {\n        document.observe(\"dom:loaded\", function() {\n            tnLink.each(function(s, index) {\n                var tnImg = tnLink[index].firstDescendant();\n                var obj = $(s).firstDescendant();\n                console.log(tnImg.src + \" > is ok : \" + imgOK(obj));\n                if ( imgOK(obj) == false) {\n                    console.log('bad image!');\n                    $(s).addClassName('no-display');\n                }\n            });\n        });\n    }\n \n\n### Define a CSS class to hide the link with a bad image :\n\nCSS - no-display.css\n\n    .no-display {\n    \tdisplay: none;\n    }\n\n\n_There, no unexpected broken images in view._",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "For sites with a CMS or some easy tool to upload and break images it can be\nhelpful to test if the images are loaded, especially if you have additional\nbehavior for visitors to interact with your images, like a lightbox view.",
  "id": "c3a30eac-991a-4015-af97-30f4b728db4f",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "images-loaded-or-not-check-with-javascript",
  "title": "Images Loaded or Not? Check With JavaScript"
},
{
  "body": "\n    \n    // using jQuery library and validation plugin in this code\n    // for checking keycodes\n    function getKeyCode(event) {\n        var keycode = (event.keyCode ? event.keyCode : (event.which ? event.which : event.charCode));\n        return keycode;\n    }\n     \n    // is there an anchor as Submit button?\n    var $submit = $('a[id$=\"_submit\"]');\n    // is there any behavior already on submit, like -> onclick=\"__doPostBack(...)\"\n    $submit.action = $submit.attr('onclick'); \n     \n    $submit.click(function(e){\n        // using jQuery validation plugin to validate\n        $submit.valid = $('.myform').valid();\n        if (!$submit.valid) {\n            e.preventDefault();\n        } else {\n            // process original onclick stuff\n            $($submit.action).trigger('click');\n        }\n    });\n     \n    // submit with enter key\n    $(\".myform input\").bind(\"keydown\", function(event) {\n        // track enter key\n        var keycode = getKeyCode(event);\n        // keycode for enter key\n        if (keycode == 13) {\n             // force the 'Enter Key' to implicitly click the Sumbit button\n             $submit.click();\n             return false;\n        } else  {\n             return true;\n        }\n    });\n",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "Depending on the platform you develop on sometimes you may need to hijack an\nonclick attribute to first do some form validation on the client side. It\nwould be nice to post the form with the enter key as well, if you are using an\nanchor instead of button or input with type of submit.",
  "id": "f18ad48e-e87f-47df-bc35-82470daa8812",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "hijack-form-submit-onclick-validate-and-use-enter-key-to-post-form",
  "title": "Hijack Form's Submit Onclick, Validate, and Use Enter Key to Post Form"
},
{
  "body": "\n    \n    def importHTML\n      require 'open-uri'\n      @source = open(&quot;http://domain.com/some.html&quot;).read\n    end\n    \n    # uses a reference parameter when getting remote XML\n    def importXML\n      require 'open-uri'\n      @aclass = AClass.find(params[:id]) # expecting a param named ref\n      @content = open(&quot;http://domain.com&quot; + @aclass.ref + &quot;&amp;type=xml&quot;).read\n      respond_to do |format|\n        format.xml  { render :xml =&gt; @content }\n      end\n    end\n    \n",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "Simple blocks to use as a method to import a url in a rails app, like using\ncontent from another api import HTML with Ruby (importHTML.rb)",
  "id": "06e1cbf1-f291-4b33-b395-42c62b01de85",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "import-a-url-with-ruby",
  "title": "Import a URL With Ruby"
},
{
  "body": "\n    \n    //jQuery.noConflict();\n    (function($) { // $ is jQuery\n        // plugin for yada yada\n        $.fn.yadayada = function(options) {\n            var defaults = {\n                foo : 'bar'\n            };\n            // Extend our default options with those provided.\n            var opts = $.extend({}, defaults, options);\n            // Do something to each item\n            return this.each(function() {\n                var _ = { obj : $(this) };\n                // get settings from options\n                _.foo = _.obj.find(opts.foo);\n                /*\n                    ... code to return, chained\n                */\n            });\n        };\n        // debugging methods\n        $.fn.debug = function() {\n            return this.each(function(){\n                alert(this);\n            });\n        };\n        $.log = function(message) {\n            if(window.console) {\n                 console.debug(message);\n            } else {\n                 alert(message);\n            }\n        };\n        // end plugin\n        // Stuff to do as soon as the DOM is ready;\n        $(function() {\n            var something = $('div.something');\n            try {\n                if (something.length>0) {\n                    something.yadayada({ foo: 'no bars' });\n                }\n            } catch(oops) { $.log(oops); }\n        });\n    })(jQuery);",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "jQuery provides a quick and easy way to extend behavior. I use this code below\nto begin when writing a new jQuery plugin.",
  "id": "ecbcb94d-cc7a-4b19-8852-b3a76a0367d7",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "boilerplate-code-for-jquery-plugin-with-debug-and-logging-methods",
  "title": "Boilerplate Code for jQuery Plugin With Debug and Logging Methods"
},
{
  "body": "    \n    mysqldump --default-character-set=latin1 --opt -h localhost -u\n    export -p export > export.sql\n    \n    replace \"CHARSET=latin1\" \"CHARSET=utf8\" \"SET NAMES latin1\" \"SET NAMES\n    utf8\" < export.sql > export-utf8.sql\n    \n    mysql --user=root -p --host=localhost --default-character-set=utf8\n    cms_production < export-utf8.sql\n    ",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "Fix bad characters â€ Â after mysqldump and import",
  "id": "48f07f58-beb5-4203-8629-45619fabfd89",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "fix-bad-characters-after-mysqldump-and-import-utf-8",
  "title": "Fix Bad Characters Ã¢â¬ Ã After Mysqldump and Import Utf-8"
},
{
  "body": "## In your grid.sass file:\n\nGrid CSS as SASS (grid.sass) [download](/downloads/code/sass/grid.sass)\n\n    \n    // Grid \n    // =========================== \n    // e.g. 960px, 12 columns (px) : | 10+ | 60 + 20 (x11) | 60 + 10 | \n    \n    // Setup your grid ...\n    // total page width\n    !gTotal = 960px\n    // number of columns\n    !grid = 16\n    // gutter between columns\n    !gGutter = 20px\n    // set margin at half of gutter\t\n    !gMargin = !gGutter / 2\n    // single column width\n    !gCol = ( !gTotal / !grid ) - !gGutter\n    // assign gird values to variables for use with semantic #id's\n    !col4 = ( !gCol * 4 ) + ( !gGutter * ( 4 - 1 ) )\n    !col16 = ( !gCol * !grid) + ( !gGutter * ( !grid - 1 ) )\n    \n    // mixins\n    =colWidth(!c)\n      width = ( !gCol * !c ) + ( !gGutter * ( !c - 1 ) )\n    =column\n      display: inline\n      float: left\n      margin-right = !gMargin\n      margin-left = !gMargin\n    \n    // simple example...\n    // =========================== \n    .full, .wide\n      clear: left\n    .wide\n      +colWidth(16)\n    .full\n      width = !col16\n    .quarter, .half, .threeQuarter\n      float: left\n    .quarter\n      width = !col4\n    .half\n      width = !col4 * 2\n    .threeQuarter\n      width = !col4 * 3\n    \n    // design or prototype use...\n    // =========================== \n    =gridTest\n      background: #ccc\n      margin-bottom: .5em\n      margin-top: .5em\n      min-height: 80px\n    .col-1, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-10, .col-11, .col-12, .col-13, .col-14, .col-15, .col-16\n      +column\n      +gridTest\n    .col-16\n      background-color: transparent\n    // loop to create column widths\n    @for !i from 1 through 12\n      .col-#{!i}\n        +colWidth(!i)\n        //width = ( !gCol * !i ) + ( !gGutter * ( !i - 1 ) )\n    .full-16\n      margin: 0 auto\n      width = !gTotal\n    @for !i from 1 through 4\n      .push-#{!i}\n        margin-left = ( !gCol + !gMargin ) * !i\n    @for !i from 1 through 4\n      .pull-#{!i}\n        margin-left = 0 - ( !i * ( !gCol + !gMargin ) )\n    \n    // helpers\n    .container\n      margin-right = 0\n      margin-left = 0\n    .first\n      clear: left\n      margin-left: 0\n    .last\n      margin-right: 0\n    .indentLeft\n      margin-left = !gMargin * 2\n    .indentRight\n      margin-right = !gMargin * 2\n    .extend\n      margin-right: 0\n      margin-left: 0\n      padding-left = !gMargin * 2\n      padding-right = !gMargin * 2\n    \n\n### Execute on the command line\n\n    \n    \n    # turns ruby into CSS\n    sass grid.sass grid.css\n    \n    # check it out with textmate\n    mate grid.css\n    \n\nthis is part of my\n[SimpleSassFramework](http://github.com/pixelhandler/simpleSassFramework) for\ngenerating a boilerplate html site. See the CSS output… Grid SASS output\n(grid.css)\n    \n    .full, .wide {\n      clear: left; }\n    \n    .wide {\n      width: 940px; }\n    \n    .full {\n      width: 940px; }\n    \n    .quarter, .half, .threeQuarter {\n      float: left; }\n    \n    .quarter {\n      width: 220px; }\n    \n    .half {\n      width: 440px; }\n    \n    .threeQuarter {\n      width: 660px; }\n    \n    .col-1, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-10, .col-11, .col-12, .col-13, .col-14, .col-15, .col-16 {\n      display: inline;\n      float: left;\n      margin-right: 10px;\n      margin-left: 10px;\n      background: #ccc;\n      margin-bottom: .5em;\n      margin-top: .5em;\n      min-height: 80px; }\n    \n    .col-16 {\n      background-color: transparent; }\n    \n    .col-1 {\n      width: 40px; }\n    \n    .col-2 {\n      width: 100px; }\n    \n    .col-3 {\n      width: 160px; }\n    \n    .col-4 {\n      width: 220px; }\n    \n    .col-5 {\n      width: 280px; }\n    \n    .col-6 {\n      width: 340px; }\n    \n    .col-7 {\n      width: 400px; }\n    \n    .col-8 {\n      width: 460px; }\n    \n    .col-9 {\n      width: 520px; }\n    \n    .col-10 {\n      width: 580px; }\n    \n    .col-11 {\n      width: 640px; }\n    \n    .col-12 {\n      width: 700px; }\n    \n    .full-16 {\n      margin: 0 auto;\n      width: 960px; }\n    \n    .push-1 {\n      margin-left: 50px; }\n    \n    .push-2 {\n      margin-left: 100px; }\n    \n    .push-3 {\n      margin-left: 150px; }\n    \n    .push-4 {\n      margin-left: 200px; }\n    \n    .pull-1 {\n      margin-left: -50px; }\n    \n    .pull-2 {\n      margin-left: -100px; }\n    \n    .pull-3 {\n      margin-left: -150px; }\n    \n    .pull-4 {\n      margin-left: -200px; }\n    \n    .container {\n      margin-right: 0;\n      margin-left: 0; }\n    \n    .first {\n      clear: left;\n      margin-left: 0; }\n    \n    .last {\n      margin-right: 0; }\n    \n    .indentLeft {\n      margin-left: 20px; }\n    \n    .indentRight {\n      margin-right: 20px; }\n    \n    .extend {\n      margin-right: 0;\n      margin-left: 0;\n      padding-left: 20px;\n      padding-right: 20px; }\n    \n",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "This is a basic template tool for generating your own grid system using Sass,\nand builds on best practices of existing CSS grid systems like 960.gs or\nBlueprint in a bare bones fashion. The generated CSS includes classes for\nprototyping or designing in a browser; and also creates variables for\nassignment to your semantic id’s for cleaner markup.  More on this topic see :\n[sass-lang.com](http://sass-lang.com/)",
  "id": "82e0ea4d-9a72-4013-bd8b-d70b64fca9aa",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "use-ruby-gem-sass-to-generate-a-css-grid-layout",
  "title": "Use Ruby Gem, Sass to Generate a CSS Grid Layout"
},
{
  "body": "    \n    <!--[if lt IE 7 ]> <body class=\"ie6\"> <![endif]-->\n    <!--[if IE 7 ]>\t\t<body class=\"ie7\"> <![endif]-->\n    <!--[if IE 8 ]>\t\t<body class=\"ie8\"> <![endif]-->\n    <!--[if IE 9 ]>\t\t<body class=\"ie9\"> <![endif]-->\n    <!--[if (gt IE 9)|!(IE)]><!--> <body> <!--<![endif]-->\n    ",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "If you have some time a great blog to browse is\n[paulirish.com](http://paulirish.com/) ; Paul Irish has a boilerplate project\nfor html5 that uses the following example to target specific web browsers\nusing a css class. CSS definitions and JavaScript behavior can be hooked into\nthe page referencing the classes, e.g. ie7, ie8, etc.",
  "id": "8b9618cb-06a8-4b9f-897b-15cff2f3e318",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "target-specific-browsers-with-css-class-on-body-element",
  "title": "Target Specific Browsers With Css Class on Body Element"
},
{
  "body": "\n    \n    // '$' is prototype library\n    (function(){\n    \t// use location for facebook like button\n    \tvar $pg = {\n    \t\turl : unescape(document.location.href),\n    \t\tsocial : $('social') // id to place like button in\n    \t}\n    \t$pg.fb = '&lt;div id=&quot;facebook&quot;&gt;&lt;iframe';\n    \t$pg.fb += ' src=&quot;http://www.facebook.com/plugins/like.php?href=';\n    \t$pg.fb += $page.url;\n    \t$pg.fb += '&amp;amp;layout=button_count&amp;amp;show_faces=true&amp;amp;';\n    \t$pg.fb += 'width=90&amp;amp;action=like&amp;amp;colorscheme=light&amp;amp';\n    \t$pg.fb += 'height=30&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=';\n    \t$pg.fb += '&quot;border:none; overflow:hidden; width:90px; ';\n    \t$pg.fb += 'height:30px;&quot; allowTransparency=&quot;true&quot;&gt;';\n    \t$pg.fb += '&lt;/iframe&gt;&lt;/div&gt;';\n    \tif ($pg.social) {\n    \t\t$pg.social.insert({ 'bottom' : $pg.fb });\n    \t};\n    })($);\n    \n    \n    \n    <div id=\"social\"></div>\n    \n",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "If you are not using the full facebook .js api then here is a lightweight\nscript to insert a facebook like button into a div (with id, 'social' ) [this\nexample is using prototype]. facebook like button (insert_facebook_like.js)\n[download](/downloads/code/javascript/insert_facebook_like.js)",
  "id": "0ada0c67-1736-46f3-b341-a0929174dff5",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "insert-facebook-like-button-with-current-page-url",
  "title": "Insert Facebook Like Button With Current Page's URL"
},
{
  "body": "\n    \n    def random_token\n      characters = 'BCDFGHJKLMNPQRSTVWXYZbcdfghjkmnpqrstvwxyz23456789-_'\n      temp_token = ''\n      srand\n      TOKEN_LENGTH.times do\n        pos = rand(characters.length)\n        temp_token += characters[pos..pos]\n      end\n      temp_token\n    end\n    \n",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "In creating rant.cc as a short URL generator I wanted to avoid generating\nrandom text that would be offensive, so the block below attempts to avoid\ncreating some text string you may have to apologize to your mother about.\nCreate random token with Ruby (random_token.rb)",
  "id": "7fbfba42-d265-4993-8dc2-2ed83124faa8",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "ruby-block-to-create-random-token-string-without-offending",
  "title": "Ruby Block to Create Random Token String Without Offending"
},
{
  "body": "\n    \n    mate ~/.profile\n    \n\nEdit your path in .profile adding /Applications/MAMP/Library/bin:$PATH\n\n    \n    export PATH=\"/usr/local/bin:/usr/local/mysql/bin:/Applications/MAMP/Library/bin:$PATH\"\n    \n\nAlso after you start MAMP to use mysql on command line :\n\n    \n    sudo ln -s /Applications/MAMP/tmp/mysql/mysql.sock /tmp/mysql.sock\n    \n",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "Developing with MAMP, if so then use mysql on the command line (terminal app).\nUpdate your ~/.profile file to use the MAMP mysql PATH. If you use textmate…",
  "id": "75931c66-f57f-4be8-8e20-9089dc2534d0",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "use-mysql-on-the-command-line-when-developing-with-mamp",
  "title": "Use Mysql on the Command Line When Developing With MAMP"
},
{
  "body": "## Script to change list of articles into a rotation of text\n\n    \n    \n    // rotate the articles\n    var $text = $('#section div.article');\n    $text.remove();\n    $text.teasers = [];\n    $.each($text, function(){\n    \t$text.teasers.push(this);\n    });\n    $text.idx = 0;\n    $text.stage = $('#section div.inset');\n    $text.stage.html($text.teasers[$text.idx]);\n    setInterval(function() { \n    \tif ( $text.teasers.length > ($text.idx+1) ) {\n    \t\t$text.idx ++ ;\n    \t} else {\n    \t\t$text.idx = 0;\n    \t}\n    \t$text.stage.html($text.teasers[$text.idx]);\n    }, 12000);\n    \n\n### Soure HTML that script read to rotate articles\n\n    \n    \n    <div id=\"section\"><div class=\"inset\">\n    \t<div class=\"article\">\n    \t\t<h3><a href=\"\">link</a></h3>\n    \t\t<p>article teaser text...</p>\n    \t</div>\n    \t<div class=\"article\">\n    \t\t<h3><a href=\"\">link</a></h3>\n    \t\t<p>article text...</p>\n    \t</div>\n    \t<div class=\"article\">\n    \t\t<h3><a href=\"\">link</a></h3>\n    \t\t<p>another article text...</p>\n    \t</div>\n    </div></div>\n    \n",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "This script and html are used to fancy up a list of articles then rotate the\narticle teaser text…",
  "id": "7c2feec5-8b6b-41b8-a16f-d71f4e2154b9",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "fancy-up-a-list-of-articles-into-a-dynamic-rotation-of-text",
  "title": "Fancy Up a List of Articles Into a Dynamic Rotation of Text"
},
{
  "body": "\n  * remove junk like .DS_Store or clean out repositories like folders named CVS .svn .git \n  * -type d for directories f for files\n    \n    \n    find . -name '.svn' -type d | xargs echo\n    \n    find . -name '.svn' -type d | xargs rm -rf\n    \n    find . -name '.git' -exec rm -rf {} ;\n    \n    find . -name '.DS_Store' -type f | xargs rm -rf\n    \n",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "Use command line to clean up directories prior to initializing repository.",
  "id": "a2f03da1-21cc-42bc-9700-e20c138c824f",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "clean-up-directories-prior-to-initializing-repository",
  "title": "Clean Up Directories Prior to Initializing Repository"
},
{
  "body": "```javascript\n// set Search input to default text\n$('#s').attr('value','Search');\n\n// clear search input form\n$('#s').focus(function(){\n    $('#s').val('');\n});\n```",
  "date": "2010-08-14T00:00:00.000Z",
  "excerpt": "Using jQuery to add the text 'Search' to the search input box in WordPress;\nwhen user enters text input to search the helper text is removed",
  "id": "bdee63ba-cd47-496d-bdd6-6bcb67665bd1",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "text-in-wordpress-search-input-fields",
  "title": "Text in WordPress Search Input Fields"
},
{
  "body": "## find running apps :\n\n    \n    ps aux | grep ruby\n    ps -awwx | grep mysql\n    \n\n## find running app on port number\n\n    \n    ps aux | grep 12005\n    \n\n## kill process, first number listed follow above result\n\n    \n    kill XXXXX\n    \n",
  "date": "2010-08-10T00:00:00.000Z",
  "excerpt": "Find running apps, find running app on port number, kill process, first number listed follow above result",
  "id": "87180f53-c2ff-45b1-b133-4da49efc6f5c",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "command-line-tip-to-find-running-apps-and-kill-em",
  "title": "Command Line Tip to Find Running Apps and Kill 'Em"
},
{
  "body": "More stats: \n\n  * **27 million**: Number of people in modern-day slavery across the world\n  * **800,000:** Number of persons trafficked across international borders each year\n  * **17,500:** Number of foreign nationals who are trafficked into the U.S. every year\n  * **50:** Percent of all victims are children\n  * **$50 Million:** US Government budget for efforts against human trafficking\n  * **218 Million:** Estimated number of children working aged between five and seventeen\n  * **126 Million:** Estimated number of children who work in the worst forms of child labor - one in every twelve of the world's five to seventeen year olds.\n…We live in a broken world sex trafficking even exists in OC, CA. Live for\nsomething… with a passion to end injustice, seek out likeminded people. You\nwill not have wings to fly if you get overwhelmed. Try a region least likely\nto be evangelized (none or only a few existing missions efforts) or where life\nis very short. Just start with one cause. Find something you are passionate\nabout and can do something about. Because we live in an interdependent world\nwe cannot ignore the problems in the world… do justly, speak up!\n\n  * [ijm.org](http://ijm.org) | [wiki link](http://en.wikipedia.org/wiki/International_Justice_Mission)\n  * [heifer.org](http://heifer.org)\n  * [savedarfur.org](http://savedarfur.org)\n  * [invisiblechildren.com](http://invisiblechildren.com)\n  * [loose change](http://www.lc2lc.org/) | [Zach Hunter](http://www.cbn.com/700club/guests/bios/Zach_Hunter_122107.aspx)\n  * [Rescue Project](http://www.dreamcenter.org/outreach/RescueProject/Ways.html)\nThese notes are from a discussion with :\n[@judahtrabulsi](http://twitter.com/judahtrabulsi)",
  "date": "2010-06-23T00:00:00.000Z",
  "excerpt": "**Human trafficking fact**: 27 million modern day slaves; more today than there was when England ruled the world during the trans-Atlantic slave trade. \n\n![](http://pixelhandler.com/wp-content/uploads/2010/06/l_1600_1200_9EA197A0-1836-4796-B330-3B70DEB1BCA3.jpeg)\n\nWilliam Wilberforce fought in his country for the abolition of the slave trade.  Today, (IJM) International Justice Mission is freeing slaves every day. ",
  "id": "e5a971ef-71b6-4e86-b06a-13c05bc654f6",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "social-justice-is-a-movement-to-end-injustice-in-the-world",
  "title": "Social Justice Is a Movement to End Injustice in the World"
},
{
  "body": "<h2>A JavaScript plugin based on jQuery library that builds an expandable/collapsable menu tree from a list element</h2>\n\n<ul>\n<li><p>Requires JavaScript library: <a href=\"http://jquery.com/\">jQuery</a></p></li>\n<li><p>Developed using jQuery version 1.4 ... <a href=\"http://plugins.jquery.com/project/menuTree\">Plugin page</a></p></li>\n<li><p>Demo of the plugin behavior showing both lists and definition list... <a href=\"http://www.pixelhandler.com/menutree/jQuery-MenuTree-Plugin/example/\">Demo</a></p></li>\n<li><p>Status : New plugin, give it a try!</p></li>\n<li><p>Tracer plugin added and featured with demo.</p></li>\n<li><p>Blog post for MenuTree plugin on my blog... <a href=\"http://www.pixelhandler.com/blog/2010/01/28/jquery-menutree-plugin-hosted-at-github-com/\">Blog</a></p></li>\n</ul>\n\n\n<h2>How to build a menu tree that is expandable with jQuery</h2>\n\n<p>Your html will need to link to the jQuery plugin in the head element</p>\n\n<p><script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.0/jquery.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script></p>\n\n<p>Your html markup needs to use a list, see github link for reference.</p>\n\n\n<p>menuTree plugin plugin uses a few CSS classes for visual design...</p>\n<pre name=\"code\" class=\"css\">\n\n#myTree .menuTree:before {\n\tcontent: \"[+] \";\n}\n\n#myTree .expanded:before {\n\tcontent: \"[-] \";\n}\n\n#myTree .collapsed {\n\tdisplay: none;\n}\n\n</pre>\n<p>At the end of your html markup, before the closing body element use a script to setup the function...</p>\n<pre name=\"code\" class=\"js\">\n\n$(document).ready(function() {\n\n\t$('#myTree').menuTree({\n    \tanimation: true,\n\t\thandler: 'slideToggle',\n\t\tanchor: 'a[href=\"#\"]',\n\t\ttrace: true\n\t});\n\n});\n\n</pre>\n<p>This plugin has default options which you may override. The animation option may use jQuery <strong>toggle or slideToggle</strong> methods, or just use the default <strong>css</strong> option to show/hide the child list(s).</p>\n\n<p>When called with the animation: true option the plugin uses the handler option to select <em>slideToggle</em> or <em>toggle</em> method to add effects to the display of child menu(s). You may set the speed as you please, e.g. speed: 'slow'. Also, you may indicate what the child menu(s) are marked up with, e.g. listElement: <em>'ol'</em> instead of the default listElement: <em>'ul'</em></p>\n\n<p>The default options:</p>\n<pre name=\"code\" class=\"js\">\n\n$.fn.menuTree.defaults = {\n\n\t// setup animation\n\tanimation: false, \n\thandler: 'css',\n\tspeed: 'fast',\n\t// setup hooks in markup\n\tlistElement: 'ul',\n\tanchor: 'a[href=\"#\"]',\n\t// uses 'tracer' plugin\n\ttrace: false\n};\n\n</pre>\n<p>If you have any questions, please feel free to ask them on the jQuery\nmeetup site, found here:<br />\n<a href=\"http://meetups.jquery.com/group/jquerylosangeles\">http://meetups.jquery.com/group/jquerylosangeles</a></p>\n",
  "date": "2010-01-28T00:00:00.000Z",
  "excerpt": "This is my first post of social code using the github repository at :\n\n[http://github.com/pixelhandler/jQuery-MenuTree-\nPlugin/](http://github.com/pixelhandler/jQuery-MenuTree-Plugin/)",
  "id": "1f4139f6-b5e9-40d9-ba70-98a61e8c7e65",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "jquery-menutree-plugin-hosted-on-github",
  "title": "jQuery MenuTree Plugin Hosted on github.com"
},
{
  "body": "![photo of balanced rocks along coast](http://pixelhandler.com/wp-content/uploads/2009/12/BalanceStonesPhoto160x120.jpg)\n\nThis weekend I celebrated my 10 year anniversary by taking a day trip to San Diego with my bride. \nAlong the coast was a street performer showing his talent of balancing rocks. \nWe happened to stroll by as the sun dipped toward the ocean and I took a quick picture with my iPhone. (© 2009, Bill Heaton)",
  "date": "2009-12-06T00:00:00.000Z",
  "excerpt": "![impression of balanced rocks at sunset](http://pixelhandler.com/wp-content/uploads/2009/12/BalanceStones091206.jpg)",
  "id": "f00a7956-b693-4777-abe2-b4a8eb9f6b4c",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "balanced-rocks-at-sunset-in-san-diego",
  "title": "Balanced Rocks at Sunset in San Diego"
},
{
  "body": null,
  "date": "2009-11-15T00:00:00.000Z",
  "excerpt": "This year I set a goal to learn Adobe Flex 3. I have found the help of other professionals and the OCFlex.org user group. Besides the Flex Video Training, I found that the best source of understanding ActionScript using the MXML library is by reading and coding the examples in the book \"First Steps in Flex\". To keep myself accountable to this goal, I agreed to train my cousin in learning Flex programming; is who is on the road to becoming a web developer. It turns out that my cousin's friend is a top-notch programmer and loves the Flash platform. He challenged us to just start building a simple application, a calculator. So, this is our first iteration of a calculator programmed with Flex 3.\n\nUPDATE: removed Flash content from this site in 2014",
  "id": "b2538002-6a7d-47bd-b844-227117a19126",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "learning-flex-by-building-a-calculator",
  "title": "Learning Flex by Building a Calculator"
},
{
  "body": "Next, I build out a demonstration\nsite [http://demo.overhaulindustries.com](http://demo.overhaulindustries.com/)\nfor previewing how to use WordPress as a business website publishing tool.\nThese two task formed my product offering of a templated business website ;\nbasically an online brochure. Second, I created a \n[brochure website guide](http://overhaulindustries.com/brochure-sites/how-to-prepare-a-brochure-website-for-your-company) on how to prepare content; my goal was to establish\na fast turnaround, with content up front or early the project can avoid being\nheld up for content. To speed up the process and get the business owner\nengaged I added a form to capture the content online; adding a few links to\npush visitors to send my their content. Third, I added a PayPal button for the\ndeposit/payment; this gets me engaged in delivering a site quickly. The fourth\nstep was to [document the process](http://overhaulindustries.com/brochure-sites/the-process-in-building-your-brochure-website) of delivering the website\nproject; an effort to help the client get to know how to work with me.\nFinally, to close out the five step process… [I set expectations](http://overhaulindustries.com/brochure-sites/expect-better-search-results-when-working-with-us-on-your-web-design-project) on what a\nwinning project should result in – creating free leads online; basically\ngenerating free listings on search engine results pages. This process of\ndocumenting the experience of designing template solutions for small brochure\nwebsite projects lead to creating marketing materials to promote sales. This\ncontent is a result of conversations I've had repeatedly over the years; why\nnot use the product myself? The results was the best layout and design I've\nhad on my business website in years, and using the platform I enjoy,\nWordPress. Being excited about this discovery, I sent out an invitation my\nemail to friends, family and clients; I even had a good response. I expect\nthat I may complete 3-4 brochure websites in the next couple weeks. I look\nforward to measuring the results. So now, I'm following up with the leads\nusing this 5 step approach:\n\n### Documentation to help you get started with your website projects\n\n**Below are the links and outline of the process of working together with\nOverhaul Industries in order to help you design your website to be found… **\n\n**Step 1**: [Getting started guide - to prepare your brochure website](http://overhaulindustries.com/brochure-sites/how-to-prepare-a-brochure-website-for-your-company)\n\n**Step 2**: [Partner with an expert - send us your content](http://overhaulindustries.com/contact/brochure-website-content)   \n  \n**Step 3**: [We start working on your project with a small deposit](http://overhaulindustries.com/brochure-sites/recession-special-custom-brochure-web-site-for-440)   \n  \n**Step 4**: [The process of delivering your website](http://overhaulindustries.com/brochure-sites/the-process-in-building-your-brochure-website)   \n  \n**Step 5**: [Review the results, your free listing in search engine results pages](http://overhaulindustries.com/brochure-sites/expect-better-search-results-when-working-with-us-on-your-web-design-project)\n",
  "date": "2009-07-17T00:00:00.000Z",
  "excerpt": "Documenting process becomes promotion of small business website sales…\n\nIn the past couple weeks I decided to focus on small businesses by making a\ngoal to create a program that will help their website be findable. Beginning\nin 2004 I began to sell website design to local companies and still build\nwebsites for local medium size businesses in Orange County. I began to\ndocument the process of working together with business owners and managers.\nThe first step was creating an offer, [Recession SPECIAL: Custom ‘Brochure’ Web Site for $440](http://overhaulindustries.com/brochure-sites/recession-special-custom-brochure-web-site-for-440) . ",
  "id": "367a0618-4d44-4831-ae15-9423f927f1a9",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "five-steps-to-creating-findable-websites-for-small-and-medium-sized-business",
  "title": "Five Steps to Creating Findable Websites for Small and Medium-sized Business"
},
{
  "body": "Starting to feel confident, I build out a new site in the agile style called prayerlife.net the concepts are similar twitter and 43things. This time I was working without a tutorial but referencing the _Agile_ book and searching the web and google group _Ruby on Rails: Talk_ for help along the way. I also tune in to podcasts: Railscast, Rubyology, and Learning Rails. In addition, I participate in a local usergroup, [OCRuby.com](http://ocruby.com), where I can ask questions and learn from others in realtime. At a meeting I learned from a presentation on using the console while demonstating 'Active Record'; this helped me to catch the key concepts of data models. **Lessons & tips:** The best way to learn is to… just build it. Get in touch with others who are learning as well. Also, connect with those who have programming experience. The podcasts are are great way to get past concepts that seem difficult. **Resources:** Podcast: Railscast, Rubyology, and Learning Rails \n\n* Books: Simply Rails 2, Agile Web Development with Rails\n* Usergroup: OCRuby.com\n* [Rails documentation](http://rubyonrails.org/documentation)\n\nSee more progress on: [Learn more about Ruby on Rails](http://www.43things.com/people/progress/billheaton/11129881)\n\n### UPDATE: I shut down rant.cc and prayerlife.net projects and no longer own the domains.",
  "date": "2009-06-08T00:00:00.000Z",
  "excerpt": "Learning Rails has been an awesome way to learn about programming; using the 'Rails' framework and opinions helped me to learn best practices and object oriented programming concepts.\n\n**How I did it:** I bought Simply Rails 2 and coded the example _digg_ like site, 'shovel'. Then got very excited about rails and bought the Agile Web Development with Rails book; and built the example store application. Since I'm a huge fan of twitter I built my own short URL site for tracking clicks on the links I post all around the web - rant.cc .",
  "id": "1a724bf0-73c0-46e6-94c8-2948964d72c4",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "how-i-learn-more-about-ruby-on-rails",
  "title": "How I Learn More About Ruby on Rails"
},
{
  "body": "At the finish of\nthe conference I ended up with 278 noteworthy entries (twitter hashtag:\n'aea09'). I viewed the favorites on twitter and copied the ordered list\n(source) into an HTML presentation (S5) template by Eric Meyer. Check out the\npresentation at\n[www.pixelhandler.com/aea09/](http://www.pixelhandler.com/aea09/). Much of the\nconversation was centered around the topic of User Experience (UX). **Update**\n(5/10/09) - I_ added an iPhone CSS stylesheet to the presentation to make it\nmobile friendly for Apple enthusiasts._ [![An Event Apart Twitter favorites\npresentation](http://pixelhandler.com/wp-\ncontent/uploads/2009/05/aeaslides.png)](http://www.pixelhandler.com/aea09/)\n\nCheck out my [#aea09 conference notes, I used twitter's favorite star to group\nthink my note-taking](http://www.pixelhandler.com/aea09/). Then I copied the\nhtml and pasted into [Eric Meyer's S5 HTML\npresentation](http://meyerweb.com/eric/tools/s5/features.html) template.\n\n![Bell Int'l Conf. Ctr. - Seattle](http://pixelhandler.com/wp-\ncontent/uploads/2009/05/seattle090503bellintl.jpg) Also, [my\npics](http://www.flickr.com/photos/25692062@N08/) and the [AEA group\npics](http://www.flickr.com/groups/aeaseattle09/) on flickr.",
  "date": "2009-05-06T00:00:00.000Z",
  "excerpt": "One thing I really enjoy about Twitter is the conversations that happen during\nan event. So, while attending An Event Apart this week, I took most of my\nnotes on my iPhone. My powerbook is 7 years old, and I refused to take my PC\nto this event. Surprisingly, the iphone worked out great. At times the\nwireless was faulty; but the iPhone fell back on the edge network. I spent two\ndays of tweeting while marking clever, funny and informative comments as\nfavorites (generated by the crowd, on\n[twitter.com](http://search.twitter.com/search?q=%23aea09)). ",
  "id": "8d4418b4-73d9-429c-a8b4-7dcf006e2ac7",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "crowd-notes-twitter-favorites-from-an-event-apart-2009-seattle",
  "title": "Crowd Notes (Twitter Favorites) From an Event Apart 2009 Seattle"
},
{
  "body": "## Jeffrey Zeldman on Redesign, session 1\n\n> Be a strategic design partner, or else you will not influence the design …do the research. --@Zeldman\n\n**Showing your strategy and flexing your authority…**\n\n  * For navigation, use cards and ask the the client, or test group to put the cards in order. \n  * Use creative ways to focus on the user by creating visuals of your personas, cardboard figures that you can address questions too. What would \"Mac\" want to see on the home page? \n  * Make your design solution work for the user's needs.\n  * Use a 'Content Strategy' document and include an executive summary, to remind the client what is important with regard to the site contents. \n  * Jeff uses an method to keep the conversations open, \"Alzeimers Method\" - dropping breadcrumbs or gentle reminders of previous conversations or the client's needs. \n  * Be sure to convey the meaning of design, talk about why the decisions were made, indicating what the client communicated was important. \n  * Handle criticism, go back to the user for the resolution. How will the user react? \n  * Jeff is happy to use pixels again instead of measuring layouts in ems; thanks to browser zoom. \n\n> Design is like music, when you (or the clients) see it you say, \"yeah that's us\" or \"no that's not us.\" --@Zeldman\n\n![An Event Apart 2009 Seattle, Eric Meyer](http://pixelhandler.com/wp-content/uploads/2009/05/seattle090504meyer.jpg)\n\n## Eric Meyer on Redesign of AnEventApart.com, session 2\n\n> My fingers start to itch to code it, is id done? --@Meyerweb\n\n**Comments from the CSS guru**\n\n  * I still care about Internet Explorer 6, if my visitors use it.\n  * Minimize IE hacks no need to use separate stylesheet, * html, *+html, etc.\n  * It's ok to like margins again, when it comes to layout. \n  * Sometimes you may want to run CSS thru server side code, e.g. PHP\n  * Image replacement for lead-in graphics using h1 element\n  * Push the limits with mark-up and style but roll back to what works and is accessible (HTML 5 / CSS 3)\n  * Some emerging concepts, microformats - hcalendar, may not be accessible so don't worry about using it now \n  * Eric Doesn't agree with Jeff on pixels, still uses ems for fonts (no universal page zoom for ems yet)\n\n> Balancing complexity- \"I can make the markup more complex, or I can make the CSS more complex, minimize complexity for maximum gain (bandwidth wins).\" --@Meyerweb\n\n> \"Presentation never trumps semantics… well hardly ever.\" --@Meyerweb\n\n![An Event Apart 2009 Seattle, Ethan](http://pixelhandler.com/wp-content/uploads/2009/05/seattle090504ethan.jpg)\n\n## Ethan Marcotte - Comps vs. Code, session 3\n\n> Lots of little leaps of faith. --Ethan (Airbag)\n\nEthan spoke about the redesign of W3C and fluid width (grid based) layout. He\nused the same formula we use for em font sizing. Target divided by Context\n(parent) equals Percentage/width (use the long decimal value, let the browser\ntruncate)\n\nAdvice from Ethan:\n\n  * Designers should share important features with developers early on.\n  * Learn from your mistakes \n  * Use: Son of suckerfish dropdown (CSS) menu\n  * When changing hands, communicate the details, this is where they are usually lost.\n  * Transitions in the process: Discovery > Design > Development > Delivery \n  * Focus on good typography not sexy graphics and hey-hey. \n  * Their is a difference between client-ready and coder-ready (comps or wireframes) \n  * Process should include designer review and developer reviews\n  * Communicate the details in whatever method works for you, but do it.\n\nFluid layout examples:\n\n  * vitabit\n  * clearleft\n  * simplebits\n  * search \"fluild layout\" on AListApart.com\n  * NYmag\n\n## Luke Wrobleski - Web Form Design, session 4\n\n> Forms suck. --@LukeWDesign\n\nLuke spoke about best practices for form design and a clear path to completion\nbased on vast user research data working at Yahoo\n\nQuestion we should answer for our users:\n\n  1. What do I need to fill in here?\n  2. Why do you need my … email/username, etc.?\n  3. How can you help me\n\n> The form shouldn't be your master, you will control your own destiny. --@LukeWDesign\n\n![An Event Apart 2009 Seattle, Tara Hunt](http://pixelhandler.com/wp-content/uploads/2009/05/seattle090504missrouge.jpg)\n\n## Tara Hunt - Social Capital Equals Whuffie, session 5\n\n> You can either fake marketing with whufflie or realize that the new marketing is whuffie. --@Missrouge\n\nFive principals for raising whuffie <http://slideshare.net/missrouge>\n\n  1. Create amazing customer experiences\n  2. Throwing sheep\n  3. Lighten up\n  4. Embrace the chaos\n  5. Find your higher purpose \n\n> Connections plus time equals trust. --@Missrouge\n\nMeasuring your whuffie : Zipcar, Rating6, ScoutLabs\n\n## Kristina Halverson - Content First, session 6\n\n> Content is not a feature. --@Halverson BrainTraffic.com\n\nContent Strategy plans for the creation, publication and governance of the\ncontent; everything on the web, text, data, info, audio, video, etc. She swore\neveryone in with the statement, \"I will never again say launch, I will say\nlifecycle\". She advocated that we fight for quality content that is useful,\nusable and enjoyable. She encouraged that web writers ask journalistic\nquestions; content demands resources and processes to match up business\nobjectives with user's needs.\n\nKristina's examples:\n\n  * Good: Mint.com\n  * Bad: Quicken.com\n\n![An Event Apart 2009 Seattle, Jared Spool](http://pixelhandler.com/wp-content/uploads/2009/05/seattle090504jmspool2.jpg)\n\n## Jared Spool - User Interface Engineering, session 7\n\n> Ratio of reviewers to purchases is 1:1,300 - thanks the lunatic fringe. --@JMSpool uie.com/brainsparks\n\nRevealing design treasures from the Amazon\n\n  * Great content strategy!\n  * Vote for reviews, \"Was this helpful?\"\n  * Button, \"most helpful first\"\n  * Don't be afraid of new ideas (goldbox hey buy this stuff! or diamond selecting tool) \n  * Redesign is a bad idea, simple changes overtime (iteration)\n  * Facebook redesign, 97% of users didn't like it\n  * Never forget about the business\n  * Amazon can make money selling iPods at cost, looks like a loss but with 'negative operating cycle' they use 'cash float'. Most resellers order very 45 days, Amazon depletes inventory in 20 days.\n  * Fun: 'Playmobile security checkpoint' & 'Tuscan Whole Milk'\n\nGoal Time vs. Tool Time\n\n**Goal Time:**\n\n* When the user is improving the outcome of the experience\n\n**Tool Time:**\n\n* When the user is moving forward with improving the outcome of the experience\n",
  "date": "2009-05-05T00:00:00.000Z",
  "excerpt": "![An Event Apart 2009 Seattle, Zeldman](http://pixelhandler.com/wp-content/uploads/2009/05/seattle090504zeldman.jpg)",
  "id": "2b2f2eff-ae4c-4144-aecd-94eb54a61ecd",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "field-notes-from-an-event-apart-2009-for-web-professionals-day-one",
  "title": "Field Notes From an Event Apart 2009 for Web Professionals - Day One"
},
{
  "body": "This site is currently an _alpha release,\nproof of concept_. [Visit the about page here](http://prayerlife.net/about). I\nam looking for people to test the concept, who would like to use the internet\nto connect and pray for others. \n\n![prayerlife-net](http://pixelhandler.com/wp-content/uploads/2009/04/prayerlife-net.jpg)",
  "date": "2009-04-25T00:00:00.000Z",
  "excerpt": "I'm working on a new social prayer site at\n[PrayerLife.NET](http://prayerlife.net) feel free to visit, create an account\nand share/manage your prayers online. PrayerLife.NET is social media web\nservice, a tool for users to connect & prayer with others. Features: prayer\nand list sharing (pubic or private). \n\nUPDATE: This site is no longer only, and I no longer own the domain.\n\n",
  "id": "43e862e8-3576-47ba-a878-67c9e963d944",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "alpha-release-of-prayerlifenet-a-social-prayer-web-site",
  "title": "Alpha Release of PrayerLife.NET, a Social (Prayer) Web Site"
},
{
  "body": null,
  "date": "2009-01-13T00:00:00.000Z",
  "excerpt": "**How I did it:** First, I searched for tutorials online; then I used scripts from a project I found called pressConnect. I installed a fresh installation of WordPress on my local machine running MAMP. I configured the pressConnect script to work with my MySQL database, then I tested the XML output. Next, I had to review ActionScript, learning to work with XML in Flash. I used a couple other scripts and a menu offered at <http://tvwonline.net/lab/> - I built a test Flash file, importing an external CSS stylesheet and ActionScript file. Once the test file worked fine with pages, posts and menus for both, I integrated the code into a flash template. Finally, I set up a sandbox for the client to explore the dynamic publishing tool for the Flash-based website.",
  "id": "7ef9b675-7bad-419c-b248-4c1204d947b4",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "steps-to-building-a-flash-based-blog",
  "title": "Steps to Building a Flash-Based Blog"
},
{
  "body": null,
  "date": "2008-11-28T00:00:00.000Z",
  "excerpt": "To most of the world, the day after Thanksgiving is known as Black Friday.\nHowever, about 130 or so web standardistas showed their support for Web\nStandards; wearing blue beanies and updating their online profiles and avatar\nphotos with images of themselves sporting a blue beanie. The [Designing with\nWeb Standards facebook\ngroup](http://www.facebook.com/event.php?eid=6209917619) promoted the online\nevent, **Blue Beanie Day 2008**, and set up a [photo gallery on\nFlickr](http://www.flickr.com/groups/bluebeanieday2008/pool/). So, I purchased\na blue beanie from thinkgeek and posted my mug.",
  "id": "ce2f8d33-0467-42ff-b135-3dc072d5e1bb",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "promoting-awareness-for-web-standards-by-wearing-a-blue-beanie",
  "title": "Promoting Awareness for Web Standards by Wearing a Blue Beanie"
},
{
  "body": "This site is using the **Amerifecta\ntheme** > [download the .zip archive from the Overhaul Industries\nsite](http://overhaulindustries.com/amerifecta) **Adept** is available from\nboth [Overhaul Industries](http://overhaulindustries.com/themes) and\n[WordPress.org/extend/themes](http://wordpress.org/extend/themes/adept)\n[![Amerifecta](http://pixelhandler.com/wp-content/uploads/2008/10/amerifecta-\nwordpress-theme-v1-320x255.jpg)](http://overhaulindustries.com/amerifecta)\n[![Adept](http://pixelhandler.com/wp-content/uploads/2008/10/adept-wordpress-\ntheme-v1-320x232.jpg)](http://overhaulindustries.com/adept)\n\n**Update: 10-23-08…**WordPress released [Amerifecta theme](http://wordpress.org/extend/themes/amerifecta). Also, [Adept theme](http://wordpress.org/extend/themes/adept) updated to version 1.1.1 on WordPress.org > themes > extend",
  "date": "2008-10-05T00:00:00.000Z",
  "excerpt": "Both are versatile themes, built for speed with seven widget positions; three\nin the sidebar and four in an extended footer. They features a clean design,\nsuitable for a wide range of applications. Designers will appreciate the fixed\nwidth grid layout, including a baseline grid for vertical text alignment. To\nvisitors this makes the site 'look and feel' right. Users will also appreciate\nthe light page weight, around 100k! ",
  "id": "f458bfae-d816-4a94-a6f1-87f6577cfe14",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "two-new-wordpress-themes-adept-and-amerifecta",
  "title": "Two New WordPress Themes Adept & Amerifecta"
},
{
  "body": "Below are the **sample pages from both CSS frameworks**:\n\n  1. [Demo of 960 pixel Grid (960.gs 12-col & 16-col)](http://pixelhandler.com/css-grid-layout/demo.html)\n  2. [HTML elements](http://pixelhandler.com/css-grid-layout/elements.html)\n  3. [Blueprint Sample Page](http://pixelhandler.com/css-grid-layout/sample.html)\n\n[Download the XHTML & CSS files.](http://pixelhandler.com/css-grid-layout\n/mash-up.zip) _License info : GPL license | MIT license_",
  "date": "2008-09-09T00:00:00.000Z",
  "excerpt": "I really enjoy the mastery of modern CSS layouts using a grid based on solid\ndesign principles, pre-existing the Web. My two favorite are\n[960.gs](http://960.gs) and [Blueprint](http://www.blueprintcss.org/), so I've\ntaken the elements that I like best about each css framework and mashed them\ntogether into one. 960.gs has both 12-column or 16-column grids ready to go.\nWhile Blueprint has more comprehensive element styles, a 18px baseline grid,\nand a few additional settings (e.g. the \"pull\" class to break outside the\ngrid). ",
  "id": "b61ff95b-1a0f-4e90-b2ae-d664501f2a5b",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "mashup-of-two-rockin-css-grids-960gs-and-blueprint",
  "title": "Mashup of Two Rockin' CSS Grids - 960.gs & Blueprint"
},
{
  "body": null,
  "date": "2008-08-09T00:00:00.000Z",
  "excerpt": "I launched a shorter URL tool\nto reduce the length of your long, permalink URL. It will make a short url\nlike http://rant.cc/JPh Rant.cc is a tool for creating shorter URLs for\npromoting your ranting, or charged content using your favorite micro blogging\nplatform like Twitter, Plurk, Identi.ca, Tumblr, Jaiku, Pownce, or whatever\nflavor you enjoy. When a Rant.cc URL is click the visit is tracked and ranked\nby most visits, checkout the popular links. And, stay tuned into “charged”\nconversations on Rant.cc\n\n> UPDATE: I shut rant.cc down in 2012",
  "id": "90d7d98a-6e77-414c-8ead-07e28f53f47e",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "launched-a-shorter-url-web-application-with-ruby-on-rails",
  "title": "Launched a Shorter URL Web Application With Ruby on Rails"
},
{
  "body": null,
  "date": "2008-08-08T00:00:00.000Z",
  "excerpt": "Yes… finally, after months, WordPress.org approved my photo blog theme 'Shoot-\nIt' check it out… [http://wordpress.org/extend/themes/shoot-\nit](http://wordpress.org/extend/themes/shoot-it)",
  "id": "b2da1cbd-854c-40cc-8f72-e3d6144aa506",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "photo-blog-theme-available-on-wordpress-org",
  "title": "Photo Blog Theme Now Available on WordPress.org"
},
{
  "body": "\n#### **'Bill's Internet Marketing Report' **- Winning the #1 Search Engine\nResult for Your Key Phrase\n\n**- **_Strategies and topics relating to the happenings I experience in the race of marketing, publishing and selling on the web._\n\nHaving the top result on Google for your main key phrase just feels great!\nSeriously, in this time of uncertainty, being number one even for a short time\nis pretty cool. It is also nice when a competitor enters the market and\npreviously held the #1 search result which you now hold.\n\nSearch engine optimization : the search query is : [**noninvasive\nneuromodulation**](http://www.vqorthocare.com)\n\n  * We're number one! Results 1 - 10 of about 92,500 for noninvasive neuromodulation. \n  * Mid month the decision is made to update the web site with new terminology\n  * Take a vacation and violá the search crawler does it's magic and the result is favorable\n  * the competitor who previously ranked #1 for the search query was bumped down but still on page one of Google\n\nRecent changes in Google's search engine results pages (SERPs) for google\naccount holders:\n\n  * While logged in to google the SERPs vary based on the same search query\n  * Fresh/new content ranks higher then seems to drop as newer posts assume the search query's freshness\n  * Holding the #1 ranking in the SERP will required continued link building, hence this post!\n\n_Sites referenced:_\n\n  * [google.com](http://www.google.com/search?hl=en&q=noninvasive+neuromodulation&btnG=Search)\n  * [vqorthocare.com](http://www.vqorthocare.com/Procedures_Diagnoses/Neuromodulation/index.php)\n\n#### **'Highlights in Social Media' **- Online Networks for Web Designers and\nDevelopers\n\n**- **_The Internet is bringing people together and making connections for personal and professional development. Being involved socially online is a way to build new relationships with like-minded individuals._\n\nLast month I created a Ning network, at\n[refreshoc.ning.com](http://refreshoc.ning.com), and as a results was invited\nto join [dezumo.com](http://www.dezumo.com) ; there I joined the conversations\non web design and posted a forum topic \"[What are your favorite sites for\ninspiration on the topic of Web\ndesign?](http://www.dezumo.com/forum/topic/show?id=562455%3ATopic%3A15284)\"\nDezumo has about 293 members and has been around for about a year while the\nRefreshOC started a month ago and only has about 18 members. Dezumo is has a\nlarger audience while RefreshOC is targeting a local metro area. Both were\nkicked off right here in Orange County. I enjoy the conversations on dezumo\nand am hoping the RefreshOC group will become more active as social networks\nbecome more of a source for making connections locally.\n\nOn the subject of inspiration for web design I did receive a few responses\nfrom the group, I visited the links and found some fresh sites to add to my\n[del.icio.us bookmarks on the topic of\ndesign](http://del.icio.us/pixelhandler/design) . While a couple people were\neager to share links for inspiration sake one designer posted a note to\ncreating new design without being tempted to follow the pack; along with this\nresponse were no links but a tip on seeking inspiration from the world around\nyou. I am very fond of this concept of being inspired from life itself, but\nalso find it very valuable to examine successful design concepts. Design\ntechniques that work well should be mimicked, especially for the sake of user\nexperience and usability.\n\n_Sites referenced: _\n\n  * [refreshoc.com](http://refreshoc.com)\n  * [dezumo.com](http://www.dezumo.com)\n  * [del.icio.us](http://del.icio.us/pixelhandler/design)\n\n* * *\n\n_Found on the PodSafeMusicNetwork: _\n\nListen the track titled, _The Pain Of Numbers_ by [Get Three Coffins\nReady](http://www.myspace.com/getthreecoffinsready) - at the end of the\nbroadcast!\n",
  "date": "2008-07-04T00:00:00.000Z",
  "excerpt": "Internet Marketing Report and Social Media Highlights Newsletter - July\n2008",
  "id": "2d06cf1c-671f-4d98-82bb-74f4cc8a2c81",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "winning-the-1-search-engine-result-for-your-key-phrase",
  "title": "Winning the #1 Search Engine Result for Your Key Phrase"
},
{
  "body": "#### **'Bill's Internet Marketing Report' **- Another good reason for\nbusinesses to blog\n\n**- **_Strategies and topics relating to the happenings I experience in the race of marketing, publishing and selling on the web._\n\nI'm currently employed by a medical equipment manufacturer and distributor (I\nfreelance too) and last month some very interesting news was broadcast on news\nradio and the internet about the LA Laker's own Kobe Bryant and his back\ninjury.\n\n> [From latimes.com -- May 13, 2008](http://www.latimes.com/sports/la-sp-\nkobeback13-2008may13,0,3003048.story)\n\n\n\"I tried to play and make drives to the basket where I could kind of withstand\nthe pain without the back completely spasming and then put the next game\nreally in jeopardy,\" Bryant said.\n\n> On Monday he addressed reporters while standing, as he did during Sunday's\npostgame news conference. Bryant said he would receive round-the-clock\ntreatment.\n\n> His regimen includes ice, heat, massage and stretching. Bryant also held his\nelectrical stimulation device by his side, saying he would basically sleep\nwith it the next couple days.\n\nThe reason why this news was inspiring for my employer is that the company's\nmain product offering does just what Kobe's medical device does and more. This\nnews became a great way for the company to share with clients about just how\ngood their technology really is; also sharing the story about Kobe saying \"he\nwould basically sleep with it the next couple days.\" In following up on the\nreport, Kobe did not miss a game during this series and continued to score\nvery well, while the Lakers moved on to the next playoff series.\n\nThe reason why this news was so valuable to blog about is that it allowed the\n[company's news blog](http://www.vqorthocare.com/blog/vq-news/kobe-bryant-\nelectrical-stimulation-for-recovery-back-spasms/) to add valuable content\nsupporting the site's search engine optimizations (SEO) objectives. The\ngeneral public may use different variations of the words that a business uses\nto describe its offerings. The blog format allows for a very quick response to\noptimizing the companies Web site with the terms used by the general public\nand reporters. The best benefit is that the reported did report on Kobe\ntalking about a medical condition that my employee has a solution for, back\nspasms!\n\nOnce the blog was posted, the same day as multiple news agencies reported on\nthe injury I sent off an email to a targeted group of clients that would be\nvery impressed with the technology and hearing that a professional basketball\nplayer and NBA MVP says so. That perspective was a lot better than I could\nsay, even though I used the technology after a broken leg and shoulder and\nloved how well the medical device blocked my pain.\n\nThe return on investment for this blog and email blast was that conversation\nwere opened up with key clients who needed to learn more about the technology\nand how it fit in within the sports profession.\n\n_Sites referenced:_\n\n  * [http://www.latimes.com/sports/](http://www.latimes.com/sports/la-sp-kobeback13-2008may13,0,3003048.story)\n  * [http://www.vqorthocare.com/blog/](http://www.vqorthocare.com/blog/vq-news/kobe-bryant-electrical-stimulation-for-recovery-back-spasms/)  \n\n#### **'Highlights in Social Media' **- Starting up an online social network\nwith NING\n\n**- **_The Internet is bringing people together and making connections for personal and professional development. Being involved socially online is a way to build new relationships with like-minded individuals._\n\nRecently I became interested in social media and networking with other like\nminded Internet professionals. My favorite online social networks are\nlinkedin.com and twitter.com, I use facebook.com and a few others less often.\nWhen I read about ning.com in FastCompany magazine and also heard about\nning.com again during a local meetup in OC. This got my created juices flowing\nand since I enjoy networking with other professionals, and also have spent\nmuch of my career flying solo (as an in-house person or working from home), I\nwas inspired to kick off a new network, [refreshoc.com](http://refreshoc.com)\nin alignment with the '[Refreshing Cities](http://refreshingcities.com/)'\nconcept… Refresh is a community of designers and developers working to refresh\nthe creative, technical, and professional culture of New Media endeavors in\ntheir areas. Promoting design,technology, usability, and standards.\n\nI am interested to find out how many other Orange County Internet\nprofessionals would be interested in networking and building a local community\nfor sharing experiences on creating the Web that we surf on. At the end of\n2007 I attended a PodCamp in Ontario (SoCal); there I was very interested in\nhow people gather around a common interest or passion. I was able to learn\nfrom others who are doing what I wanted to learn, just by attending and\nparticipating in the unconference style of gathering.\n\nOne concept that I would like to discuss on Refresh OC is the possibility of\ngrowing a community of OC Internet professionals who would like to attend a\nfacilitated, participant-driven gathering centered around building the\nInternet; where professionals share, learn and grow in an open environment.\nPerhaps this will happen once discussions begin on the topic of planning\nevents and organizing discussions, demos and interaction from participants\nright Here in OC. Perhaps each event could have a 50/50 raffle or a more\ncreative way of raising funds to benefit a local cause.\n\n_Sites referenced: _\n\n  * [http://refreshingcities.com/](http://refreshingcities.com/)\n  * [http://refreshoc.com](http://refreshoc.com)\n  * [http://www.linkedin.com/in/billheaton](http://www.linkedin.com/in/billheaton)\n  * [http://twitter.com/pixelhandler](http://twitter.com/pixelhandler)\n  * [http://www.facebook.com/](http://www.facebook.com/profile.php?id=698254607) _(you may need a facebook account)_   \n\n\n_Found on the PodSafeMusicNetwork: _ Listen the track titled, _Surfin the\nBlast Wave_ by [Nony Zero](http://www.myspace.com/nonyzero) - at the end of\nthe broadcast!",
  "date": "2008-06-06T00:00:00.000Z",
  "excerpt": "Internet Marketing Report and Social Media Highlights Newsletter - June\n2008",
  "id": "589f4f32-f3df-4faf-84d5-42429dba0c43",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "reasons-for-business-blogging-and-kicking-off-a-local-socal-network",
  "title": "Reasons for Business Blogging and Kicking Off a Local Socal Network"
},
{
  "body": "### _Internet Marketing Report and Social Media Highlights Newsletter…\n\n#### **'Bill's Internet Marketing Report' **\n\n**- **_An ongoing theme in my newsletter. I will publish strategies and topics relating to the happenings I experience in the race of marketing, publishing and selling on the web._\n\nThis month's topic is linkbait. One of the best ways to increase search engine\noptimization performance is improving your rankings by growing your list of\ninbound links to your Web site. This is one strategy that takes persistence\nand pays off over time. Without a strong link building strategy it can be very\ndifficult to gain higher rankings in the search engine results pages (SERPs),\nespecially for competitive keywords or search phrases. The goal is to be\nnumber one on the first page of your favorite search engine using a phase that\nis searched for very often by your desired audience. The linkbait that I am\ncurrently offering is a free website theme for bloggers.\n\nThis month I released downloadable file as blog theme for photo enthusiasts in\norder to gain more inbound links to my personal blog. My site is managed using\nWordPress, one of the most widely used open source Web applications for online\npublishing. The WordPress site has a large community with a high volume of\nonline traffic, of which a large segment of users desire to customize their\nown blog with a custom design, free of charge!\n\nBecause I enjoy the benefit of the contributions made by this online\ncommunity, I finally took the opportunity to give back, by offering _Shoot\nIt!_ a free photo blog theme. This professional web design should prove to be\na favorite among photography enthusiasts and professionals alike. Within a\ncouple days of uploading the _Shoot It! _theme to my blog, I noticed ten\ndownloads have taken place. I believe the numbers will grow even faster once\nthe theme is listed on the WordPress theme site.\n\nAs a demonstration site, I launched a pro photo tips blog, _Take Better Photos\nNow_, with content provided by a very seasoned photographer with a passion for\nsharing tips to help people take better photos. Michael Kitada plans to\npublish tips for photography enthusiasts and this will benefit his photography\nbusiness as well by providing inbound traffic to his main Web site. His new\nblog using this photography theme already has about 100 unique visitors with\nthe first couple weeks while creating the Web site design. I anticipate that\nthe volume of links will be begin to grow from the promotion of this free\noffer and also from the links created by bloggers using the free theme.\n\n_Sites referenced:_\n\n[http://takebetterphotosnow.com](http://takebetterphotosnow.com)\n\n#### **'Highlights in Social Media' **\n\n**- **_Second theme with a focus on building your personal brand using online networking. The Internet is bringing people together and making connections for personal and professional development. Being involved socially online is a way to build new relationships with like-minded individuals._\n\nLast month, my wife and I attended a meetup in Irvine on the topic of internet\nmarketing. We both were able to learn new information and meet others involved\nin selling and promoting on the Internet. This came about by visiting\nmeetup.com and searching for internet marketing. This is the second time that\nI have searched online with the intention of learning something new, then\nfollowed up by meeting a group of like-mined people (offline and in person)\nwho share their knowledge openly among the community. Some time ago, I wanted\nto learn about podcasting (broadcasting audio using electronic media); then\nended up at a very open convention, podcamp, where I was able to ask seasoned\nveterans specific questions about new media publishing - giving me a kickstart\nwith my own podcast. Both of these experiences proved to be great networking\nevents as well.\n\nI recently became a fan another very popular social media Web site,\ntwitter.com, which works the opposite of email. You choose who you want to\nfollow (allow to speak, or tweet, with you) rather that filter out the\nmessages you want to block. On a Saturday afternoon, you may find very\ninfluential people online sharing breaking news like Microsoft (MSFT) backing\nout of their offer to buy Yahoo (YHOO). The news appears between highlights of\nsomeone bragging about a great meal or fun with friends. Twitter (micro\nblogging) is fun. At times, I will read a short comment (currently twitter\nonly allows up to 140 characters per micro message) then I'll hear the story\non the evening news and think to myself, wow, publishing has really changed.\nFor example, on May 3rd, I first heard about this MSFT/YHOO story on twitter;\nthen later, on May 4th, I see the story published on the New York Times Web\nsite. The internet is bringing conversations together among like minded\nindividuals who naturally attract an audience with similar interests and\nspeeds faster that ever before.\n\n_Sites referenced: _\n\n[http://www.meetup.com/](http://www.meetup.com/)_\n\n_[http://twitter.com/pixelhandler](http://twitter.com/pixelhandler) [http://ww\nw.nytimes.com/2008/05/04/technology/04soft.html?_r=3&hp&oref=slogin&oref=slogi\nn&oref=slogin](http://www.nytimes.com/2008/05/04/technology/04soft.html?_r=3&h\np&oref=slogin&oref=slogin&oref=slogin )\n\n_Found on the PodSafeMusicNetwork: _ **Get Three Coffins Ready** is a Denver\nbased Instrumental Surf-Rock band. Listen the track titled, _Action!_ - at the\nend of the broadcast!",
  "date": "2008-05-05T00:00:00.000Z",
  "excerpt": "_Well, it's about time!_ I finally committed myself to personal branding and\nsharing both professional topics and personal insights/news via an email\nnewsletter. This mailing is managed by an online database for easy opt-in and\nout-out choices. I am sending you this message since we have been in contact\neither professionally or personally (friends and family included).",
  "id": "f75f3f47-50b2-4689-8b9f-a72612a4189d",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "internet-marketing-report-and-social-media-highlights-newsletter-may-08",
  "title": "Internet Marketing Report and Social Media Highlights Newsletter - May '08"
},
{
  "body": null,
  "date": "2008-05-01T00:00:00.000Z",
  "excerpt": "Why post with the category or 'tag', flipside? I chose this tag to be a\ncollection for everything else, comments or trackbacks on other blogs, my\ntwitter feed, and so on. In the same fashion as an indy band publishing a new\nhit on vinyl and been forced to put a track on the flipside, I dedicate this\ntag for all my other musings that inevitable keep me focused on my main topics\nfor my podcast. So, enjoy the abstract side of micro blogging here on my\nblog's flipside.",
  "id": "e76373f5-6746-408e-b88d-d051f14e00db",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "so-you-landed-on-the-flipside",
  "title": "So, You Landed on the Flipside..."
},
{
  "body": "**Search**:\n\n### [What is SEO process ?](http://www.linkedin.com/answers/technology/web-development/TCH_WDD/199145-17077367?browseIdx=4&sik=1207550620415&goback=%2Eama)\n\n_Asked by C.R. in [Web\nDevelopment](http://www.linkedin.com/answers/browse/technology/web-\ndevelopment/TCH_WDD?goback=%2Eama), [Graphic\nDesign](http://www.linkedin.com/answers/browse/marketing-sales/graphic-\ndesign/MAR_GRD?goback=%2Eama)_\n\n#### Answer:\n\n\"Targeting keywords and testing your results in search engines then testing\nhow real people respond to your listings in search results. Success is when a\nsearcher is looking for just what you offer and your listings in the search\nengine results page (SERPs) are relevant and the best answer to the reason\nthey started searching anyway. When your prospect finds you and stops\nsearching that is SEO at its best.\"\n\n###  [As an SEO client, what kinds of stats do you track? What kinds of information would you like to be able to track?](http://www.linkedin.com/answers/marketing-sales/advertising-promotion/internet-marketing/MAR_ADP_INM/203869-2821834?browseIdx=8&sik=1207550620415&goback=%2Eama)\n\n_Asked by H.H in [Internet Marketing](http://www.linkedin.com/answers/browse\n/marketing-sales/advertising-promotion/internet-\nmarketing/MAR_ADP_INM?goback=%2Eama)_\n\n#### Answer:\n\n\"SEO is a tool to reach business goals and a part of a bigger plan within an\ninternet marketing strategy. The important metrics would be directly related\nto your business goal, creating leads or converting browsers into customers,\nthen turning them into repeat customers. I track the results in SERPs for my\ntargeted keywords and watch the analytics for the landing pages with the\nappropriate calls to action to reach my goals. I also use analytics to monitor\nmy goal funnels.\"\n\n**Ecommerce:**\n\n###  [What % of all page views are product detail pages in ecommerce sites?](http://www.linkedin.com/answers/technology/e-commerce/TCH_ECM/204425-1612763?browseIdx=0&sik=1207550620415&goback=%2Eama)\n\n_Asked by M.J. in [E-Commerce](http://www.linkedin.com/answers/browse/techno\nlogy/e-commerce/TCH_ECM?goback=%2Eama)_\n\n#### Answer:\n\n\"I just read a book titled, Web Design for ROI. The authors run an agency,\nClosed Loop Marketing (CLM), and do report on ecommerce metrics. The numbers\nmay not be based on the top 1000, but the authors, Lance Loveday and Sandra\nNiehaus, have specialized in ecommerce. I posted an audio review of the book\non my site. The metrics vary based on so many factors, I don't believe an\nindustry breakdown will help you. I would suggest that the home page\npercentage would be more like 50% rather than 15%, and many people report on a\n2-3% conversion rate. In my opinion it doesn't matter so much what the metrics\nare for other sites, it matters that you know the metrics for your site and\nwhat to do about them to improve your conversions.\"\n\n###  [Which are the web sites which appear to be the most profitable (return on investment)?](http://www.linkedin.com/answers/technology/e-commerce/TCH_ECM/199214-317122?browseIdx=3&sik=1207550620415&goback=%2Eama)\n\n_Asked by A.C. in [E-Commerce](http://www.linkedin.com/answers/browse/technolo\ngy/e-commerce/TCH_ECM?goback=%2Eama)_\n\n#### Answer:\n\n\"Any web site that offers an informational product with a high dollar sale for\ne-commerce transactions. For example, a real estate coaching site that offers\nmembership at a premium fee would be a example of a high return on investment\nROI web site.\"\n\n**Social Media:**\n\n###  [Twitter: How useful is it?](http://www.linkedin.com/answers/marketing-sales/advertising-promotion/internet-marketing/MAR_ADP_INM/205031-8169793?browseIdx=1&sik=1207550620415&goback=%2Eama)\n\n_Asked by M.S. in [Internet Marketing](http://www.linkedin.com/answers/browse\n/marketing-sales/advertising-promotion/internet-\nmarketing/MAR_ADP_INM?goback=%2Eama)_\n\n#### Answer:\n\n\"I use twitter combined with my WordPress blog to show my tweets on the blog\nand also to announce my posts to the Twitter audience. I've learned that\nmarketing folks tend to go wild with it. I think the best use of twitter would\nbe to have a micro conversation; however twitter often seems more like a\nshoutbox. twitter may be one way to reduce those reply to all email updates\nwhen updating a group of friends about an event or hot subject. also seems\nlike a shameless way to get links, traffic and hopefully some other social\nbookmarking activity.\"\n\n**Internet marketing:**\n\n###  [10 Million Page Views A Month, Hardly Any Revenue](http://www.linkedin.com/answers/marketing-sales/advertising-promotion/internet-marketing/MAR_ADP_INM/205027-4542288?browseIdx=2&sik=1207550620415&goback=%2Eama)\n\n_Asked by P.S. in [Internet Marketing](http://www.linkedin.com/answers/browse\n/marketing-sales/advertising-promotion/internet-\nmarketing/MAR_ADP_INM?goback=%2Eama)_\n\n#### Answer:\n\n\"Patrick, you received a lot of great answers so far. I want to suggest\nincluding affilitate links in your email newsletter, like ads for cell phone\nwallpaper, ringtones, etc. Other affiliate links that may generate revenue\nfrom your audience are 'free stuff' links where the visitor completes surveys\nto win. This young audience has more time than money, finding a way to\nmonitize from their time investment in your network, or perhaps from their\nopinions may help the situation.\"\n\n###  [What Interview Questions Would YOU Ask a Marketing professional?](http://www.linkedin.com/answers/marketing-sales/advertising-promotion/internet-marketing/MAR_ADP_INM/203942-3313281?browseIdx=5&sik=1207550620415&goback=%2Eama)\n\n_Asked by R.H. in [Internet Marketing](http://www.linkedin.com/answers/browse\n/marketing-sales/advertising-promotion/internet-\nmarketing/MAR_ADP_INM?goback=%2Eama)_\n\n#### Answer:\n\n\" **(1)** What is your passion? **(2)** How well do you understand new media?\n**(3)** What is your experience in creating ROI within my niche market?\"\n\n  * [What piece of PPC management software is the best?](http://www.linkedin.com/answers/marketing-sales/advertising-promotion/internet-marketing/MAR_ADP_INM/122087-1202503?browseIdx=9&sik=1207550620415&goback=%2Eama)\n\n_Asked by R.D. in [Internet Marketing](http://www.linkedin.com/answers/browse\n/marketing-sales/advertising-promotion/internet-\nmarketing/MAR_ADP_INM?goback=%2Eama)_\n\n#### Answer:\n\n\"I am assuming that you are already using Google Analytics in combiniation\nwith AdWords. I use them in addition to other keyword research tools like\nWordTracker.com and WebCEO.\"\n\n**Business: **\n\n###  [Help with small business start up/internet marketing?](http://www.linkedin.com/answers/marketing-sales/advertising-promotion/internet-marketing/MAR_ADP_INM/201168-5850689?browseIdx=6&sik=1207550620415&goback=%2Eama)\n\n_Asked by M.L. in [Internet Marketing](http://www.linkedin.com/answers/browse\n/marketing-sales/advertising-promotion/internet-\nmarketing/MAR_ADP_INM?goback=%2Eama), [Starting\nUp](http://www.linkedin.com/answers/browse/startups-small-businesses/starting-\nup/STR_STP?goback=%2Eama)_\n\n#### Answer:\n\n\"Well, I am very impressed with the community responses to your business\nproblem. My experience is that jewelry sells best in person and under good\nlighting conditions, people like to see it on before they buy. Video content\nmay be good to use personal testimonies. Also take advantage of social\nnetworks to create more in person shows. Perhaps an affiliate program would\nhelp with sales; other bloggers could offer your jewelry on their sites and\nearn commissions.\"\n\n###  [How to find good open source consultants for full time work?](http://www.linkedin.com/answers/technology/information-technology/computer-networking/TCH_ITS_CNW/201872-8886523?browseIdx=7&sik=1207550620415&goback=%2Eama)\n\n_Asked by R.R. in [Computer\nNetworking](http://www.linkedin.com/answers/browse/technology/information-\ntechnology/computer-networking/TCH_ITS_CNW?goback=%2Eama)_\n\n#### Answer:\n\n\"Open source developers are community minded. Join the open source communities\nthat you want to find an expert in and join the conversations. Perhaps you can\nfind a meet up of developers at meetup.com to make connections, also posting a\nclassified in facebook.com may generate some interest.\"\n\n### [How to deduct web development and custom software donations?](http://www.linkedin.com/answers/finance-accounting/accounting/FIN_ACC/205913-13218578?browseIdx=0&sik=1207722607048&goback=%2Eama)\n\n_Asked by D.K. in [Accounting](/answers/browse/finance-\naccounting/accounting/FIN_ACC?goback=%2Eama), [Corporate\nTaxes](/answers/browse/finance-accounting/corporate-\ntaxes/FIN_CTX?goback=%2Eama)_\n\n#### Answer:\n\n\"My experience is that creating websites for non-profits is a gift of labor,\nalthough the time is money to you, the IRS doesn't consider the time\ninvestment to your favorite charity as a monetary contribution, and not tax\ndeductible. I would consider limiting your time to what you can freely give\nand be satisfied that you are making a difference! As a web developer I often\nuse opensource or free software (e.g. apache web server on linux); so at times\nit makes sense to pay it forward, just don't go broke doing so.\"\n\n### Credits\n\n\"Finish What We Started\" by Headway and can be found\nonline at… http://www.podsafemusicnetwork.com",
  "date": "2008-04-09T00:00:00.000Z",
  "excerpt": "This week I spent some time getting social with LinkedIn.com I answered a few\nquestions related to my profession. This episode (6) covers the questions in\nshort form with links to the original questions with the linkedin community\nanswers, you will need to log-in at linkedin.com to view the links in this\npost. The audio player above includes the additional explanations to these\nquestions and comments on the answers submitted by the linkedin members. ",
  "id": "20bbd5a9-0e37-4f92-9187-fadaf579b3fd",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "answers-for-internet-marketing-seo-business-and-promotion",
  "title": "Answers for Internet Marketing, SEO, Business and Promotion"
},
{
  "body": "Here is my situation, I am working on an eCommerce site with over 4,000 unique\nvisitors each month but the checkout rate seems fairly low, and the analytics\nshow a large percentage of potential customers exiting the checkout process at\nthe confirm stage. Also, a large volume of visitors landing on the home page\nbounce without entering in to key areas of the site and responding to my calls\nto action (buying product or completing a form).\n\n**The major shift for me will be creating a larger return on investment for my search engine optimization and marketing efforts by creating a larger percentage of goal conversions with my current volume of web site traffic.**\n\nThis will have a lasting and recurring benefit since a small decrease in\nbounces and abandoned goal funnels will generate a higher percentage of growth\nwithout buying more traffic. This process of conversion optimization has the\nbiggest band for my buck (or sweat) and helps with growing conversions with my\ncurrent pay-per-click campaigns. Also, the strategies presented will help me\ncommunicate more effectively with my audience. The book inspired me to apply a\nconversion optimization beginning at my check-put pages, working my way back\nto the home page. After adding a secondary goal on my detail pages I noticed\nan increase in online sales. This optimization process creates results!",
  "date": "2008-03-26T00:00:00.000Z",
  "excerpt": "_Book Review:_ [Web Design for ROI by Lance Loveday & Sandra Niehaus](http://www.amazon.com/gp/product/0321489829?ie=UTF8&tag=pixhanradintm-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0321489829)\n\nEach year I find one or two books that really stand out. This book, _Web\nDesign for ROI_, changed the way I look at current eCommerce projects and\nhelped me identify better strategies for building web sites. This 10 minute\nreview highlights the key points in the book that helped me learn the process\nfor **‘conversion optimization’** – converting my site visitors into\ncustomers.",
  "id": "31d5a3a2-c926-4ff6-9b14-c37ea9c031d9",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "conversion-optimization-by-strategic-design",
  "title": "Conversion Optimization by Strategic Design"
},
{
  "body": "_**Overview:**_\n\n  * Call from a friend about need for a web site to publish a story\n  * Receipt of eleven (11) page Word doc.\n  * Summary of objective : Publish the story as collected over the last year by investigators to inform and alert contributors to a charity with regard to ongoing investigation and allegations of abuse.\n  * Execution of plan by using a new installation of WordPress with four (4) pages & twenty-four (24) posts derived from the Word doc.\n  * Target blogs to get traffic: Posting on Blogger, a friends blog, and mySpace\n_**Client History:**_\n\n  * Previous site, Miracle-ranch.org recently taken down, now offline.\n  * 9/27/07-9/29/07 : bought up target domains\n_**Timeline begins 10/18/07:**_\n\n  * Friend calls and emails me on 10/18/07 to share his story\n  * Goal of ranking next or above the competitor's site site using search engine optimization\n  * Getting crazy and promising top rankings in 7 days\n  * Kick off new blog website on Friday, October 19th, 2007; in the early AM\n  * Fire up Google Analytics on 10/20/07\n  * Get link in post from friend's blog 10/20/07; comment on other blogs with related topics\n  * Joined Technorati 10/21/07\n  * Signed up for Blogger and MySpace on 10/22/07\n_**Results - Good News!**___• Indexed by Google on October 21st, 2007, and\nagain on 10/25/07 under existing domain• Excellent ranking using competitors\nkeywords and name of organization and domain in 2-3 days; using new\nkeywords._**Followup on 11/10/07:**_\n\n  * Number one (#1) ranking in Google above competitor\n  * About 41 pages cached (28 posts and no comments)\n  * Increasing membership\n  * Client now in discussions with competitor about the original objective.\n_WordPress Plugins in use for this site_\n\n  * Google Sitemaps\n  * All in One SEO Pack\n  * Google Sitemaps\n  * obsocialbookmarker\n  * WordPress Mobile Edition\n  * WP Navigation Tool (NAVT)\n  * podPress\n**ScreenShots from search engine results and google's cache **:_Initially the site started ranking well in a few days: _ ![Top Rankings](http://pixelhandler.com/uploads/toprankings-bcf.jpg)_Seven days later I noticed that the site was cached by Google in three days after launching/posting the Web site:_![google cache](http://pixelhandler.com/uploads/googlecache-bcf.jpg)_After a couple weeks passed the site ranked number one on the first page of Google: _![ranking number one on google](http://pixelhandler.com/uploads/toprankings-bcf-number1.jpg)",
  "date": "2007-11-10T00:00:00.000Z",
  "excerpt": "_Question:_ How long does it take Google to index my new Web site",
  "id": "0bceec25-66c7-4024-b38f-9bb259bc655b",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "new-web-site-domain-indexed-by-google-in-only-3-days-from-launch",
  "title": "New Web Site/Domain Indexed by Google in only 3 Days from Launch"
},
{
  "body": "  1. How would you describe the audience you want to attract?\n  2. Do you want the design to reflect your organization or your audience?\n  3. What is the primary message you wish to convey to your audience with this project?\n  4. What are the secondary objectives you hope to achieve?\n  5. Use three adjectives to describe how the overall design should be perceived by the end user. (Examples: conservative, progressive, friendly, formal, casual, serious, energetic, humorous, professional, fun.)\n  6. Would you like to see a group of stock photos? If yes, provide a range of the number of final photos that you estimate will be necessary to represent your product or company (e.g. 6 to 12 final photos).\n  7. Would it help to see 2-3 design comps? (different color schemes and text treatments)\n  8. Is there a color scheme, logo use, and/or photo(s) that you indent to use? (Do you already use marketing materials that should be followed for this project?)\n  9. What is the background, product line, and/or mission of your business? (This will help communicate the heart of the company to your audience.)\n  10. Please list URLs (web site addresses) of your competitors. Next to each specify what you like and don't like about these sites.\n  11. Please list any other URLs of sites that have look and feel and layout aspects you would like to emulate on your site.\n  12. Please give a range of the number of pages or screens that you feel will be sufficient to meet your project objectives (e.g. 20 to 25 final pages/screens).\n  13. For E-commerce Projects: \n    * Please estimate the total number of products (SKUs) and product categories.\n    * Do you have a merchant account with an online payment gateway (e.g. PayPal)?\n    * Would you like to use flat rate for shipping fees or live quotes from shipping providers?\n  14. Have you established a budget for the web site?\n  15. Do you have a copywriter for the content of your upcoming Web site? Do you need legal counsel to prepare 'terms of use' and 'privacy policy' pages?\n  16. Do you feel that Flash animation will help your visitors 'catch' your marketing message? if so, how many concepts/animations do you think will get the message across?\n  17. Are you interested in a dynamic or static web site? Dynamic sites use a database to update/edit content and/or product listings via your web browser. Static sites can be packaged with pre-paid maintenance plan for updates/edits.\n  18. Do you plan on advertising your products/service online? (Pay-per-click and banner ads, e.g. Google AdWords)\n  19. Do you have a strategy for Search Engine Optimization (SEO) for 'free leads' and/or Search Engine Marketing (SEM) for maximizing online advertising? SEO includes keyword research and planning your content for performance in Search Engine Results Pages (SERPs)\n  20. Finally, and perhaps most important, what is your 'unique selling proposition'? (i.e. How will you compete in the marketplace? What does your prospect need to know about the advantage of your products/services in order to become a client?)",
  "date": "2007-10-27T00:00:00.000Z",
  "excerpt": "Every Web project needs a solid plan to work through the estimate to the site delivery. Here is a list of project questions to plan your Web site with considerations for marketing, design, SEO, unique selling position, E-commerce, and more...",
  "id": "e4c13305-9b0b-4f08-ab36-acc82e9a7d61",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "twenty-questions-to-plan-your-web-site-project",
  "title": "Twenty Questions to Plan Your Web Site Project"
},
{
  "body": "<p>Questions addressed:</p>\n<ol>\n\t<li>How do the following mash up to produce results&hellip; design, development, search engine optimization, Web standards, current trends, Web analytics, content, SERPs, usability, marketing strategy, and goal conversions?</li>\n\t<li>And, why does it matter?</li>\n\t<li>So, what can I do about it?</li>\n</ol>\n<p>Wrap up: Keep the main thing the main thing! If your unique selling position is intimately related to your passion then it will be easy to communicate your message to your target audience.</p>",
  "date": "2007-10-06T00:00:00.000Z",
  "excerpt": "Pixel Handler Episode 2, Your Web Project, features web project elements and how they mash up with your marketing strategy.",
  "id": "3c1c2baa-2639-44c7-a39c-b2d868679ad3",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "your-web-project-marketing-strategy-mash-up",
  "title": "Your Web Project, Marketing Strategy Mash Up"
},
{
  "body": "The main difference between radio and podcast broadcasting is that the latter can be repurposed across many delivery systems: mp3 players, internet, iPhone, email; and, the potential distribution is world-wide. A common misconception is that a podcast is recorded (not live) and radio with a live presentation is more interactive and appealing to the listener. This is just not true, many podcasts are broadcast live, using the internet with call-in and live chat interaction. While the podcast will not replace TV or radio it has the added value of a more select and targeted audience. This type of focus and trust relationship between the host and listener will most likely be sought after by advertises who would like to chime-in with a message to consumers.\n\nFor businesses this may prove to be a big bang for your buck promotion tool, or another vehicle to extend their brand impression. The key is targeting a niche market, many business will likely become a podcast advertiser in the not-so-far future. Also, business may find a creative way to provide value to their clients using this form of audio and visual broadcast over the internet. With tight or empty advertising budgets, many companies may begin to publish a promotion series on podcast and even distribute their message on an MP3 player or video iPod.\n\nAlso with this post is a video <a target=\"_blank\" href=\"http://pixelhandler.com/uploads/PodCampSoCal2007-ChrisBrogan.m4v\" title=\"PodCampSoCal2007-ChrisBrogan.m4v\">(click to download)</a> featuring <a target=\"_blank\" href=\"http://chrisbrogan.com/about/\">Chris Brogan</a> co-founder of PodCamp, a free unconference that explores the benefits and uses of new media community tools. Brogan begins with an anecdote from a Bradey Bunch episode then wraps up with encouragement for a community of new media enthusiasts at <a target=\"_blank\" href=\"http://podcamp.pbwiki.com/PodcampSoCal\">PodCampSoCal 2007</a> in Ontario, CA. Click the gray arrow below to play a sound clip from the presentation.\n\n<em>Show Notes:</em>\n\nEpisode 001 features  music provided from the PodShow Podsafe Music Network. Check it out at music.podshow.com Opening and closing track clipped from the song, `Do You Know?` by The Tonies\n\nBand Bio: The Tonies are Tony Block and Tony Gettig, two rockers who like to have fun! The \"Daily Dose\" CD released in 2000 with decent critical review. \"Get Up &amp; Move\" is the new project and is set for a fall 2006 release.",
  "date": "2007-09-27T00:00:00.000Z",
  "excerpt": "This event is attended by both techies and non-techies alike. Many in the group are advocates of media publishing, including musicians, macintosh computer enthusiasts, Christian media publishers, businesses and people just in it for fun. The beauty of this event is the collaboration of people who share their expertise and experience in a free flowing mix of presentations and audience participation with questions, answers and advice.\n\nThe podcast concept is taking up speed as more publishers join the movement. One caveat is that many potential listeners (target audience) have a learning curve prohibiting them from becoming a podcast listener. A common opinion among media publishers is to promote their broadcasts using alternative terminology like internet radio or web tv show instead of the `P-bomb`. Many listeners may get turned off by the technical terminology, “podcast”. The movement began in 2003-2004; one proposal is that the first podcast was as early as 1945.",
  "id": "7bba292d-d381-4c5b-a18a-2d63b9d55db1",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "commentary-from-podcamp-socal-event-in-ontario-ca",
  "title": "Commentary from PodCamp SoCal, event in Ontario, CA"
},
{
  "body": null,
  "date": "2007-09-26T00:00:00.000Z",
  "excerpt": "This is brand new, I'm getting ready to put together some articles on what I do best, online marketing, web site design and search engine optimization. Tomorrow I will attend my first podcamp, the unconference for new media publishers; and I'm looking forward to posting the experience on my new blog.",
  "id": "6f9dbb3c-a1a2-4031-a57a-ae1561f18d84",
  "links": {
    "author": "5c9b62ec-1569-448b-912a-97e6d62f493e"
  },
  "slug": "getting-started-with-my-blog",
  "title": "Getting started with my blog"
}];

if (module && module.exports) {
  module.exports = testData;
}
